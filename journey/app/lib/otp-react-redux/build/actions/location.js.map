{"version":3,"sources":["location.js"],"names":["receivedPositionError","fetchingPosition","receivedPositionResponse","getCurrentPosition","setAsType","onSuccess","dispatch","getState","navigator","geolocation","type","position","console","log","locationType","error","message","enableHighAccuracy","addLocationSearch"],"mappings":";;;;;;;;AAAA;;AAEA;;AAEO,MAAMA,qBAAqB,GAAG,gCAAa,gBAAb,CAA9B;;AACA,MAAMC,gBAAgB,GAAG,gCAAa,mBAAb,CAAzB;;AACA,MAAMC,wBAAwB,GAAG,gCAAa,mBAAb,CAAjC;;;AAEA,SAASC,kBAAT,CAA6BC,SAAS,GAAG,IAAzC,EAA+CC,SAA/C,EAA0D;AAC/D,SAAO,gBAAgBC,QAAhB,EAA0BC,QAA1B,EAAoC;AACzC,QAAIC,SAAS,CAACC,WAAd,EAA2B;AACzBH,MAAAA,QAAQ,CAACL,gBAAgB,CAAC;AAAES,QAAAA,IAAI,EAAEN;AAAR,OAAD,CAAjB,CAAR;AACAI,MAAAA,SAAS,CAACC,WAAV,CAAsBN,kBAAtB,EACE;AACAQ,MAAAA,QAAQ,IAAI;AACV,YAAIA,QAAJ,EAAc;AACZC,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,QAA3B,EAAqCP,SAArC;AACAE,UAAAA,QAAQ,CAACJ,wBAAwB,CAAC;AAAES,YAAAA;AAAF,WAAD,CAAzB,CAAR;;AACA,cAAIP,SAAJ,EAAe;AACbQ,YAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACAP,YAAAA,QAAQ,CAAC,+BAAqB;AAAEQ,cAAAA,YAAY,EAAEV;AAAhB,aAArB,CAAD,CAAR;AACAC,YAAAA,SAAS,IAAIA,SAAS,EAAtB;AACD;AACF,SARD,MAQO;AACLC,UAAAA,QAAQ,CAACN,qBAAqB,CAAC;AAAEe,YAAAA,KAAK,EAAE;AAAEC,cAAAA,OAAO,EAAE;AAAX;AAAT,WAAD,CAAtB,CAAR;AACD;AACF,OAdH,EAeE;AACAD,MAAAA,KAAK,IAAI;AACPH,QAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CE,KAA9C;AACAT,QAAAA,QAAQ,CAACN,qBAAqB,CAAC;AAAEe,UAAAA;AAAF,SAAD,CAAtB,CAAR;AACD,OAnBH,EAoBE;AACA;AAAEE,QAAAA,kBAAkB,EAAE;AAAtB,OArBF;AAuBD,KAzBD,MAyBO;AACLL,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACAP,MAAAA,QAAQ,CAACN,qBAAqB,CAAC;AAAEe,QAAAA,KAAK,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAT,OAAD,CAAtB,CAAR;AACD;AACF,GA9BD;AA+BD;;AAEM,MAAME,iBAAiB,GAAG,gCAAa,qBAAb,CAA1B","sourcesContent":["import { createAction } from 'redux-actions'\n\nimport { setLocationToCurrent } from './map'\n\nexport const receivedPositionError = createAction('POSITION_ERROR')\nexport const fetchingPosition = createAction('POSITION_FETCHING')\nexport const receivedPositionResponse = createAction('POSITION_RESPONSE')\n\nexport function getCurrentPosition (setAsType = null, onSuccess) {\n  return async function (dispatch, getState) {\n    if (navigator.geolocation) {\n      dispatch(fetchingPosition({ type: setAsType }))\n      navigator.geolocation.getCurrentPosition(\n        // On success\n        position => {\n          if (position) {\n            console.log('current loc', position, setAsType)\n            dispatch(receivedPositionResponse({ position }))\n            if (setAsType) {\n              console.log('setting location to current position')\n              dispatch(setLocationToCurrent({ locationType: setAsType }))\n              onSuccess && onSuccess()\n            }\n          } else {\n            dispatch(receivedPositionError({ error: { message: 'Unknown error getting position' } }))\n          }\n        },\n        // On error\n        error => {\n          console.log('error getting current position', error)\n          dispatch(receivedPositionError({ error }))\n        },\n        // Options\n        { enableHighAccuracy: true }\n      )\n    } else {\n      console.log('current position not supported')\n      dispatch(receivedPositionError({ error: { message: 'Geolocation not supported by your browser' } }))\n    }\n  }\n}\n\nexport const addLocationSearch = createAction('ADD_LOCATION_SEARCH')\n"]}