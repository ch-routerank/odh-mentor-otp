{"version":3,"sources":["call-time-counter.js"],"names":["CallTimeCounter","Component","counterString","seconds","date","Date","setSeconds","toISOString","substr","state","setState","timer","window","setInterval","_refreshCounter","clearInterval","componentDidMount","_startRefresh","componentWillUnmount","_stopRefresh","render","className","style","props","_formatSeconds"],"mappings":";;;;;;;;;AACA;;;;;;;;AAEA;AACA;AACA;AACA;AACe,MAAMA,eAAN,SAA8BC,gBAA9B,CAAwC;AAAA;AAAA;;AAAA,mCAC7C;AACNC,MAAAA,aAAa,EAAE;AADT,KAD6C;;AAAA,4CAgBnCC,OAAD,IAAa;AAC5B,YAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAAT,CAAb;AACAD,MAAAA,IAAI,CAACE,UAAL,CAAgBH,OAAhB;AACA,aAAOC,IAAI,CAACG,WAAL,GAAmBC,MAAnB,CAA0B,EAA1B,EAA8B,CAA9B,CAAP;AACD,KApBoD;;AAAA,6CAsBnC,MAAM;AACtB,YAAMN,aAAa,GAAG,KAAKO,KAAL,CAAWP,aAAX,GAA2B,CAAjD;AACA,WAAKQ,QAAL,CAAc;AAACR,QAAAA;AAAD,OAAd;AACD,KAzBoD;;AAAA,2CA2BrC,MAAM;AACpB;AACA,YAAMS,KAAK,GAAGC,MAAM,CAACC,WAAP,CAAmB,KAAKC,eAAxB,EAAyC,IAAzC,CAAd;AACA,WAAKJ,QAAL,CAAc;AAAEC,QAAAA;AAAF,OAAd;AACD,KA/BoD;;AAAA,0CAiCtC,MAAM;AACnBC,MAAAA,MAAM,CAACG,aAAP,CAAqB,KAAKN,KAAL,CAAWE,KAAhC;AACD,KAnCoD;AAAA;;AAKrDK,EAAAA,iBAAiB,GAAI;AACnB,SAAKC,aAAL;AACD;;AAEDC,EAAAA,oBAAoB,GAAI;AACtB,SAAKC,YAAL;AACD;AAED;AACF;AACA;;;AAsBEC,EAAAA,MAAM,GAAI;AACR,UAAM;AAACC,MAAAA,SAAD;AAAYC,MAAAA;AAAZ,QAAqB,KAAKC,KAAhC;AACA,wBACE;AAAK,MAAA,SAAS,EAAEF,SAAhB;AAA2B,MAAA,KAAK,EAAEC;AAAlC,OACG,KAAKE,cAAL,CAAoB,KAAKf,KAAL,CAAWP,aAA/B,CADH,CADF;AAKD;;AA5CoD","sourcesContent":["// import moment from 'moment'\nimport React, { Component } from 'react'\n\n/**\n * Component that displays the call time (ticking with each second)\n * for an active call (assumes that mount time corresponds with call start).\n */\nexport default class CallTimeCounter extends Component {\n  state = {\n    counterString: 0\n  }\n\n  componentDidMount () {\n    this._startRefresh()\n  }\n\n  componentWillUnmount () {\n    this._stopRefresh()\n  }\n\n  /**\n   * Formats seconds as hh:mm:ss string.\n   */\n  _formatSeconds = (seconds) => {\n    const date = new Date(0)\n    date.setSeconds(seconds)\n    return date.toISOString().substr(11, 8)\n  }\n\n  _refreshCounter = () => {\n    const counterString = this.state.counterString + 1\n    this.setState({counterString})\n  }\n\n  _startRefresh = () => {\n    // Set refresh to every second.\n    const timer = window.setInterval(this._refreshCounter, 1000)\n    this.setState({ timer })\n  }\n\n  _stopRefresh = () => {\n    window.clearInterval(this.state.timer)\n  }\n\n  render () {\n    const {className, style} = this.props\n    return (\n      <div className={className} style={style}>\n        {this._formatSeconds(this.state.counterString)}\n      </div>\n    )\n  }\n}\n"]}