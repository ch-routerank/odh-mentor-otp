{"version":3,"sources":["elevation-point-marker.js"],"names":["ElevationPointMarker","Component","render","diagramLeg","elevationPoint","showElevationProfile","props","elevationPointMarker","pos","coreUtils","itinerary","legLocationAtDistance","mapStateToProps","state","ownProps","otp","ui","config","elevationProfile","mapDispatchToProps"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,oBAAN,SAAmCC,gBAAnC,CAA6C;AAC3CC,EAAAA,MAAM,GAAI;AACR,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA,cAAd;AAA8BC,MAAAA;AAA9B,QAAuD,KAAKC,KAAlE,CADQ,CAER;;AACA,QAAIC,oBAAoB,GAAG,IAA3B;;AACA,QAAIF,oBAAoB,IAAIF,UAAxB,IAAsCC,cAA1C,EAA0D;AACxD,YAAMI,GAAG,GAAGC,aAAUC,SAAV,CAAoBC,qBAApB,CACVR,UADU,EAEVC,cAFU,CAAZ;;AAIA,UAAII,GAAJ,EAAS;AACPD,QAAAA,oBAAoB,gBAClB,6BAAC,0BAAD;AACE,UAAA,MAAM,EAAEC,GADV;AAEE,UAAA,SAAS,EAAC,SAFZ;AAGE,UAAA,MAAM,EAAE,CAHV;AAIE,UAAA,KAAK,EAAC,MAJR;AAKE,UAAA,OAAO,EAAE,GALX;AAME,UAAA,MAAM,EAAE,CANV;AAOE,UAAA,IAAI,MAPN;AAQE,UAAA,WAAW,EAAE;AARf,UADF;AAYD;AACF;;AACD,WAAOD,oBAAP;AACD;;AA1B0C;;AA6B7C,MAAMK,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAO;AACLX,IAAAA,UAAU,EAAEU,KAAK,CAACE,GAAN,CAAUC,EAAV,CAAab,UADpB;AAELC,IAAAA,cAAc,EAAES,KAAK,CAACE,GAAN,CAAUC,EAAV,CAAaZ,cAFxB;AAGLC,IAAAA,oBAAoB,EAAE,CAAC,CAACQ,KAAK,CAACE,GAAN,CAAUE,MAAV,CAAiBC;AAHpC,GAAP;AAKD,CAND;;AAQA,MAAMC,kBAAkB,GAAG,EAA3B;;eAEe,yBAAQP,eAAR,EAAyBO,kBAAzB,EAA6CnB,oBAA7C,C","sourcesContent":["import coreUtils from '../../otp-ui/core-utils/src'\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { CircleMarker } from 'react-leaflet'\n\n/**\n * As the OTP user moves the cursor over the elevation tracking chart\n * of a walking or biking leg (to see which point of their itinerary is at which elevation),\n * ElevationPointMarker displays and moves a marker on the map to highlight\n * the location that corresponds to the cursor position on the elevation chart,\n * so the user can see the streets and paths that correspond to a portion of an elevation profile.\n */\nclass ElevationPointMarker extends Component {\n  render () {\n    const { diagramLeg, elevationPoint, showElevationProfile } = this.props\n    // Compute the elevation point marker, if activeLeg and elevation profile is enabled.\n    let elevationPointMarker = null\n    if (showElevationProfile && diagramLeg && elevationPoint) {\n      const pos = coreUtils.itinerary.legLocationAtDistance(\n        diagramLeg,\n        elevationPoint\n      )\n      if (pos) {\n        elevationPointMarker = (\n          <CircleMarker\n            center={pos}\n            fillColor='#084c8d'\n            weight={6}\n            color='#555'\n            opacity={0.4}\n            radius={5}\n            fill\n            fillOpacity={1}\n          />\n        )\n      }\n    }\n    return elevationPointMarker\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    diagramLeg: state.otp.ui.diagramLeg,\n    elevationPoint: state.otp.ui.elevationPoint,\n    showElevationProfile: !!state.otp.config.elevationProfile\n  }\n}\n\nconst mapDispatchToProps = {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ElevationPointMarker)\n"]}