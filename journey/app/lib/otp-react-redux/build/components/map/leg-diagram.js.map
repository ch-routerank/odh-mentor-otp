{"version":3,"sources":["leg-diagram.js"],"names":["getElevationProfile","getTextWidth","legElevationAtDistance","coreUtils","itinerary","height","yAxisPanelWidth","BASELINE_Y","topElevYPx","bottomElevYPx","elevHeight","METERS_TO_FEET","LegDiagram","Component","constructor","props","width","leg","traversed","_getElevationProfile","xAxisCompression","setState","_determineCompressionFactor","evt","m","clientX","container","getBoundingClientRect","left","scrollLeft","setElevationPoint","state","setLegDiagram","useImperialUnits","steps","_unitConversion","componentDidUpdate","prevProps","startTime","_formatElevation","elev","Math","round","render","elevationPoint","yAxisPanelSvgContent","backgroundSvgContent","mainSvgContent","foregroundSvgContent","minElev","maxElev","points","SVG_WIDTH","range","rangeUnit","minDisplayed","floor","maxDisplayed","ceil","displayedRange","y","push","currentX","ptArr","stepArr","stepDetails","previousPair","map","step","stepIndex","stepWidthPx","distance","gain","loss","elevation","length","i","elevPair","diff","second","x","first","console","warn","unshift","pts","pt","join","elevConverted","beginStep","stepWidth","name","compressStreetName","streetName","fontSize","midPoint","anchor","halfLabelWidth","_onMouseMove","_onMouseLeave","_onResize","_onCloseButtonClick","PropTypes","number","func","split","str","mapStateToProps","ownProps","otp","ui","mapDispatchToProps"],"mappings":"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","sourcesContent":["import memoize from 'lodash.memoize'\nimport coreUtils from '../../otp-ui/core-utils/src'\nimport PropTypes from 'prop-types'\nimport React, {Component} from 'react'\nimport { Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport ReactResizeDetector from 'react-resize-detector'\n\nimport { setElevationPoint, setLegDiagram } from '../../actions/map'\n\nconst { getElevationProfile, getTextWidth, legElevationAtDistance } = coreUtils.itinerary\n\n// Fixed dimensions for chart\nconst height = 160\nconst yAxisPanelWidth = 40 // width of y axis labels\nconst BASELINE_Y = height - 20\nconst topElevYPx = 20\nconst bottomElevYPx = height - 40\nconst elevHeight = bottomElevYPx - topElevYPx\n\nconst METERS_TO_FEET = 1\n\nclass LegDiagram extends Component {\n  static propTypes = {\n    elevationPoint: PropTypes.number,\n    setLegDiagram: PropTypes.func,\n    setElevationPoint: PropTypes.func\n  }\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      useImperialUnits: true,\n      xAxisCompression: 0.5\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { leg } = this.props\n    if (leg && prevProps.leg && leg.startTime !== prevProps.leg.startTime) {\n      this._determineCompressionFactor(this.state.width, leg)\n    }\n  }\n\n  _determineCompressionFactor = (width, leg) => {\n    const { traversed } = this._getElevationProfile(leg)\n    if (traversed > 0) {\n      // Determine the appropriate compression factor to scale the elevation\n      // chart to fit the container width (i.e., remove the need for x-scrolling).\n      const xAxisCompression = width / (traversed + yAxisPanelWidth)\n      this.setState({ xAxisCompression, width })\n    }\n  }\n\n  _onResize = (width, height) => {\n    this._determineCompressionFactor(width, this.props.leg)\n  }\n\n  /** Set mouse hover location for drawing elevation point. */\n  _onMouseMove = (evt) => {\n    const m = evt.clientX - this.container.getBoundingClientRect().left + this.container.scrollLeft\n    this.props.setElevationPoint(m / this.state.xAxisCompression)\n  }\n\n  _onMouseLeave = () => {\n    this.props.setElevationPoint(null)\n  }\n\n  _onCloseButtonClick = () => {\n    this.props.setLegDiagram(null)\n    this.props.setElevationPoint(null)\n  }\n\n  _unitConversion = () => this.state.useImperialUnits ? METERS_TO_FEET : 1\n\n  /** Round elevation to whole number and add symbol. */\n  _formatElevation (elev) {\n    return Math.round(elev) + (this.state.useImperialUnits ? `'` : 'm')\n  }\n\n  _getElevationProfile = memoize((leg) => {\n    if (!leg) return {}\n    return getElevationProfile(leg.steps, this._unitConversion())\n  })\n\n  render () {\n    const { elevationPoint } = this.props\n    const { xAxisCompression } = this.state\n\n    const { leg } = this.props\n    if (!leg) return null\n\n    const yAxisPanelSvgContent = []\n\n    const backgroundSvgContent = []\n    const mainSvgContent = []\n    const foregroundSvgContent = []\n\n    const { minElev, maxElev, points, traversed } = this._getElevationProfile(leg)\n\n    const SVG_WIDTH = traversed * xAxisCompression\n    const range = maxElev - minElev\n    let rangeUnit\n    if (range > 4000) {\n      rangeUnit = 1000\n    } else if (range > 2000) {\n      rangeUnit = 500\n    } else if (range > 800) {\n      rangeUnit = 250\n    } else if (range > 400) {\n      rangeUnit = 100\n    } else {\n      rangeUnit = 50\n    }\n\n    // Compute the displayed elevation range\n    const minDisplayed = Math.floor(minElev / rangeUnit) * rangeUnit\n    const maxDisplayed = Math.ceil(maxElev / rangeUnit) * rangeUnit\n    const displayedRange = maxDisplayed - minDisplayed\n\n    // Draw the y-axis labels & guidelines\n    for (let elev = minDisplayed; elev <= maxDisplayed; elev += rangeUnit) {\n      const y = topElevYPx + elevHeight - elevHeight * (elev - minDisplayed) / displayedRange\n      yAxisPanelSvgContent.push(\n        <text\n          key={`axis-label-${elev}`}\n          x={yAxisPanelWidth - 3}\n          y={y + 3}\n          fontSize={11}\n          textAnchor='end'\n        >\n          {this._formatElevation(elev)}\n        </text>\n      )\n      backgroundSvgContent.push(\n        <line\n          key={`axis-guideline-${elev}`}\n          x1={0}\n          y1={y}\n          x2={SVG_WIDTH}\n          y2={y}\n          strokeWidth={1}\n          stroke='#ccc'\n          strokeDasharray='1, 1'\n        />\n      )\n    }\n\n    // Process each step in this leg\n    let currentX = 0\n    const ptArr = []\n    const stepArr = [currentX]\n    const stepDetails = []\n    let previousPair\n    leg.steps.map((step, stepIndex) => {\n      const stepWidthPx = step.distance * xAxisCompression\n      let gain = 0\n      let loss = 0\n      // Add this step to the polyline coords\n      if (step.elevation && step.elevation.length > 0) {\n        for (let i = 0; i < step.elevation.length; i++) {\n          const elevPair = step.elevation[i]\n          if (previousPair) {\n            const diff = (elevPair.second - previousPair.second) * this._unitConversion()\n            if (diff > 0) gain += diff\n            else loss += diff\n          }\n          const x = currentX + elevPair.first * xAxisCompression // - firstX\n          const y = topElevYPx + elevHeight - elevHeight * (elevPair.second * this._unitConversion() - minDisplayed) / displayedRange\n          ptArr.push([x, y])\n          previousPair = elevPair\n        }\n      }\n\n      // Add the street segment as a horizontal line at the bottom of the diagram\n      mainSvgContent.push(\n        <line\n          key={`step-${stepIndex}-line`}\n          x1={currentX + 1}\n          y1={BASELINE_Y}\n          x2={currentX + stepWidthPx - 1}\n          y2={BASELINE_Y}\n          strokeWidth={6}\n          stroke='#aaa'\n        />\n      )\n      // Add The street name label, including clipping path to prevent overflow\n      if (stepWidthPx > 30) {\n        mainSvgContent.push(\n          <g key={`step-${stepIndex}-label`}>\n            <clipPath id={`clip-${stepIndex}`}>\n              <rect x={currentX + 10} y={0} width={stepWidthPx - 10} height={200} />\n            </clipPath>\n            <text\n              x={currentX + stepWidthPx / 2}\n              y={BASELINE_Y + 16}\n              fontSize={11}\n              textAnchor='middle'\n            >\n              {// FIXME: bug where gain is shown for a single step even though\n                // the elevation gain actually begins accumulating with a different step\n              }\n              {gain >= 10 && <tspan fill='red'>↑{this._formatElevation(gain)}{'  '}</tspan>}\n              {loss <= -10 && <tspan fill='green'>↓{this._formatElevation(-loss)}</tspan>}\n            </text>\n          </g>\n        )\n      }\n      currentX += stepWidthPx\n      stepArr.push(currentX)\n      stepDetails.push({ gain, loss })\n    })\n    if (ptArr.length === 0) {\n      console.warn(`There is no elevation data to render for leg`, leg)\n      return null\n    }\n    // Add initial point if the first elevation entry does not start at zero\n    // distance.\n    if (ptArr[0][0] !== 0) ptArr.unshift([0, ptArr[0][1]])\n    // Add final points in order to round out area field.\n    ptArr.push([SVG_WIDTH, ptArr[ptArr.length - 1][1]])\n    ptArr.push([ptArr[ptArr.length - 1][0], BASELINE_Y])\n    ptArr.push([0, BASELINE_Y])\n    // Construct and add the main elevation contour area\n    const pts = ptArr.map((pt, i) => i === 0 ? `M${pt[0]} ${pt[1]}` : `L${pt[0]} ${pt[1]}`).join(' ')\n    mainSvgContent.unshift(\n      <path\n        key='elev-polyline'\n        d={`${pts} Z`}\n        strokeWidth={0}\n        fill='lightsteelblue'\n        fillOpacity={0.5}\n      />\n    )\n\n    // Add the highlighted elevation point (on mouse hover), if actively hovering.\n    if (elevationPoint) {\n      const elev = legElevationAtDistance(points, elevationPoint)\n      const elevConverted = elev * this._unitConversion()\n      const x = elevationPoint * xAxisCompression\n      for (var i = 0; i < stepArr.length; i++) {\n        if (x >= stepArr[i] && x <= stepArr[i + 1]) {\n          const beginStep = stepArr[i]\n          // Mouse hover is at step i, add hover fill for street step and draw\n          // street label\n          const stepWidth = stepArr[i + 1] - beginStep\n          backgroundSvgContent.push(\n            <rect\n              key={`step-hover-${i}`}\n              x={beginStep}\n              y={0}\n              width={stepWidth}\n              height={200}\n              fillOpacity={0.5}\n              fill='#eee' />\n          )\n          const name = compressStreetName(leg.steps[i].streetName)\n          const fontSize = 22\n          const midPoint = beginStep + stepWidth / 2\n          // Determine where to anchor hover street label text (to avoid\n          // clipping on edges of svg).\n          let anchor = 'middle'\n          let x = midPoint\n          const halfLabelWidth = getTextWidth(name) / 2\n          if (midPoint - halfLabelWidth < 0) {\n            // Anchor left edge of text to left of svg\n            anchor = 'start'\n            x = 0 + 3\n          } else if (midPoint + halfLabelWidth > SVG_WIDTH) {\n            // Anchor right edge of text to right of svg\n            anchor = 'end'\n            x = SVG_WIDTH - 3\n          }\n          backgroundSvgContent.push(\n            <text\n              key={`step-text-hover-${i}`}\n              x={x}\n              y={height / 2}\n              fontSize={fontSize}\n              textAnchor={anchor}\n              fill='#777'\n              opacity={0.6}\n            >\n              {name}\n            </text>\n          )\n        }\n      }\n      const y = elev !== null\n        ? topElevYPx + elevHeight - elevHeight * (elevConverted - minDisplayed) / displayedRange\n        : height / 2\n      backgroundSvgContent.push(\n        <line\n          key='elev-point-line'\n          x1={x}\n          y1={elev !== null ? y : topElevYPx}\n          x2={x}\n          y2={BASELINE_Y}\n          strokeWidth={1}\n          stroke='#aaa'\n        />\n      )\n      // Only add the current elevation indicator and label if there is a data\n      // point available.\n      if (elev !== null) {\n        foregroundSvgContent.push(\n          <circle\n            key='elev-point-circle'\n            cx={x}\n            cy={y}\n            r='4'\n            fill='#084c8d'\n            stroke='white'\n            strokeWidth='0'\n          />\n        )\n        // Add the current elevation text label\n        foregroundSvgContent.push(\n          <text\n            key='elev-point-label'\n            x={x}\n            y={y - 10}\n            fontSize={11}\n            textAnchor='middle'>\n            {this._formatElevation(elevConverted)}\n          </text>\n        )\n      }\n    }\n    return (\n      <div className='leg-diagram'>\n        {/* The y-axis labels, which are fixed to the left side */}\n        <div className='y-axis-panel' style={{ width: yAxisPanelWidth }}>\n          <svg>\n            {yAxisPanelSvgContent}\n          </svg>\n        </div>\n\n        {/* The main, scrollable diagram */}\n        <div\n          ref={(container) => { this.container = container }}\n          onMouseMove={this._onMouseMove}\n          onMouseLeave={this._onMouseLeave}\n          className='main-diagram'\n          style={{ left: 40 }}\n        >\n          <svg height={height} width={SVG_WIDTH + 10}>\n            {backgroundSvgContent}\n            {mainSvgContent}\n            {foregroundSvgContent}\n          </svg>\n          <ReactResizeDetector handleWidth onResize={this._onResize} />\n        </div>\n\n        {/* The close button */}\n        <Button\n          className='close-button clear-button-formatting'\n          onClick={this._onCloseButtonClick}\n        >\n          <i className='fa fa-close' />\n        </Button>\n      </div>\n    )\n  }\n}\n\nfunction compressStreetName (name) {\n  return name.split(' ').map(str => {\n    if (str === 'Northwest') return 'NW'\n    if (str === 'Northeast') return 'NE'\n    if (str === 'Southwest') return 'SW'\n    if (str === 'Southeast') return 'SE'\n    if (str === 'North') return 'N'\n    if (str === 'East') return 'E'\n    if (str === 'South') return 'S'\n    if (str === 'West') return 'W'\n    if (str === 'Street') return 'St'\n    if (str === 'Avenue') return 'Ave'\n    if (str === 'Road') return 'Rd'\n    if (str === 'Drive') return 'Dr'\n    if (str === 'Boulevard') return 'Blvd'\n    return str\n  }).join(' ')\n}\n\n// Connect to Redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    elevationPoint: state.otp.ui.elevationPoint\n  }\n}\n\nconst mapDispatchToProps = {\n  setLegDiagram,\n  setElevationPoint\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LegDiagram)\n"]}