{"version":3,"sources":["map.js"],"names":["Map","Component","constructor","state","activeViewIndex","getComponentForView","view","type","render","diagramLeg","mapConfig","props","showDiagram","views","map","i","visibility","length","position","bottom","left","zIndex","padding","setState","text","mapStateToProps","ownProps","otp","ui","config"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,GAAN,SAAkBC,gBAAlB,CAA4B;AAC1BC,EAAAA,WAAW,GAAI;AACb;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,eAAe,EAAE;AADN,KAAb;AAGD;;AAEDC,EAAAA,mBAAmB,CAAEC,IAAF,EAAQ;AACzB;AACA,YAAQA,IAAI,CAACC,IAAb;AACE,WAAK,SAAL;AAAgB,4BAAO,6BAAC,mBAAD,OAAP;;AAChB,WAAK,UAAL;AAAiB,4BAAO,6BAAC,oBAAD,OAAP;AAFnB;AAID;;AAEDC,EAAAA,MAAM,GAAI;AACR,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA;AAAd,QAA4B,KAAKC,KAAvC;AAEA,UAAMC,WAAW,GAAGH,UAApB,CAHQ,CAKR;;AACA,UAAMI,KAAK,GAAGH,SAAS,CAACG,KAAV,IAAmB,CAAC;AAAEN,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAjC;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC;AAAf,OAEGM,KAAK,CAACC,GAAN,CAAU,CAACR,IAAD,EAAOS,CAAP,KAAa;AACtB,0BACE;AAAK,QAAA,GAAG,EAAEA,CAAV;AACE,QAAA,SAAS,EAAC,eADZ;AAEE,QAAA,KAAK,EAAE;AAAEC,UAAAA,UAAU,EAAED,CAAC,KAAK,KAAKZ,KAAL,CAAWC,eAAjB,GAAmC,SAAnC,GAA+C;AAA7D;AAFT,SAIG,KAAKC,mBAAL,CAAyBC,IAAzB,CAJH,CADF;AAQD,KATA,CAFH,EAcGO,KAAK,CAACI,MAAN,GAAe,CAAf,iBACC;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,QAAQ,EAAE,UAAZ;AAAwBC,QAAAA,MAAM,EAAE,MAAMP,WAAW,GAAG,GAAH,GAAS,CAA1B,CAAhC;AAA8DQ,QAAAA,IAAI,EAAE,EAApE;AAAwEC,QAAAA,MAAM,EAAE;AAAhF;AAAZ,oBACE,6BAAC,2BAAD,QACGR,KAAK,CAACC,GAAN,CAAU,CAACR,IAAD,EAAOS,CAAP,KAAa;AACtB,0BACE,6BAAC,sBAAD;AACE,QAAA,GAAG,EAAEA,CADP;AAEE,QAAA,MAAM,EAAC,QAFT;AAGE,QAAA,OAAO,EAAEA,CAAC,KAAK,KAAKZ,KAAL,CAAWC,eAAjB,GAAmC,SAAnC,GAA+C,SAH1D;AAIE,QAAA,KAAK,EAAE;AAAEkB,UAAAA,OAAO,EAAE;AAAX,SAJT;AAKE,QAAA,OAAO,EAAE,MAAM;AAAE,eAAKC,QAAL,CAAc;AAAEnB,YAAAA,eAAe,EAAEW;AAAnB,WAAd;AAAuC;AAL1D,SAOGT,IAAI,CAACkB,IAAL,IAAalB,IAAI,CAACC,IAPrB,CADF;AAWD,KAZA,CADH,CADF,CAfJ,EAmCGK,WAAW,iBAAI,6BAAC,mBAAD;AAAY,MAAA,GAAG,EAAEH;AAAjB,MAnClB,CADF;AAuCD;;AA/DyB,C,CAkE5B;;;AAEA,MAAMgB,eAAe,GAAG,CAACtB,KAAD,EAAQuB,QAAR,KAAqB;AAC3C,SAAO;AACLjB,IAAAA,UAAU,EAAEN,KAAK,CAACwB,GAAN,CAAUC,EAAV,CAAanB,UADpB;AAELC,IAAAA,SAAS,EAAEP,KAAK,CAACwB,GAAN,CAAUE,MAAV,CAAiBf;AAFvB,GAAP;AAID,CALD;;eAOe,yBAAQW,eAAR,EAAyBzB,GAAzB,C","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { ButtonGroup, Button } from 'react-bootstrap'\n\nimport DefaultMap from './default-map'\nimport LegDiagram from './leg-diagram'\nimport StylizedMap from './stylized-map'\n\nclass Map extends Component {\n  constructor () {\n    super()\n    this.state = {\n      activeViewIndex: 0\n    }\n  }\n\n  getComponentForView (view) {\n    // TODO: allow a 'CUSTOM' type\n    switch (view.type) {\n      case 'DEFAULT': return <DefaultMap />\n      case 'STYLIZED': return <StylizedMap />\n    }\n  }\n\n  render () {\n    const { diagramLeg, mapConfig } = this.props\n\n    const showDiagram = diagramLeg\n\n    // Use the views defined in the config; if none defined, just show the default map\n    const views = mapConfig.views || [{ type: 'DEFAULT' }]\n\n    return (\n      <div className='map-container'>\n        {/* The map views -- only one is visible at a time */}\n        {views.map((view, i) => {\n          return (\n            <div key={i}\n              className='map-container'\n              style={{ visibility: i === this.state.activeViewIndex ? 'visible' : 'hidden' }}\n            >\n              {this.getComponentForView(view)}\n            </div>\n          )\n        })}\n\n        {/* The toggle buttons -- only show if multiple views */}\n        {views.length > 1 && (\n          <div style={{ position: 'absolute', bottom: 12 + (showDiagram ? 192 : 0), left: 12, zIndex: 100000 }}>\n            <ButtonGroup>\n              {views.map((view, i) => {\n                return (\n                  <Button\n                    key={i}\n                    bsSize='xsmall'\n                    bsStyle={i === this.state.activeViewIndex ? 'success' : 'default'}\n                    style={{ padding: '3px 6px' }}\n                    onClick={() => { this.setState({ activeViewIndex: i }) }}\n                  >\n                    {view.text || view.type}\n                  </Button>\n                )\n              })}\n            </ButtonGroup>\n          </div>\n        )}\n\n        {/* The leg diagram overlay, if active */}\n        {showDiagram && <LegDiagram leg={diagramLeg} />}\n      </div>\n    )\n  }\n}\n\n// Connect to Redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    diagramLeg: state.otp.ui.diagramLeg,\n    mapConfig: state.otp.config.map\n  }\n}\n\nexport default connect(mapStateToProps)(Map)\n"]}