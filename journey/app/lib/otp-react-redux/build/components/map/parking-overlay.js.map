{"version":3,"sources":["parking-overlay.js"],"names":["parkingIcon","ParkingOverlay","MapLayer","_startRefreshing","_stopRefreshing","props","parkingLocationsQuery","api","_refreshTimer","setInterval","clearInterval","componentDidMount","registerOverlay","componentWillUnmount","componentDidUpdate","prevProps","visible","createLeafletElement","updateLeafletElement","render","locations","length","markerIcon","iconSize","popupAnchor","html","className","bulletIconStyle","color","fontSize","width","map","location","name","lat","lon","free","leaflet","setLocation","PropTypes","string","array","func","mapStateToProps","state","ownProps","otp","overlay","parking","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { FeatureGroup, MapLayer, Marker, Popup, withLeaflet } from 'react-leaflet'\nimport { divIcon } from 'leaflet'\n\nimport SetFromToButtons from './set-from-to'\nimport { setLocation } from '../../actions/map'\nimport { parkingLocationsQuery } from '../../actions/parking'\n\nconst parkingIcon = '<svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 120.09 120.1\"><defs><style>.cls-1{fill:#59ad46;}.cls-2{fill:#fff;}.cls-3{fill:#5c5d5f;}</style></defs><title>zipcar-icon</title><path class=\"cls-1\" d=\"M246.37,396.78a60,60,0,1,1,60,60,60.05,60.05,0,0,1-60-60\" transform=\"translate(-246.37 -336.74)\"/><path class=\"cls-2\" d=\"M363.6,418.66q0.47-1.28.9-2.58H314.16l2.46-3.15h34.87a1.27,1.27,0,1,0,0-2.53H318.6l2.42-3.09h17.74a1.31,1.31,0,0,0,0-2.58H291.69l28.85-37.59H273.06v10.27h25.28l-26.48,34.34-5.45,6.9h21a12,12,0,0,1,22.29,0H363.6\" transform=\"translate(-246.37 -336.74)\"/><path class=\"cls-3\" d=\"M307.84,423.3a9.27,9.27,0,1,1-9.27-9.27,9.27,9.27,0,0,1,9.27,9.27\" transform=\"translate(-246.37 -336.74)\"/></svg>'\n\nclass ParkingOverlay extends MapLayer {\n  static propTypes = {\n    api: PropTypes.string,\n    locations: PropTypes.array,\n    parkingLocationsQuery: PropTypes.func,\n    setLocation: PropTypes.func\n  }\n\n  _startRefreshing () {\n    // ititial station retrieval\n    this.props.parkingLocationsQuery(this.props.api)\n\n    // set up timer to refresh stations periodically\n    this._refreshTimer = setInterval(() => {\n      this.props.parkingLocationsQuery(this.props.api)\n    }, 30000) // defaults to every 30 sec. TODO: make this configurable?*/\n  }\n\n  _stopRefreshing () {\n    if (this._refreshTimer) clearInterval(this._refreshTimer)\n  }\n\n  componentDidMount () {\n    this.props.registerOverlay(this)\n  }\n\n  onOverlayAdded = () => {\n    this._startRefreshing()\n  }\n\n  onOverlayRemoved = () => {\n    this._stopRefreshing()\n  }\n\n  componentWillUnmount () {\n    this._stopRefreshing()\n  }\n\n  componentDidUpdate (prevProps) {\n    if (!prevProps.visible && this.props.visible) {\n      this._startRefreshing()\n    } else if (prevProps.visible && !this.props.visible) {\n      this._stopRefreshing()\n    }\n  }\n\n  createLeafletElement () {}\n\n  updateLeafletElement () {}\n\n  render () {\n    const { locations } = this.props\n    if (!locations || locations.length === 0) return <FeatureGroup />\n\n    const markerIcon = divIcon({\n      iconSize: [24, 24],\n      popupAnchor: [0, -12],\n      html: parkingIcon,\n      className: ''\n    })\n\n    const bulletIconStyle = {\n      color: 'gray',\n      fontSize: 12,\n      width: 15\n    }\n\n    return (\n      <FeatureGroup>\n        {locations.map((location) => {\n          return (\n            <Marker\n              icon={markerIcon}\n              key={location.name}\n              position={[location.lat, location.lon]}\n            >\n              <Popup>\n                <div className='map-overlay-popup'>\n                  {/* Popup title */}\n                  <div className='popup-title'>\n                    Parking\n                  </div>\n\n                  {/* Location info bullet */}\n                  <div className='popup-row'>\n                    <i className='fa fa-map-marker' style={bulletIconStyle} /> {location.name}\n                  </div>\n\n                  {/* Vehicle-count bullet */}\n                  <div className='popup-row'>\n                    <i className='fa fa-car' style={bulletIconStyle} /> {location.free} Vehicles\n                  </div>\n\n                  {/* Set as from/to toolbar */}\n                  <div className='popup-row'>\n                    <SetFromToButtons\n                      map={this.props.leaflet.map}\n                      location={{\n                        lat: location.lat,\n                        lon: location.lon,\n                        name: location.name\n                      }}\n                      setLocation={this.props.setLocation}\n                    />\n                  </div>\n                </div>\n              </Popup>\n            </Marker>\n          )\n        })}\n      </FeatureGroup>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    locations: state.otp.overlay.parking && state.otp.overlay.parking.locations\n  }\n}\n\nconst mapDispatchToProps = {\n  setLocation,\n  parkingLocationsQuery\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withLeaflet(ParkingOverlay))\n"]}