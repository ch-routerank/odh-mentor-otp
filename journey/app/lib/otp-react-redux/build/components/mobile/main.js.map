{"version":3,"sources":["main.js"],"names":["MobileMain","Component","componentDidUpdate","prevProps","uiState","mobileScreen","MobileScreens","WELCOME_SCREEN","props","currentQuery","from","to","currentPosition","coords","setMobileScreen","SEARCH_FORM","activeItinerary","RESULTS_SUMMARY","render","itineraryClass","itineraryFooter","LegIcon","map","ModeIcon","title","mainPanelContent","MainPanelContent","ROUTE_VIEWER","viewedStop","viewedTrip","SET_INITIAL_LOCATION","newScreen","SET_FROM_LOCATION","SET_TO_LOCATION","SET_DATETIME","SET_OPTIONS","PropTypes","object","func","elementType","isRequired","element","mapStateToProps","state","ownProps","otp","ui","location","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport MobileDateTimeScreen from './date-time-screen'\nimport MobileOptionsScreen from './options-screen'\nimport MobileLocationSearch from './location-search'\nimport MobileWelcomeScreen from './welcome-screen'\nimport MobileResultsScreen from './results-screen'\nimport MobileSearchScreen from './search-screen'\nimport MobileStopViewer from './stop-viewer'\nimport MobileTripViewer from './trip-viewer'\nimport MobileRouteViewer from './route-viewer'\n\nimport { MobileScreens, MainPanelContent, setMobileScreen } from '../../actions/ui'\nimport { getActiveItinerary } from '../../util/state'\n\nclass MobileMain extends Component {\n  static propTypes = {\n    currentQuery: PropTypes.object,\n    itineraryClass: PropTypes.func,\n    LegIcon: PropTypes.elementType.isRequired,\n    ModeIcon: PropTypes.elementType.isRequired,\n    map: PropTypes.element,\n    setMobileScreen: PropTypes.func,\n    title: PropTypes.element,\n    uiState: PropTypes.object\n  }\n\n  componentDidUpdate (prevProps) {\n    // Check if we are in the welcome screen and both locations have been set OR\n    // auto-detect is denied and one location is set\n    if (\n      prevProps.uiState.mobileScreen === MobileScreens.WELCOME_SCREEN && (\n        (this.props.currentQuery.from && this.props.currentQuery.to) ||\n        (!this.props.currentPosition.coords && (this.props.currentQuery.from || this.props.currentQuery.to))\n      )\n    ) {\n      // If so, advance to main search screen\n      this.props.setMobileScreen(MobileScreens.SEARCH_FORM)\n    }\n\n    if (!prevProps.activeItinerary && this.props.activeItinerary) {\n      this.props.setMobileScreen(MobileScreens.RESULTS_SUMMARY)\n    }\n  }\n\n  render () {\n    const { itineraryClass, itineraryFooter, LegIcon, map, ModeIcon, title, uiState } = this.props\n\n    // check for route viewer\n    if (uiState.mainPanelContent === MainPanelContent.ROUTE_VIEWER) {\n      return <MobileRouteViewer />\n    }\n\n    // check for viewed stop\n    if (uiState.viewedStop) return <MobileStopViewer />\n\n    // check for viewed trip\n    if (uiState.viewedTrip) return <MobileTripViewer />\n\n    switch (uiState.mobileScreen) {\n      case MobileScreens.WELCOME_SCREEN:\n        return <MobileWelcomeScreen map={map} title={title} />\n\n      case MobileScreens.SET_INITIAL_LOCATION:\n        return (\n          <MobileLocationSearch\n            locationType='to'\n            backScreen={MobileScreens.WELCOME_SCREEN}\n          />\n        )\n\n      case MobileScreens.SEARCH_FORM:\n        return (\n          <MobileSearchScreen\n            map={map}\n            newScreen={this.newScreen}\n          />\n        )\n\n      case MobileScreens.SET_FROM_LOCATION:\n        return (\n          <MobileLocationSearch\n            locationType='from'\n            backScreen={MobileScreens.SEARCH_FORM}\n          />\n        )\n\n      case MobileScreens.SET_TO_LOCATION:\n        return (\n          <MobileLocationSearch\n            locationType='to'\n            backScreen={MobileScreens.SEARCH_FORM}\n          />\n        )\n\n      case MobileScreens.SET_DATETIME:\n        return <MobileDateTimeScreen />\n\n      case MobileScreens.SET_OPTIONS:\n        return <MobileOptionsScreen ModeIcon={ModeIcon} />\n\n      case MobileScreens.RESULTS_SUMMARY:\n        return (\n          <MobileResultsScreen\n            itineraryClass={itineraryClass}\n            itineraryFooter={itineraryFooter}\n            LegIcon={LegIcon}\n            map={map}\n          />\n        )\n      default:\n        return <p>Invalid mobile screen</p>\n    }\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    uiState: state.otp.ui,\n    currentQuery: state.otp.currentQuery,\n    currentPosition: state.otp.location.currentPosition,\n    activeItinerary: getActiveItinerary(state.otp)\n  }\n}\n\nconst mapDispatchToProps = {\n  setMobileScreen\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MobileMain)\n"]}