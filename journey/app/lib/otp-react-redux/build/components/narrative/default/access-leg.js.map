{"version":3,"sources":["access-leg.js"],"names":["AccessLeg","Component","e","active","leg","index","setActiveLeg","props","_onStepClick","step","activeStep","setActiveStep","render","_onLegClick","mode","coreUtils","time","formatDuration","duration","distance","steps","map","stepIndex","stepIsActive","itinerary","getStepInstructions","PropTypes","number","object","func"],"mappings":"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","sourcesContent":["import coreUtils from '../../../otp-ui/core-utils/src'\nimport { humanizeDistanceString } from '../../../otp-ui/humanize-distance'\nimport PropTypes from 'prop-types'\nimport React, {Component} from 'react'\n\nimport Icon from '../icon'\nimport LegDiagramPreview from '../leg-diagram-preview'\n\n/**\n * Default access leg component for narrative itinerary.\n */\nexport default class AccessLeg extends Component {\n  static propTypes = {\n    activeStep: PropTypes.number,\n    leg: PropTypes.object,\n    setActiveLeg: PropTypes.func,\n    setActiveStep: PropTypes.func\n  }\n\n  _onLegClick = (e) => {\n    const {active, leg, index, setActiveLeg} = this.props\n    if (active) {\n      setActiveLeg(null)\n    } else {\n      setActiveLeg(index, leg)\n    }\n  }\n\n  _onStepClick (e, step, index) {\n    if (index === this.props.activeStep) {\n      this.props.setActiveStep(null)\n    } else {\n      this.props.setActiveStep(index, step)\n    }\n  }\n\n  render () {\n    const { active, activeStep, index, leg } = this.props\n    return (\n      <div\n        key={index}\n        className={`leg${active ? ' active' : ''} access-leg`}>\n        <button\n          className='header'\n          onClick={this._onLegClick}>\n          <span><Icon type={`caret-${active ? 'down' : 'right'}`} /></span>\n          <span><b>{leg.mode}</b></span>\n          {' '}\n          <span className='leg-duration'>{coreUtils.time.formatDuration(leg.duration)}</span>\n          {' '}\n          <span className='leg-distance'>({humanizeDistanceString(leg.distance)})</span>\n        </button>\n        {active &&\n          <div className='step-by-step'>\n            <div className='access-leg'>\n              {leg.steps.map((step, stepIndex) => {\n                const stepIsActive = activeStep === stepIndex\n                return (\n                  <button\n                    key={stepIndex}\n                    className={`step ${stepIsActive ? 'active' : ''}`}\n                    onClick={(e) => this._onStepClick(e, step, stepIndex)}>\n                    <span className='step-distance'>{humanizeDistanceString(step.distance)}</span>\n                    <span className='step-text'>{coreUtils.itinerary.getStepInstructions(step)}</span>\n                  </button>\n                )\n              })}\n            </div>\n          </div>\n        }\n        <LegDiagramPreview leg={leg} />\n      </div>\n    )\n  }\n}\n"]}