{"version":3,"sources":["favorite-locations-pane.js"],"names":["fancyAddLocationCss","StyledAddon","InputGroup","Addon","NewLocationAddon","NewLocationFormControl","FormControl","isHome","loc","type","isWork","notHomeOrWork","FavoriteLocationsPane","Component","e","value","target","trim","length","userData","onUserDataChange","props","savedLocations","newLocations","push","address","icon","location","isValueEmpty","nonEmptyLocation","homeLocation","find","workLocation","concat","filter","render","effectiveLocations","map","index","_handleAddressChange","_handleAddNewLocation","PropTypes","func","isRequired","object"],"mappings":"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","sourcesContent":["import clone from 'lodash/cloneDeep'\nimport memoize from 'lodash.memoize'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport {\n  ControlLabel,\n  FormControl,\n  FormGroup,\n  InputGroup\n} from 'react-bootstrap'\nimport FontAwesome from 'react-fontawesome'\nimport styled from 'styled-components'\n\n// Styles.\nconst fancyAddLocationCss = `\n  background-color: #337ab7;\n  color: #fff;\n`\nconst StyledAddon = styled(InputGroup.Addon)`\n  min-width: 40px;\n`\nconst NewLocationAddon = styled(StyledAddon)`\n  ${fancyAddLocationCss}\n`\nconst NewLocationFormControl = styled(FormControl)`\n  ${fancyAddLocationCss}\n  ::placeholder {\n    color: #fff;\n  }\n  &:focus {\n    background-color: unset;\n    color: unset;\n    ::placeholder {\n      color: unset;\n    }\n  }\n`\n\n// Helper filter functions.\nconst isHome = loc => loc.type === 'home'\nconst isWork = loc => loc.type === 'work'\nconst notHomeOrWork = loc => loc.type !== 'home' && loc.type !== 'work'\n\n/**\n * User's saved locations editor.\n */\nclass FavoriteLocationsPane extends Component {\n  static propTypes = {\n    onUserDataChange: PropTypes.func.isRequired,\n    userData: PropTypes.object.isRequired\n  }\n\n  _handleAddNewLocation = e => {\n    const value = e.target.value || ''\n    if (value.trim().length > 0) {\n      const { userData, onUserDataChange } = this.props\n      // FIXME: remove assigning [] when null.\n      const { savedLocations = [] } = userData\n\n      // Create a copy of savedLocations and add the new location to the copied array.\n      const newLocations = clone(savedLocations)\n      newLocations.push({\n        address: value.trim(),\n        icon: 'map-marker',\n        type: 'custom'\n      })\n\n      // Event onChange will trigger after this and before rerender,\n      // so DO empty the input box value so the user can enter their next location.\n      e.target.value = null\n\n      onUserDataChange({ savedLocations: newLocations })\n    }\n  }\n\n  _handleAddressChange = memoize(\n    location => e => {\n      const { userData, onUserDataChange } = this.props\n      // FIXME: remove assigning [] when null.\n      const { savedLocations = [] } = userData\n      const value = e.target.value\n      const isValueEmpty = !value || value === ''\n      const nonEmptyLocation = isValueEmpty ? null : location\n\n      // Update location address, ohterwise it stalls the input box.\n      location.address = value\n\n      // Create a new array for savedLocations.\n      let newLocations = []\n\n      // Add home/work as first entries to the new state only if\n      // - user edited home/work to non-empty, or\n      // - user edited another location and home/work is in savedLocations.\n      const homeLocation = (isHome(location) && nonEmptyLocation) || savedLocations.find(isHome)\n      if (homeLocation) newLocations.push(homeLocation)\n\n      const workLocation = (isWork(location) && nonEmptyLocation) || savedLocations.find(isWork)\n      if (workLocation) newLocations.push(workLocation)\n\n      // Add the rest if it is not home or work\n      // and if the new address of this one is not null or empty.\n      newLocations = newLocations.concat(savedLocations\n        .filter(notHomeOrWork)\n        .filter(loc => loc !== location || !isValueEmpty)\n      )\n\n      onUserDataChange({ savedLocations: newLocations })\n    }\n  )\n\n  render () {\n    const { userData } = this.props\n    // FIXME: remove assigning [] when null.\n    const { savedLocations = [] } = userData\n\n    // Build an 'effective' list of locations for display,\n    // where at least one 'home' and one 'work', are always present even if blank.\n    // In theory there could be multiple home or work locations.\n    // Just pick the first one.\n    const homeLocation = savedLocations.find(isHome) || {\n      address: null,\n      icon: 'home',\n      type: 'home'\n    }\n    const workLocation = savedLocations.find(isWork) || {\n      address: null,\n      icon: 'briefcase',\n      type: 'work'\n    }\n\n    const effectiveLocations = [\n      homeLocation,\n      workLocation,\n      ...savedLocations.filter(notHomeOrWork)\n    ]\n\n    return (\n      <div>\n        <ControlLabel>Add the places you frequent often to save time planning trips:</ControlLabel>\n\n        {effectiveLocations.map((loc, index) => (\n          <FormGroup key={index}>\n            <InputGroup>\n              <StyledAddon title={loc.type}>\n                <FontAwesome name={loc.icon} />\n              </StyledAddon>\n              <FormControl\n                onChange={this._handleAddressChange(loc)}\n                placeholder={`Add ${loc.type}`}\n                type='text'\n                value={loc.address} />\n            </InputGroup>\n          </FormGroup>\n        ))}\n\n        {/* For adding a location. */}\n        <FormGroup>\n          <InputGroup>\n            <NewLocationAddon>\n              <FontAwesome name='plus' />\n            </NewLocationAddon>\n            <NewLocationFormControl\n              onBlur={this._handleAddNewLocation}\n              placeholder='Add another place'\n              type='text'\n            />\n          </InputGroup>\n        </FormGroup>\n      </div>\n    )\n  }\n}\n\nexport default FavoriteLocationsPane\n"]}