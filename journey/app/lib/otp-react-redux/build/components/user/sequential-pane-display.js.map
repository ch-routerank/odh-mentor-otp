{"version":3,"sources":["sequential-pane-display.js"],"names":["PaneContainer","styled","div","SequentialPaneDisplay","Component","constructor","props","onComplete","paneSequence","activePaneId","state","nextId","setState","prevId","initialPaneId","render","activePane","disableNext","pane","Pane","title","onClick","_handleToPrevPane","text","disabled","_handleToNextPane","PropTypes","string","isRequired","func","object"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;;AAEA;AACA;AACA,MAAMA,aAAa,GAAGC,0BAAOC,GAAI;AACjC;AACA,CAFA;AAIA;AACA;AACA;;AACA,MAAMC,qBAAN,SAAoCC,gBAApC,CAA8C;AAO5CC,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAClB,UAAMA,KAAN;;AADkB,+CAQA,MAAM;AACxB,YAAM;AAAEC,QAAAA,UAAF;AAAcC,QAAAA;AAAd,UAA+B,KAAKF,KAA1C;AACA,YAAM;AAAEG,QAAAA;AAAF,UAAmB,KAAKC,KAA9B;AACA,YAAMC,MAAM,GAAGH,YAAY,CAACC,YAAD,CAAZ,CAA2BE,MAA1C;;AAEA,UAAIA,MAAJ,EAAY;AACV,aAAKC,QAAL,CAAc;AACZH,UAAAA,YAAY,EAAEE;AADF,SAAd;AAGD,OAJD,MAIO,IAAIJ,UAAJ,EAAgB;AACrBA,QAAAA,UAAU;AACX;AACF,KApBmB;;AAAA,+CAsBA,MAAM;AACxB,YAAM;AAAEC,QAAAA;AAAF,UAAmB,KAAKF,KAA9B;AACA,YAAM;AAAEG,QAAAA;AAAF,UAAmB,KAAKC,KAA9B;AACA,WAAKE,QAAL,CAAc;AACZH,QAAAA,YAAY,EAAED,YAAY,CAACC,YAAD,CAAZ,CAA2BI;AAD7B,OAAd;AAGD,KA5BmB;;AAGlB,SAAKH,KAAL,GAAa;AACXD,MAAAA,YAAY,EAAEH,KAAK,CAACQ;AADT,KAAb;AAGD;;AAwBDC,EAAAA,MAAM,GAAI;AACR,UAAM;AAAEP,MAAAA;AAAF,QAAmB,KAAKF,KAA9B;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAmB,KAAKC,KAA9B;AACA,UAAMM,UAAU,GAAGR,YAAY,CAACC,YAAD,CAA/B;AACA,UAAM;AAAEQ,MAAAA,WAAF;AAAeN,MAAAA,MAAf;AAAuBO,MAAAA,IAAI,EAAEC,IAA7B;AAAmCN,MAAAA,MAAnC;AAA2CP,MAAAA,KAA3C;AAAkDc,MAAAA;AAAlD,QAA4DJ,UAAlE;AAEA,wBACE,yEACE,yCAAKI,KAAL,CADF,eAEE,6BAAC,aAAD,qBACE,6BAAC,IAAD,EAAUd,KAAV,CADF,CAFF,eAME,6BAAC,8BAAD;AACE,MAAA,UAAU,EAAEO,MAAM,IAAI;AACpBQ,QAAAA,OAAO,EAAE,KAAKC,iBADM;AAEpBC,QAAAA,IAAI,EAAE;AAFc,OADxB;AAKE,MAAA,UAAU,EAAE;AACVC,QAAAA,QAAQ,EAAEP,WADA;AAEVI,QAAAA,OAAO,EAAE,KAAKI,iBAFJ;AAGVF,QAAAA,IAAI,EAAEZ,MAAM,GAAG,MAAH,GAAY;AAHd;AALd,MANF,CADF;AAoBD;;AA/D2C;;gBAAxCR,qB,eACe;AACjBW,EAAAA,aAAa,EAAEY,mBAAUC,MAAV,CAAiBC,UADf;AAEjBrB,EAAAA,UAAU,EAAEmB,mBAAUG,IAAV,CAAeD,UAFV;AAGjBpB,EAAAA,YAAY,EAAEkB,mBAAUI,MAAV,CAAiBF;AAHd,C;;eAiENzB,qB","sourcesContent":["import PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport styled from 'styled-components'\n\nimport FormNavigationButtons from './form-navigation-buttons'\n\n// Styles.\n// TODO: Improve layout.\nconst PaneContainer = styled.div`\n  min-height: 20em;\n`\n\n/**\n * This component handles the flow between screens for new OTP user accounts.\n */\nclass SequentialPaneDisplay extends Component {\n  static propTypes = {\n    initialPaneId: PropTypes.string.isRequired,\n    onComplete: PropTypes.func.isRequired,\n    paneSequence: PropTypes.object.isRequired\n  }\n\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      activePaneId: props.initialPaneId\n    }\n  }\n\n  _handleToNextPane = () => {\n    const { onComplete, paneSequence } = this.props\n    const { activePaneId } = this.state\n    const nextId = paneSequence[activePaneId].nextId\n\n    if (nextId) {\n      this.setState({\n        activePaneId: nextId\n      })\n    } else if (onComplete) {\n      onComplete()\n    }\n  }\n\n  _handleToPrevPane = () => {\n    const { paneSequence } = this.props\n    const { activePaneId } = this.state\n    this.setState({\n      activePaneId: paneSequence[activePaneId].prevId\n    })\n  }\n\n  render () {\n    const { paneSequence } = this.props\n    const { activePaneId } = this.state\n    const activePane = paneSequence[activePaneId]\n    const { disableNext, nextId, pane: Pane, prevId, props, title } = activePane\n\n    return (\n      <>\n        <h1>{title}</h1>\n        <PaneContainer>\n          <Pane {...props} />\n        </PaneContainer>\n\n        <FormNavigationButtons\n          backButton={prevId && {\n            onClick: this._handleToPrevPane,\n            text: 'Back'\n          }}\n          okayButton={{\n            disabled: disableNext,\n            onClick: this._handleToNextPane,\n            text: nextId ? 'Next' : 'Finish'\n          }}\n        />\n      </>\n    )\n  }\n}\n\nexport default SequentialPaneDisplay\n"]}