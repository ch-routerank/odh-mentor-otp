{"version":3,"sources":["abstract-geocoder.js"],"names":["Geocoder","constructor","geocoderApi","geocoderConfig","api","autocomplete","query","getAutocompleteQuery","then","rewriteAutocompleteResponse","getLocationFromGeocodedFeature","feature","location","lonlat","fromCoordinates","geometry","coordinates","name","properties","label","rawGeocodedFeature","Promise","resolve","reverse","getReverseQuery","rewriteReverseResponse","search","getSearchQuery","rewriteSearchResponse","apiKey","baseUrl","boundary","focusPoint","options","url","undefined","format","response"],"mappings":"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","sourcesContent":["import lonlat from \"@conveyal/lonlat\";\n\n/**\n * Create customized geocoder functions given a certain geocoding API, the\n * config for the geocoder and response rewrite functions specific to this\n * application. Any geocoder api that is added is expected to have an API that\n * behaves very closely to https://github.com/conveyal/isomorphic-mapzen-search\n */\nexport default class Geocoder {\n  constructor(geocoderApi, geocoderConfig) {\n    this.api = geocoderApi;\n    this.geocoderConfig = geocoderConfig;\n  }\n\n  /**\n   * Perform an autocomplete query. Eg, using partial text of a possible\n   * address or POI, attempt to find possible matches.\n   */\n  autocomplete(query) {\n    return this.api\n      .autocomplete(this.getAutocompleteQuery(query))\n      .then(this.rewriteAutocompleteResponse);\n  }\n\n  /**\n   * Get an application-specific data structure from a given feature. The\n   * feature is either the result of an autocomplete or a search query. This\n   * function returns a Promise because sometimes an asynchronous action\n   * needs to be taken to translate a feature into a location. For example,\n   * the ArcGIS autocomplete service returns results that lack full address\n   * data and GPS and it is expected that an extra call to the `search` API is\n   * done to obtain that detailed data.\n   */\n  getLocationFromGeocodedFeature(feature) {\n    const location = lonlat.fromCoordinates(feature.geometry.coordinates);\n    location.name = feature.properties.label;\n    location.rawGeocodedFeature = feature;\n    return Promise.resolve(location);\n  }\n\n  /**\n   * Do a reverse-geocode. ie get address information and attributes given a\n   * GPS coordiante.\n   */\n  reverse(query) {\n    return this.api\n      .reverse(this.getReverseQuery(query))\n      .then(this.rewriteReverseResponse);\n  }\n\n  /**\n   * Perform a search query. A search query is different from autocomplete in\n   * that it is assumed that the text provided is more or less a complete\n   * well-fromatted address.\n   */\n  search(query) {\n    return this.api\n      .search(this.getSearchQuery(query))\n      .then(this.rewriteSearchResponse);\n  }\n\n  /**\n   * Default autocomplete query generator\n   */\n  getAutocompleteQuery(query) {\n    const {\n      apiKey,\n      baseUrl,\n      boundary,\n      focusPoint,\n      options\n    } = this.geocoderConfig;\n    return {\n      apiKey,\n      boundary,\n      focusPoint,\n      options,\n      url: baseUrl ? `${baseUrl}/autocomplete` : undefined,\n      ...query\n    };\n  }\n\n  /**\n   * Default reverse query generator\n   */\n  getReverseQuery(query) {\n    const { apiKey, baseUrl, options } = this.geocoderConfig;\n    return {\n      apiKey,\n      format: true,\n      options,\n      url: baseUrl ? `${baseUrl}/reverse` : undefined,\n      ...query\n    };\n  }\n\n  /**\n   * Default search query generator.\n   */\n  getSearchQuery(query) {\n    const {\n      apiKey,\n      baseUrl,\n      boundary,\n      focusPoint,\n      options\n    } = this.geocoderConfig;\n    return {\n      apiKey,\n      boundary,\n      focusPoint,\n      options,\n      url: baseUrl ? `${baseUrl}/search` : undefined,\n      format: false, // keep as returned GeoJSON,\n      ...query\n    };\n  }\n\n  /**\n   * Default rewriter for autocomplete responses\n   */\n  rewriteAutocompleteResponse(response) {\n    return response;\n  }\n\n  /**\n   * Default rewriter for reverse responses\n   */\n  rewriteReverseResponse(response) {\n    return response;\n  }\n\n  /**\n   * Default rewriter for search responses\n   */\n  rewriteSearchResponse(response) {\n    return response;\n  }\n}\n"]}