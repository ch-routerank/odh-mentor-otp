{"version":3,"sources":["noapi.js"],"names":["NoApiGeocoder","Geocoder","autocomplete","query","parseCoordinateString","text","reverse","lat","lon","point","roundGPSDecimal","feature","name","Promise","resolve","rawGeocodedFeature","search","string","geometry","coordinates","lonlat","toCoordinates","fromLatFirstString","type","properties","label","e","features","number","roundFactor","Math","round"],"mappings":";;;;;;;AAAA;;AAEA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMA,aAAN,SAA4BC,yBAA5B,CAAqC;AAClD;AACF;AACA;AACEC,EAAAA,YAAY,CAACC,KAAD,EAAQ;AAClB,WAAO,KAAKC,qBAAL,CAA2BD,KAAK,CAACE,IAAjC,CAAP;AACD;AAED;AACF;AACA;;;AACEC,EAAAA,OAAO,CAACH,KAAD,EAAQ;AACb,QAAI;AAAEI,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAeL,KAAK,CAACM,KAAzB;AACAF,IAAAA,GAAG,GAAG,KAAKG,eAAL,CAAqBH,GAArB,CAAN;AACAC,IAAAA,GAAG,GAAG,KAAKE,eAAL,CAAqBF,GAArB,CAAN;AACA,UAAMG,OAAO,GAAG;AAAEJ,MAAAA,GAAF;AAAOC,MAAAA,GAAP;AAAYI,MAAAA,IAAI,EAAG,GAAEL,GAAI,KAAIC,GAAI;AAAjC,KAAhB;AACA,WAAOK,OAAO,CAACC,OAAR,CAAgB,EACrB,GAAGH,OADkB;AAErBI,MAAAA,kBAAkB,EAAEJ;AAFC,KAAhB,CAAP;AAID;AAED;AACF;AACA;;;AACEK,EAAAA,MAAM,CAACb,KAAD,EAAQ;AACZ,WAAO,KAAKC,qBAAL,CAA2BD,KAAK,CAACE,IAAjC,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACED,EAAAA,qBAAqB,CAACa,MAAD,EAAS;AAC5B,QAAIN,OAAJ;;AACA,QAAI;AACFA,MAAAA,OAAO,GAAG;AACRO,QAAAA,QAAQ,EAAE;AACRC,UAAAA,WAAW,EAAEC,gBAAOC,aAAP,CAAqBD,gBAAOE,kBAAP,CAA0BL,MAA1B,CAArB,CADL;AAERM,UAAAA,IAAI,EAAE;AAFE,SADF;AAKRC,QAAAA,UAAU,EAAE;AACVC,UAAAA,KAAK,EAAER;AADG;AALJ,OAAV;AASD,KAVD,CAUE,OAAOS,CAAP,EAAU;AACV,aAAOb,OAAO,CAACC,OAAR,CAAgB;AAAEa,QAAAA,QAAQ,EAAE;AAAZ,OAAhB,CAAP;AACD;;AACD,WAAOd,OAAO,CAACC,OAAR,CAAgB;AAAEa,MAAAA,QAAQ,EAAE,CAAChB,OAAD;AAAZ,KAAhB,CAAP;AACD;;AAEDD,EAAAA,eAAe,CAACkB,MAAD,EAAS;AACtB,UAAMC,WAAW,GAAG,MAApB;AACA,WAAOC,IAAI,CAACC,KAAL,CAAWH,MAAM,GAAGC,WAApB,IAAmCA,WAA1C;AACD;;AAtDiD","sourcesContent":["import lonlat from \"@conveyal/lonlat\";\n\nimport Geocoder from \"./abstract-geocoder\";\n\n/**\n * An implementation that doesn't use an API for geocoding. Merely allows\n * clicking on the map and finding GPS coordinates by typing them in.\n *\n * @extends Geocoder\n */\nexport default class NoApiGeocoder extends Geocoder {\n  /**\n   * Use coordinate string parser.\n   */\n  autocomplete(query) {\n    return this.parseCoordinateString(query.text);\n  }\n\n  /**\n   * Always return the lat/lon.\n   */\n  reverse(query) {\n    let { lat, lon } = query.point;\n    lat = this.roundGPSDecimal(lat);\n    lon = this.roundGPSDecimal(lon);\n    const feature = { lat, lon, name: `${lat}, ${lon}` };\n    return Promise.resolve({\n      ...feature,\n      rawGeocodedFeature: feature\n    });\n  }\n\n  /**\n   * Use coordinate string parser.\n   */\n  search(query) {\n    return this.parseCoordinateString(query.text);\n  }\n\n  /**\n   * Attempt to parse the input as a GPS coordinate. If parseable, return a\n   * feature.\n   */\n  parseCoordinateString(string) {\n    let feature;\n    try {\n      feature = {\n        geometry: {\n          coordinates: lonlat.toCoordinates(lonlat.fromLatFirstString(string)),\n          type: \"Point\"\n        },\n        properties: {\n          label: string\n        }\n      };\n    } catch (e) {\n      return Promise.resolve({ features: [] });\n    }\n    return Promise.resolve({ features: [feature] });\n  }\n\n  roundGPSDecimal(number) {\n    const roundFactor = 100000;\n    return Math.round(number * roundFactor) / roundFactor;\n  }\n}\n"]}