{"version":3,"sources":["index.js"],"names":["StopViewerOverlay","MapLayer","componentDidMount","componentWillUnmount","componentDidUpdate","prevProps","nextStop","props","stop","oldStopId","id","hasNewStopId","leaflet","map","setView","lat","lon","createLeafletElement","updateLeafletElement","render","StopMarker","stopLayerStopType","PropTypes","elementType","isRequired","defaultProps"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA,MAAMA,iBAAN,SAAgCC,sBAAhC,CAAyC;AACvCC,EAAAA,iBAAiB,GAAG,CAAE,CADiB,CAGvC;;;AACAC,EAAAA,oBAAoB,GAAG,CAAE;AAEzB;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,UAAMC,QAAQ,GAAG,KAAKC,KAAL,CAAWC,IAA5B;AACA,UAAMC,SAAS,GAAGJ,SAAS,CAACG,IAAV,IAAkBH,SAAS,CAACG,IAAV,CAAeE,EAAnD;AACA,UAAMC,YAAY,GAAGL,QAAQ,IAAIA,QAAQ,CAACI,EAAT,KAAgBD,SAAjD;AACA,QAAIE,YAAJ,EACE,KAAKJ,KAAL,CAAWK,OAAX,CAAmBC,GAAnB,CAAuBC,OAAvB,CAA+B,CAACR,QAAQ,CAACS,GAAV,EAAeT,QAAQ,CAACU,GAAxB,CAA/B;AACH;;AAEDC,EAAAA,oBAAoB,GAAG,CAAE;;AAEzBC,EAAAA,oBAAoB,GAAG,CAAE;;AAEzBC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEX,MAAAA,IAAF;AAAQY,MAAAA;AAAR,QAAuB,KAAKb,KAAlC;AAEA,QAAI,CAACC,IAAL,EAAW,oBAAO,6BAAC,0BAAD,OAAP;AAEX,wBACE,6BAAC,0BAAD,qBACE,6BAAC,UAAD;AAAY,MAAA,IAAI,EAAEA;AAAlB,MADF,CADF;AAKD;;AAjCsC;;AAoCzCR,iBAAiB,CAACO,KAAlB,GAA0B;AACxB;AACF;AACA;AACEC,EAAAA,IAAI,EAAEa,wBAJkB;AAKxBD,EAAAA,UAAU,EAAEE,mBAAUC,WAAV,CAAsBC;AALV,CAA1B;AAQAxB,iBAAiB,CAACyB,YAAlB,GAAiC;AAC/BjB,EAAAA,IAAI,EAAE;AADyB,CAAjC;;eAIe,+BAAYR,iBAAZ,C","sourcesContent":["import { stopLayerStopType } from \"../../core-utils/src/types\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { FeatureGroup, MapLayer, withLeaflet } from \"react-leaflet\";\n\n/**\n * This overlay is intended to highlight a specific stop on a map typically in\n * conjunction with some kind of stop viewer.\n */\nclass StopViewerOverlay extends MapLayer {\n  componentDidMount() {}\n\n  // TODO: determine why the default MapLayer componentWillUnmount() method throws an error\n  componentWillUnmount() {}\n\n  /**\n   * Only reset map view if a new stop is selected. This prevents resetting the\n   * bounds if, for example, the arrival times have changed for the same stop\n   * in the viewer.\n   */\n  componentDidUpdate(prevProps) {\n    const nextStop = this.props.stop;\n    const oldStopId = prevProps.stop && prevProps.stop.id;\n    const hasNewStopId = nextStop && nextStop.id !== oldStopId;\n    if (hasNewStopId)\n      this.props.leaflet.map.setView([nextStop.lat, nextStop.lon]);\n  }\n\n  createLeafletElement() {}\n\n  updateLeafletElement() {}\n\n  render() {\n    const { stop, StopMarker } = this.props;\n\n    if (!stop) return <FeatureGroup />;\n\n    return (\n      <FeatureGroup>\n        <StopMarker stop={stop} />\n      </FeatureGroup>\n    );\n  }\n}\n\nStopViewerOverlay.props = {\n  /**\n   * An object representing a transit stop\n   */\n  stop: stopLayerStopType,\n  StopMarker: PropTypes.elementType.isRequired\n};\n\nStopViewerOverlay.defaultProps = {\n  stop: null\n};\n\nexport default withLeaflet(StopViewerOverlay);\n"]}