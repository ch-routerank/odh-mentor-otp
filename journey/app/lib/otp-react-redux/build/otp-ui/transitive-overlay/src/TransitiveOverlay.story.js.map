{"version":3,"sources":["TransitiveOverlay.story.js"],"names":["bikeOnlyItinerary","require","bikeRentalItinerary","bikeRentalTransitBikeRentalItinerary","bikeTransitBikeItinerary","eScooterRentalItinerary","eScooterRentalTransiteScooterRentalItinerary","parkAndRideItinerary","tncTransitTncItinerary","walkInterlinedTransitItinerary","walkOnlyItinerary","walkTransitWalkItinerary","walkTransitWalkItineraryNoIntermediateStops","walkTransitWalkTransitWalkItinerary","companies","id","label","modes","setLocation","getFromLocation","itinerary","legs","from","getToLocation","length","to","module","addDecorator","withA11y","withInfo","add"],"mappings":"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","sourcesContent":["import BaseMap from \"../../base-map/src\";\nimport { itineraryToTransitive } from \"../../core-utils/src/map\";\nimport EndpointsOverlay from \"../../endpoints-overlay\";\nimport React from \"react\";\nimport { action } from \"@storybook/addon-actions\";\nimport { withA11y } from \"@storybook/addon-a11y\";\nimport { withInfo } from \"@storybook/addon-info\";\nimport { storiesOf } from \"@storybook/react\";\n\nimport TransitiveOverlay from \".\";\n\nimport \"../../../node_modules/leaflet/dist/leaflet.css\";\n\n// import mock itinaries. These are all trip plan outputs from OTP.\nconst bikeOnlyItinerary = require(\"../../itinerary-body/src/__mocks__/itineraries/bike-only.json\");\nconst bikeRentalItinerary = require(\"../../itinerary-body/src/__mocks__/itineraries/bike-rental.json\");\nconst bikeRentalTransitBikeRentalItinerary = require(\"../../itinerary-body/src/__mocks__/itineraries/bike-rental-transit-bike-rental.json\");\nconst bikeTransitBikeItinerary = require(\"../../itinerary-body/src/__mocks__/itineraries/bike-transit-bike.json\");\nconst eScooterRentalItinerary = require(\"../../itinerary-body/src/__mocks__/itineraries/e-scooter-rental.json\");\nconst eScooterRentalTransiteScooterRentalItinerary = require(\"../../itinerary-body/src/__mocks__/itineraries/e-scooter-transit-e-scooter.json\");\nconst parkAndRideItinerary = require(\"../../itinerary-body/src/__mocks__/itineraries/park-and-ride.json\");\nconst tncTransitTncItinerary = require(\"../../itinerary-body/src/__mocks__/itineraries/tnc-transit-tnc.json\");\nconst walkInterlinedTransitItinerary = require(\"../../itinerary-body/src/__mocks__/itineraries/walk-interlined-transit-walk.json\");\nconst walkOnlyItinerary = require(\"../../itinerary-body/src/__mocks__/itineraries/walk-only.json\");\nconst walkTransitWalkItinerary = require(\"../../itinerary-body/src/__mocks__/itineraries/walk-transit-walk.json\");\nconst walkTransitWalkItineraryNoIntermediateStops = require(\"../../itinerary-body/src/__mocks__/itineraries/walk-transit-walk-no-intermediate-stops.json\");\nconst walkTransitWalkTransitWalkItinerary = require(\"../../itinerary-body/src/__mocks__/itineraries/walk-transit-walk-transit-walk.json\");\n\nconst companies = [\n  {\n    id: \"RAZOR\",\n    label: \"Razor\",\n    modes: \"MICROMOBILITY_RENT\"\n  },\n  {\n    id: \"SHARED\",\n    label: \"Shared\",\n    modes: \"MICROMOBILITY_RENT\"\n  }\n];\n\nconst setLocation = action(\"setLocation\");\n\nfunction getFromLocation(itinerary) {\n  return itinerary.legs[0].from;\n}\n\nfunction getToLocation(itinerary) {\n  return itinerary.legs[itinerary.legs.length - 1].to;\n}\n\nstoriesOf(\"TransitiveOverlay\", module)\n  .addDecorator(withA11y)\n  .addDecorator(withInfo)\n  .add(\"TransitiveOverlay with walking itinerary\", () => (\n    <BaseMap center={[45.518841, -122.679302]} zoom={19}>\n      <EndpointsOverlay\n        fromLocation={getFromLocation(walkOnlyItinerary)}\n        setLocation={setLocation}\n        toLocation={getToLocation(walkOnlyItinerary)}\n        visible\n      />\n      <TransitiveOverlay\n        transitiveData={itineraryToTransitive(walkOnlyItinerary, companies)}\n        visible\n      />\n    </BaseMap>\n  ))\n  .add(\"TransitiveOverlay with bike-only itinerary\", () => (\n    <BaseMap center={[45.520441, -122.68302]} zoom={16}>\n      <EndpointsOverlay\n        fromLocation={getFromLocation(bikeOnlyItinerary)}\n        setLocation={setLocation}\n        toLocation={getToLocation(bikeOnlyItinerary)}\n        visible\n      />\n      <TransitiveOverlay\n        transitiveData={itineraryToTransitive(bikeOnlyItinerary, companies)}\n        visible\n      />\n    </BaseMap>\n  ))\n  .add(\"TransitiveOverlay with walk-transit-walk itinerary\", () => (\n    <BaseMap center={[45.520441, -122.68302]} zoom={16}>\n      <EndpointsOverlay\n        fromLocation={getFromLocation(walkTransitWalkItinerary)}\n        setLocation={setLocation}\n        toLocation={getToLocation(walkTransitWalkItinerary)}\n        visible\n      />\n      <TransitiveOverlay\n        transitiveData={itineraryToTransitive(\n          walkTransitWalkItinerary,\n          companies\n        )}\n        visible\n      />\n    </BaseMap>\n  ))\n  .add(\n    \"TransitiveOverlay with walk-transit-walk itinerary with no intermediate stops\",\n    () => (\n      <BaseMap center={[45.525841, -122.649302]} zoom={13}>\n        <EndpointsOverlay\n          fromLocation={getFromLocation(\n            walkTransitWalkItineraryNoIntermediateStops\n          )}\n          setLocation={setLocation}\n          toLocation={getToLocation(\n            walkTransitWalkItineraryNoIntermediateStops\n          )}\n          visible\n        />\n        <TransitiveOverlay\n          transitiveData={itineraryToTransitive(\n            walkTransitWalkItineraryNoIntermediateStops,\n            companies\n          )}\n          visible\n        />\n      </BaseMap>\n    )\n  )\n  .add(\"TransitiveOverlay with bike-transit-bike itinerary\", () => (\n    <BaseMap center={[45.520441, -122.68302]} zoom={16}>\n      <EndpointsOverlay\n        fromLocation={getFromLocation(bikeTransitBikeItinerary)}\n        setLocation={setLocation}\n        toLocation={getToLocation(bikeTransitBikeItinerary)}\n        visible\n      />\n      <TransitiveOverlay\n        transitiveData={itineraryToTransitive(\n          bikeTransitBikeItinerary,\n          companies\n        )}\n        visible\n      />\n    </BaseMap>\n  ))\n  .add(\"TransitiveOverlay with walk-interlined-transit itinerary\", () => (\n    <BaseMap center={[45.511841, -122.679302]} zoom={14}>\n      <EndpointsOverlay\n        fromLocation={getFromLocation(walkInterlinedTransitItinerary)}\n        setLocation={setLocation}\n        toLocation={getToLocation(walkInterlinedTransitItinerary)}\n        visible\n      />\n      <TransitiveOverlay\n        transitiveData={itineraryToTransitive(\n          walkInterlinedTransitItinerary,\n          companies\n        )}\n        visible\n      />\n    </BaseMap>\n  ))\n  .add(\"TransitiveOverlay with walk-transit-transfer itinerary\", () => (\n    <BaseMap center={[45.505841, -122.631302]} zoom={14}>\n      <EndpointsOverlay\n        fromLocation={getFromLocation(walkTransitWalkTransitWalkItinerary)}\n        setLocation={setLocation}\n        toLocation={getToLocation(walkTransitWalkTransitWalkItinerary)}\n        visible\n      />\n      <TransitiveOverlay\n        transitiveData={itineraryToTransitive(\n          walkTransitWalkTransitWalkItinerary,\n          companies\n        )}\n        visible\n      />\n    </BaseMap>\n  ))\n  .add(\"TransitiveOverlay with bike-rental itinerary\", () => (\n    <BaseMap center={[45.508841, -122.631302]} zoom={14}>\n      <EndpointsOverlay\n        fromLocation={getFromLocation(bikeRentalItinerary)}\n        setLocation={setLocation}\n        toLocation={getToLocation(bikeRentalItinerary)}\n        visible\n      />\n      <TransitiveOverlay\n        transitiveData={itineraryToTransitive(bikeRentalItinerary, companies)}\n        visible\n      />\n    </BaseMap>\n  ))\n  .add(\"TransitiveOverlay with E-scooter-rental itinerary\", () => (\n    <BaseMap center={[45.52041, -122.675302]} zoom={16}>\n      <EndpointsOverlay\n        fromLocation={getFromLocation(eScooterRentalItinerary)}\n        setLocation={setLocation}\n        toLocation={getToLocation(eScooterRentalItinerary)}\n        visible\n      />\n      <TransitiveOverlay\n        transitiveData={itineraryToTransitive(\n          eScooterRentalItinerary,\n          companies\n        )}\n        visible\n      />\n    </BaseMap>\n  ))\n  .add(\"TransitiveOverlay with park and ride itinerary\", () => (\n    <BaseMap center={[45.515841, -122.75302]} zoom={13}>\n      <EndpointsOverlay\n        fromLocation={getFromLocation(parkAndRideItinerary)}\n        setLocation={setLocation}\n        toLocation={getToLocation(parkAndRideItinerary)}\n        visible\n      />\n      <TransitiveOverlay\n        transitiveData={itineraryToTransitive(parkAndRideItinerary, companies)}\n        visible\n      />\n    </BaseMap>\n  ))\n  .add(\"TransitiveOverlay with bike rental + transit itinerary\", () => (\n    <BaseMap center={[45.538841, -122.6302]} zoom={12}>\n      <EndpointsOverlay\n        fromLocation={getFromLocation(bikeRentalTransitBikeRentalItinerary)}\n        setLocation={setLocation}\n        toLocation={getToLocation(bikeRentalTransitBikeRentalItinerary)}\n        visible\n      />\n      <TransitiveOverlay\n        transitiveData={itineraryToTransitive(\n          bikeRentalTransitBikeRentalItinerary,\n          companies\n        )}\n        visible\n      />\n    </BaseMap>\n  ))\n  .add(\"TransitiveOverlay with E-scooter rental + transit itinerary\", () => (\n    <BaseMap center={[45.538841, -122.6302]} zoom={12}>\n      <EndpointsOverlay\n        fromLocation={getFromLocation(\n          eScooterRentalTransiteScooterRentalItinerary\n        )}\n        setLocation={setLocation}\n        toLocation={getToLocation(eScooterRentalTransiteScooterRentalItinerary)}\n        visible\n      />\n      <TransitiveOverlay\n        transitiveData={itineraryToTransitive(\n          eScooterRentalTransiteScooterRentalItinerary,\n          companies\n        )}\n        visible\n      />\n    </BaseMap>\n  ))\n  .add(\"TransitiveOverlay with TNC + transit itinerary\", () => (\n    <BaseMap center={[45.538841, -122.6302]} zoom={12}>\n      <EndpointsOverlay\n        fromLocation={getFromLocation(tncTransitTncItinerary)}\n        setLocation={setLocation}\n        toLocation={getToLocation(tncTransitTncItinerary)}\n        visible\n      />\n      <TransitiveOverlay\n        transitiveData={itineraryToTransitive(\n          tncTransitTncItinerary,\n          companies\n        )}\n        visible\n      />\n    </BaseMap>\n  ));\n"]}