{"version":3,"sources":["index.js"],"names":["DropdownSelector","Component","evt","val","target","value","name","onChange","props","floatVal","parseFloat","Number","isNaN","render","className","label","options","style","id","handleChange","map","o","i","text","propTypes","PropTypes","string","oneOfType","number","arrayOf","shape","func","defaultProps"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;;;;;;;;;AAEA;AACA;AACA;AACA,MAAMA,gBAAN,SAA+BC,gBAA/B,CAAyC;AAAA;AAAA;;AAAA,0CACxBC,GAAG,IAAI;AACpB,YAAMC,GAAG,GAAGD,GAAG,CAACE,MAAJ,CAAWC,KAAvB;AACA,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAqB,KAAKC,KAAhC;;AAEA,UAAI,OAAOD,QAAP,KAAoB,UAAxB,EAAoC;AAClC,cAAME,QAAQ,GAAGC,UAAU,CAACP,GAAD,CAA3B;AACAI,QAAAA,QAAQ,CAAC;AACP,WAACD,IAAD,GAAQK,MAAM,CAACC,KAAP,CAAaH,QAAb,IAAyBN,GAAzB,GAA+BM;AADhC,SAAD,CAAR;AAGD;AACF,KAXsC;AAAA;;AAavCI,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,KAAb;AAAoBT,MAAAA,IAApB;AAA0BU,MAAAA,OAA1B;AAAmCC,MAAAA,KAAnC;AAA0CZ,MAAAA;AAA1C,QAAoD,KAAKG,KAA/D;AACA,UAAMU,EAAE,GAAI,kBAAiBZ,IAAK,EAAlC;AAEA,wBACE,6BAAC,MAAD,CAAQ,gBAAR;AAAyB,MAAA,SAAS,EAAEQ,SAApC;AAA+C,MAAA,KAAK,EAAEG;AAAtD,oBACE,uDACE,6BAAC,MAAD,CAAQ,YAAR;AAAqB,MAAA,OAAO,EAAEC;AAA9B,OAAmCH,KAAnC,CADF,CADF,eAKE,uDACE;AAAQ,MAAA,EAAE,EAAEG,EAAZ;AAAgB,MAAA,KAAK,EAAEb,KAAvB;AAA8B,MAAA,QAAQ,EAAE,KAAKc;AAA7C,OACGH,OAAO,IACNA,OAAO,CAACI,GAAR,CAAY,CAACC,CAAD,EAAIC,CAAJ,kBACV;AAAQ,MAAA,GAAG,EAAEA,CAAb;AAAgB,MAAA,KAAK,EAAED,CAAC,CAAChB;AAAzB,OACGgB,CAAC,CAACE,IADL,CADF,CAFJ,CADF,CALF,CADF;AAkBD;;AAnCsC;;AAsCzCvB,gBAAgB,CAACwB,SAAjB,GAA6B;AAC3B;AACF;AACA;AACEV,EAAAA,SAAS,EAAEW,mBAAUC,MAJM;;AAK3B;AACF;AACA;AACEpB,EAAAA,IAAI,EAAEmB,mBAAUC,MARW;;AAS3B;AACF;AACA;AACErB,EAAAA,KAAK,EAAEoB,mBAAUE,SAAV,CAAoB,CAACF,mBAAUC,MAAX,EAAmBD,mBAAUG,MAA7B,CAApB,CAZoB;;AAa3B;AACF;AACA;AACEb,EAAAA,KAAK,EAAEU,mBAAUC,MAhBU;;AAiB3B;AACF;AACA;AACEV,EAAAA,OAAO,EAAES,mBAAUI,OAAV,CACPJ,mBAAUK,KAAV,CAAgB;AACdP,IAAAA,IAAI,EAAEE,mBAAUC,MADF;AAEdrB,IAAAA,KAAK,EAAEoB,mBAAUE,SAAV,CAAoB,CAACF,mBAAUC,MAAX,EAAmBD,mBAAUG,MAA7B,CAApB;AAFO,GAAhB,CADO,CApBkB;;AA0B3B;AACF;AACA;AACA;AACErB,EAAAA,QAAQ,EAAEkB,mBAAUM;AA9BO,CAA7B;AAiCA/B,gBAAgB,CAACgC,YAAjB,GAAgC;AAC9BlB,EAAAA,SAAS,EAAE,IADmB;AAE9BR,EAAAA,IAAI,EAAE,IAFwB;AAG9BD,EAAAA,KAAK,EAAE,IAHuB;AAI9BU,EAAAA,KAAK,EAAE,IAJuB;AAK9BC,EAAAA,OAAO,EAAE,IALqB;AAM9BT,EAAAA,QAAQ,EAAE;AANoB,CAAhC;eASeP,gB","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport * as Styled from \"../styled\";\n\n/**\n * A wrapper that includes a <select> dropdown control and a <label> for the dropdown control.\n */\nclass DropdownSelector extends Component {\n  handleChange = evt => {\n    const val = evt.target.value;\n    const { name, onChange } = this.props;\n\n    if (typeof onChange === \"function\") {\n      const floatVal = parseFloat(val);\n      onChange({\n        [name]: Number.isNaN(floatVal) ? val : floatVal\n      });\n    }\n  };\n\n  render() {\n    const { className, label, name, options, style, value } = this.props;\n    const id = `id-query-param-${name}`;\n\n    return (\n      <Styled.DropdownSelector className={className} style={style}>\n        <div>\n          <Styled.SettingLabel htmlFor={id}>{label}</Styled.SettingLabel>\n        </div>\n\n        <div>\n          <select id={id} value={value} onChange={this.handleChange}>\n            {options &&\n              options.map((o, i) => (\n                <option key={i} value={o.value}>\n                  {o.text}\n                </option>\n              ))}\n          </select>\n        </div>\n      </Styled.DropdownSelector>\n    );\n  }\n}\n\nDropdownSelector.propTypes = {\n  /**\n   * The CSS class name to apply to this element.\n   */\n  className: PropTypes.string,\n  /**\n   * A unique name for the setting.\n   */\n  name: PropTypes.string,\n  /**\n   * The initially-selected value for the contained <select> control.\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * The contents of the contained <label> control.\n   */\n  label: PropTypes.string,\n  /**\n   * A list of {text, value} options for the <select> control.\n   */\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      text: PropTypes.string,\n      value: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    })\n  ),\n  /**\n   * Triggered when the value of the <select> control changes.\n   * @param arg The data {name: value} for the selected option.\n   */\n  onChange: PropTypes.func\n};\n\nDropdownSelector.defaultProps = {\n  className: null,\n  name: null,\n  value: null,\n  label: null,\n  options: null,\n  onChange: null\n};\n\nexport default DropdownSelector;\n"]}