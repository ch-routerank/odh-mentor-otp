{"version":3,"sources":["index.js"],"names":["SubmodeSelector","props","className","inline","label","modes","onChange","style","LabelType","Styled","FloatingSettingLabel","SettingLabel","RowType","InlineRow","Row","map","option","id","selected","title","text","propTypes","PropTypes","string","bool","arrayOf","modeOptionType","func","defaultProps"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;AAEA;AACA;AACA;AACA;AACA,MAAMA,eAAe,GAAGC,KAAK,IAAI;AAC/B,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,MAAb;AAAqBC,IAAAA,KAArB;AAA4BC,IAAAA,KAA5B;AAAmCC,IAAAA,QAAnC;AAA6CC,IAAAA;AAA7C,MAAuDN,KAA7D;AACA,QAAMO,SAAS,GAAGL,MAAM,GAAGM,MAAM,CAACC,oBAAV,GAAiCD,MAAM,CAACE,YAAhE;AACA,QAAMC,OAAO,GAAGT,MAAM,GAClBM,MAAM,CAACT,eAAP,CAAuBa,SADL,GAElBJ,MAAM,CAACT,eAAP,CAAuBc,GAF3B;AAIA,sBACE,6BAAC,MAAD,CAAQ,eAAR;AAAwB,IAAA,SAAS,EAAEZ,SAAnC;AAA8C,IAAA,KAAK,EAAEK;AAArD,KACGH,KAAK,iBAAI,6BAAC,SAAD,QAAYA,KAAZ,CADZ,eAEE,6BAAC,OAAD,QACGC,KAAK,IACJA,KAAK,CAACU,GAAN,CAAUC,MAAM,iBACd,6BAAC,mBAAD;AACE,IAAA,GAAG,EAAEA,MAAM,CAACC,EADd;AAEE,IAAA,QAAQ,EAAED,MAAM,CAACE,QAFnB;AAGE,IAAA,SAAS,EAAE,KAHb;AAIE,IAAA,KAAK,EAAEF,MAAM,CAACG,KAJhB;AAKE,IAAA,OAAO,EAAE,MAAMb,QAAQ,CAACU,MAAM,CAACC,EAAR;AALzB,KAOGD,MAAM,CAACI,IAPV,CADF,CAFJ,CAFF,CADF;AAmBD,CA1BD;;AA4BApB,eAAe,CAACqB,SAAhB,GAA4B;AAC1B;AACF;AACA;AACEnB,EAAAA,SAAS,EAAEoB,mBAAUC,MAJK;;AAK1B;AACF;AACA;AACEpB,EAAAA,MAAM,EAAEmB,mBAAUE,IARQ;;AAS1B;AACF;AACA;AACEpB,EAAAA,KAAK,EAAEkB,mBAAUC,MAZS;;AAa1B;AACF;AACA;AACElB,EAAAA,KAAK,EAAEiB,mBAAUG,OAAV,CAAkBC,qBAAlB,CAhBmB;;AAiB1B;AACF;AACA;AACA;AACEpB,EAAAA,QAAQ,EAAEgB,mBAAUK;AArBM,CAA5B;AAwBA3B,eAAe,CAAC4B,YAAhB,GAA+B;AAC7B1B,EAAAA,SAAS,EAAE,IADkB;AAE7BC,EAAAA,MAAM,EAAE,KAFqB;AAG7BC,EAAAA,KAAK,EAAE,IAHsB;AAI7BC,EAAAA,KAAK,EAAE,IAJsB;AAK7BC,EAAAA,QAAQ,EAAE;AALmB,CAA/B;eAQeN,e","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { modeOptionType } from \"../../../core-utils/src/types\";\n\nimport ModeButton from \"../ModeButton\";\nimport * as Styled from \"../styled\";\n\n/**\n * SubmodeSelector is the control container where the OTP user selects\n * the submodes (e.g. train, bus) for transit, or the providers for TNC and rental companies.\n */\nconst SubmodeSelector = props => {\n  const { className, inline, label, modes, onChange, style } = props;\n  const LabelType = inline ? Styled.FloatingSettingLabel : Styled.SettingLabel;\n  const RowType = inline\n    ? Styled.SubmodeSelector.InlineRow\n    : Styled.SubmodeSelector.Row;\n\n  return (\n    <Styled.SubmodeSelector className={className} style={style}>\n      {label && <LabelType>{label}</LabelType>}\n      <RowType>\n        {modes &&\n          modes.map(option => (\n            <ModeButton\n              key={option.id}\n              selected={option.selected}\n              showTitle={false}\n              title={option.title}\n              onClick={() => onChange(option.id)}\n            >\n              {option.text}\n            </ModeButton>\n          ))}\n      </RowType>\n    </Styled.SubmodeSelector>\n  );\n};\n\nSubmodeSelector.propTypes = {\n  /**\n   * The CSS class name to apply to this element.\n   */\n  className: PropTypes.string,\n  /**\n   * Determines how the label and mode buttons are displayed.\n   */\n  inline: PropTypes.bool,\n  /**\n   * The optional text to display before the submodes.\n   */\n  label: PropTypes.string,\n  /**\n   * An array of submodes for the trip query, i.e. transit modes, TNC, or rental companies.\n   */\n  modes: PropTypes.arrayOf(modeOptionType),\n  /**\n   * Triggered when the user toggles a submode.\n   * @param id The id of the option clicked.\n   */\n  onChange: PropTypes.func\n};\n\nSubmodeSelector.defaultProps = {\n  className: null,\n  inline: false,\n  label: null,\n  modes: null,\n  onChange: null\n};\n\nexport default SubmodeSelector;\n"]}