{"version":3,"sources":["middleware.js"],"names":["fetch","require","API_USER_PATH","API_MONITORTRIP_PATH","getSecureFetchOptions","accessToken","apiKey","method","options","headers","Authorization","mode","secureFetch","url","res","status","code","result","json","message","detail","data","fetchUser","middlewareConfig","token","apiBaseUrl","requestUrl","addUser","body","JSON","stringify","updateUser","id","getTrips","addTrip","updateTrip","deleteTrip"],"mappings":"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","sourcesContent":["if (typeof (fetch) === 'undefined') require('isomorphic-fetch')\n\nconst API_USER_PATH = '/api/secure/user'\nconst API_MONITORTRIP_PATH = '/api/secure/monitoredtrip'\n\n/**\n * This method builds the options object for call to the fetch method.\n * @param {string} accessToken If non-null, a bearer Authorization header will be added with the specified token.\n * @param {string} apiKey If non-null, an x-api-key header will be added with the specified key.\n * @param {string} method The HTTP method to execute.\n * @param {*} options Extra options to pass to fetch.\n */\nexport function getSecureFetchOptions (accessToken, apiKey, method = 'get', options = {}) {\n  const headers = {\n    // JSON request bodies only.\n    'Content-Type': 'application/json'\n  }\n  if (apiKey) {\n    headers['x-api-key'] = apiKey\n  }\n  if (accessToken) {\n    headers.Authorization = `Bearer ${accessToken}`\n  }\n\n  return {\n    method,\n    mode: 'cors', // Middleware is at a different URL.\n    headers,\n    ...options\n  }\n}\n\n/**\n * This convenience method wraps a fetch call to the specified URL\n * with the token and api key added (if provided) to the HTTP request header,\n * and wraps the response by adding the success/error status of the call.\n * @param {string} url The URL to call.\n * @param {string} accessToken If non-null, the Authorization token to add to request header.\n * @param {string} apiKey If non-null, the API key to add to the Authorization header.\n * @param {string} method The HTTP method to execute.\n * @param {*} options Extra options to pass to fetch.\n */\nexport async function secureFetch (url, accessToken, apiKey, method = 'get', options = {}) {\n  const res = await fetch(url, getSecureFetchOptions(accessToken, apiKey, method, options))\n\n  if ((res.status && res.status >= 400) || (res.code && res.code >= 400)) {\n    const result = await res.json()\n    let message = `Error ${method}-ing user: ${result.message}`\n    if (result.detail) message += `  (${result.detail})`\n\n    return {\n      status: 'error',\n      message\n    }\n  }\n  return {\n    status: 'success',\n    data: await res.json()\n  }\n}\n\n// TODO: Move methods below to user/entity-specific files?\nexport async function fetchUser (middlewareConfig, token) {\n  const { apiBaseUrl, apiKey } = middlewareConfig\n  const requestUrl = `${apiBaseUrl}${API_USER_PATH}/fromtoken`\n\n  return secureFetch(requestUrl, token, apiKey)\n}\n\nexport async function addUser (middlewareConfig, token, data) {\n  const { apiBaseUrl, apiKey } = middlewareConfig\n  const requestUrl = `${apiBaseUrl}${API_USER_PATH}`\n\n  return secureFetch(requestUrl, token, apiKey, 'POST', {\n    body: JSON.stringify(data)\n  })\n}\n\nexport async function updateUser (middlewareConfig, token, data) {\n  const { apiBaseUrl, apiKey } = middlewareConfig\n  const { id } = data // Middleware ID, NOT auth0 (or similar) id.\n  const requestUrl = `${apiBaseUrl}${API_USER_PATH}/${id}`\n\n  if (id) {\n    return secureFetch(requestUrl, token, apiKey, 'PUT', {\n      body: JSON.stringify(data)\n    })\n  } else {\n    return {\n      status: 'error',\n      message: 'Corrupted state: User ID not available for exiting user.'\n    }\n  }\n}\n\nexport async function getTrips (middlewareConfig, token) {\n  const { apiBaseUrl, apiKey } = middlewareConfig\n  const requestUrl = `${apiBaseUrl}${API_MONITORTRIP_PATH}`\n\n  return secureFetch(requestUrl, token, apiKey, 'GET')\n}\n\nexport async function addTrip (middlewareConfig, token, data) {\n  const { apiBaseUrl, apiKey } = middlewareConfig\n  const requestUrl = `${apiBaseUrl}${API_MONITORTRIP_PATH}`\n\n  return secureFetch(requestUrl, token, apiKey, 'POST', {\n    body: JSON.stringify(data)\n  })\n}\n\nexport async function updateTrip (middlewareConfig, token, data) {\n  const { apiBaseUrl, apiKey } = middlewareConfig\n  const { id } = data\n  const requestUrl = `${apiBaseUrl}${API_MONITORTRIP_PATH}/${id}`\n\n  if (id) {\n    return secureFetch(requestUrl, token, apiKey, 'PUT', {\n      body: JSON.stringify(data)\n    })\n  } else {\n    return {\n      status: 'error',\n      message: 'Corrupted state: Monitored Trip ID not available for exiting user.'\n    }\n  }\n}\n\nexport async function deleteTrip (middlewareConfig, token, id) {\n  const { apiBaseUrl, apiKey } = middlewareConfig\n  const requestUrl = `${apiBaseUrl}${API_MONITORTRIP_PATH}/${id}`\n\n  if (id) {\n    return secureFetch(requestUrl, token, apiKey, 'DELETE')\n  } else {\n    return {\n      status: 'error',\n      message: 'Corrupted state: Monitored Trip ID not available for exiting user.'\n    }\n  }\n}\n"]}