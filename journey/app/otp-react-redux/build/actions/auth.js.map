{"version":3,"sources":["auth.js"],"names":["showAccessTokenError","err","options","dispatch","getState","console","error","showLoginError","processSignIn","appState","urlHash","hashIndex","indexOf","urlHashWithoutHash","substr","returnTo"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,oBAAT,CAA+BC,GAA/B,EAAoCC,OAApC,EAA6C;AAClD,SAAO,UAAUC,QAAV,EAAoBC,QAApB,EAA8B;AACnC;AACAC,IAAAA,OAAO,CAACC,KAAR,CAAc,mCAAd,EAAmDL,GAAnD;AACD,GAHD;AAID;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASM,cAAT,CAAyBN,GAAzB,EAA8B;AACnC,SAAO,UAAUE,QAAV,EAAoBC,QAApB,EAA8B;AACnC;AACA,QAAIH,GAAJ,EAASE,QAAQ,CAAC,gCAAK,OAAL,CAAD,CAAR;AACV,GAHD;AAID;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASK,aAAT,CAAwBC,QAAxB,EAAkC;AACvC,SAAO,UAAUN,QAAV,EAAoBC,QAApB,EAA8B;AACnC,QAAIK,QAAQ,IAAIA,QAAQ,CAACC,OAAzB,EAAkC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,YAAMC,SAAS,GAAGF,QAAQ,CAACC,OAAT,CAAiBE,OAAjB,CAAyB,GAAzB,CAAlB;AACA,YAAMC,kBAAkB,GAAGF,SAAS,IAAI,CAAb,GACvBF,QAAQ,CAACC,OAAT,CAAiBI,MAAjB,CAAwBH,SAAS,GAAG,CAApC,CADuB,GAEvB,GAFJ;AAGAR,MAAAA,QAAQ,CAAC,+BAAoBU,kBAApB,CAAD,CAAR;AACD,KAZD,MAYO,IAAIJ,QAAQ,IAAIA,QAAQ,CAACM,QAAzB,EAAmC,CACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACF,GAtBD;AAuBD","sourcesContent":["import { push } from 'connected-react-router'\n\nimport { setPathBeforeSignIn } from '../actions/user'\n\n/**\n * This function is called by the Auth0Provider component, with the described parameter(s),\n * when a new access token could not be retrieved.\n * @param {Error} err\n * @param {AccessTokenRequestOptions} options\n */\nexport function showAccessTokenError (err, options) {\n  return function (dispatch, getState) {\n    // TODO: improve this.\n    console.error('Failed to retrieve access token: ', err)\n  }\n}\n\n/**\n * This function is called by the Auth0Provider component, with the described parameter(s),\n * when signing-in fails for some reason.\n * @param {Error} err\n */\nexport function showLoginError (err) {\n  return function (dispatch, getState) {\n    // TODO: improve this.\n    if (err) dispatch(push('/oops'))\n  }\n}\n\n/**\n * This function is called by the Auth0Provider component, with the described parameter(s),\n * after the user signs in.\n * @param {Object} appState The state that was stored when calling useAuth().login().\n */\nexport function processSignIn (appState) {\n  return function (dispatch, getState) {\n    if (appState && appState.urlHash) {\n      // At this stage after login, Auth0 has already redirected to /signedin (Auth0-whitelisted)\n      // which shows the AfterLoginScreen.\n      //\n      // Here, we save the URL hash prior to login (contains a combination of itinerary search, stop/trip view, etc.),\n      // so that the AfterLoginScreen can redirect back there when logged-in user info is fetched.\n      // (For routing, it is easier to deal with the path without the hash sign.)\n      const hashIndex = appState.urlHash.indexOf('#')\n      const urlHashWithoutHash = hashIndex >= 0\n        ? appState.urlHash.substr(hashIndex + 1)\n        : '/'\n      dispatch(setPathBeforeSignIn(urlHashWithoutHash))\n    } else if (appState && appState.returnTo) {\n      // TODO: Handle other after-login situations.\n      // Note that when redirecting from a login-protected (e.g. account) page while logged out,\n      //     then returnTo is set by Auth0 to this object format:\n      //     {\n      //       pathname: \"/\"\n      //       query: { ... }\n      //     }\n    }\n  }\n}\n"]}