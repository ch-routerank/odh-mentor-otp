{"version":3,"sources":["call-taker.js"],"names":["fetch","require","endingCall","receivedCalls","receivedQueries","requestingCalls","requestingQueries","storeSession","beginCall","toggleCallHistory","endCall","dispatch","getState","callTaker","otp","activeCall","session","sessionIsInvalid","callData","FormData","append","sessionId","startTime","config","datastoreUrl","method","body","then","res","json","id","saveQueriesForCall","fetchCalls","catch","err","console","error","alert","JSON","stringify","initializeModules","trinetReDirect","checkSession","newSession","URL_ROOT","verifyLoginUrl","redirect","data","log","windowUrl","qs","window","location","limit","calls","call","Promise","all","searches","map","searchId","search","query","queryData","queryParams","fromPlace","toPlace","timeStamp","fetchQueries","callId","queries"],"mappings":"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","sourcesContent":["import { getUrlParams } from '@opentripplanner/core-utils/lib/query'\nimport qs from 'qs'\nimport { createAction } from 'redux-actions'\n\nimport {searchToQuery} from '../util/call-taker'\nimport {URL_ROOT} from '../util/constants'\nimport {getTimestamp} from '../util/state'\n\nif (typeof (fetch) === 'undefined') require('isomorphic-fetch')\n\n/// PRIVATE ACTIONS\n\nconst endingCall = createAction('END_CALL')\nconst receivedCalls = createAction('RECEIVED_CALLS')\nconst receivedQueries = createAction('RECEIVED_QUERIES')\nconst requestingCalls = createAction('REQUESTING_CALLS')\nconst requestingQueries = createAction('REQUESTING_QUERIES')\nconst storeSession = createAction('STORE_SESSION')\n\n/// PUBLIC ACTIONS\n\nexport const beginCall = createAction('BEGIN_CALL')\nexport const toggleCallHistory = createAction('TOGGLE_CALL_HISTORY')\n\n/**\n * End the active call and store the queries made during the call.\n */\nexport function endCall () {\n  return function (dispatch, getState) {\n    const {callTaker, otp} = getState()\n    const {activeCall, session} = callTaker\n    if (sessionIsInvalid(session)) return\n    // Make POST request to store call.\n    const callData = new FormData()\n    callData.append('sessionId', session.sessionId)\n    callData.append('call.startTime', activeCall.startTime)\n    callData.append('call.endTime', getTimestamp())\n    fetch(`${otp.config.datastoreUrl}/calltaker/call`,\n      {method: 'POST', body: callData}\n    )\n      .then(res => res.json())\n      .then(id => {\n        // Inject call ID into active call and save queries.\n        dispatch(saveQueriesForCall({...activeCall, id}))\n        dispatch(fetchCalls())\n      })\n      .catch(err => {\n        console.error(err)\n        alert(`Could not save call: ${JSON.stringify(err)}`)\n      })\n    dispatch(endingCall())\n  }\n}\n\n/**\n * Initialize the Call Taker and Field Trip modules by checking the session\n * query param against sessions in the datastore backend or initializing a new\n * session via Trinet.\n */\nexport function initializeModules () {\n  return function (dispatch, getState) {\n    const {datastoreUrl, trinetReDirect} = getState().otp.config\n    // Initialize session if datastore enabled.\n    if (datastoreUrl && trinetReDirect) {\n      // TODO: Generalize for non-TriNet instances.\n      const sessionId = getUrlParams().sessionId\n      if (sessionId) {\n        // Initialize the session if found in URL query params.\n        dispatch(checkSession(datastoreUrl, sessionId))\n      } else {\n        // No sessionId was passed in, so we must request one from server.\n        newSession(datastoreUrl, trinetReDirect, URL_ROOT)\n      }\n    }\n  }\n}\n\n/**\n * Handle initializing a new Trinet session by redirecting to Trinet auth and\n * returning once authenticated successfully.\n */\nfunction newSession (datastoreUrl, verifyLoginUrl, redirect) {\n  fetch(datastoreUrl + '/auth/newSession')\n    .then(res => res.json())\n    .then(data => {\n      const {sessionId: session} = data\n      console.log('newSession success: ' + session)\n      const windowUrl = `${verifyLoginUrl}?${qs.stringify({session, redirect})}`\n      console.log('redirecting to: ' + windowUrl)\n      window.location = windowUrl\n    })\n    .catch(error => {\n      console.error('newSession error', error)\n    })\n}\n\n/**\n * Check that a particular session ID is valid and store resulting session\n * data.\n */\nfunction checkSession (datastoreUrl, sessionId) {\n  return function (dispatch, getState) {\n    fetch(datastoreUrl + `/auth/checkSession?sessionId=${sessionId}`)\n      .then(res => res.json())\n      .then(session => dispatch(storeSession({session})))\n      .catch(error => {\n        console.error('checkSession error', error)\n        dispatch(storeSession({session: null}))\n      })\n  }\n}\n\n/**\n * Fetch latest calls for a particular session.\n */\nexport function fetchCalls () {\n  return function (dispatch, getState) {\n    dispatch(requestingCalls())\n    const {callTaker, otp} = getState()\n    if (sessionIsInvalid(callTaker.session)) return\n    const {datastoreUrl} = otp.config\n    const {sessionId} = callTaker.session\n    const limit = 10\n    fetch(`${datastoreUrl}/calltaker/call?${qs.stringify({limit, sessionId})}`)\n      .then(res => res.json())\n      .then(calls => {\n        console.log('GET calls response', calls)\n        dispatch(receivedCalls({calls}))\n      })\n      .catch(err => {\n        alert(`Could not fetch calls: ${JSON.stringify(err)}`)\n      })\n  }\n}\n\n/**\n * @return {boolean} - whether a calltaker session is invalid\n */\nfunction sessionIsInvalid (session) {\n  if (!session || !session.sessionId) {\n    console.error('No valid OTP datastore session found.')\n    return true\n  }\n  return false\n}\n\n/**\n * Store the trip queries made over the course of a call (to be called when the\n * call terminates).\n */\nexport function saveQueriesForCall (call) {\n  return function (dispatch, getState) {\n    const {callTaker, otp} = getState()\n    const {datastoreUrl} = otp.config\n    if (sessionIsInvalid(callTaker.session)) return\n    if (!call) {\n      alert(`Could not find call for ${call.id}. Cancelling save queries request.`)\n      return\n    }\n    return Promise.all(call.searches.map(searchId => {\n      const search = otp.searches[searchId]\n      const query = searchToQuery(search, call, otp.config)\n      const {sessionId} = callTaker.session\n      const queryData = new FormData()\n      queryData.append('sessionId', sessionId)\n      queryData.append('query.queryParams', query.queryParams)\n      queryData.append('query.fromPlace', query.fromPlace)\n      queryData.append('query.toPlace', query.toPlace)\n      queryData.append('query.timeStamp', query.timeStamp)\n      queryData.append('query.call.id', call.id)\n      return fetch(`${datastoreUrl}/calltaker/callQuery?sessionId=${sessionId}`,\n        {method: 'POST', body: queryData}\n      )\n        .then(res => res.json())\n        .catch(err => {\n          alert(`Could not fetch calls: ${JSON.stringify(err)}`)\n        })\n    }))\n  }\n}\n\n/**\n * Fetch the trip queries that were made during a particular call.\n */\nexport function fetchQueries (callId) {\n  return function (dispatch, getState) {\n    dispatch(requestingQueries())\n    const {callTaker, otp} = getState()\n    const {datastoreUrl} = otp.config\n    if (sessionIsInvalid(callTaker.session)) return\n    const {sessionId} = callTaker.session\n    fetch(`${datastoreUrl}/calltaker/callQuery?sessionId=${sessionId}&call.id=${callId}`)\n      .then(res => res.json())\n      .then(queries => {\n        dispatch(receivedQueries({callId, queries}))\n      })\n      .catch(err => {\n        alert(`Could not fetch calls: ${JSON.stringify(err)}`)\n      })\n  }\n}\n"]}