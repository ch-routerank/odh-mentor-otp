{"version":3,"sources":["user.js"],"names":["setCurrentUser","setCurrentUserMonitoredTrips","setPathBeforeSignIn","createNewUser","auth0User","auth0UserId","sub","email","hasConsentedToTerms","notificationChannel","phoneNumber","savedLocations","storeTripHistory","fetchUserMonitoredTrips","accessToken","dispatch","getState","otp","otp_middleware","otpMiddleware","config","persistence","data","trips","status","fetchStatus","fetchOrInitializeUser","auth","user","authUser","fetchUserStatus","isNewAccount","result","createOrUpdateUser","userData","loggedInUser","alert","JSON","stringify","createOrUpdateUserMonitoredTrip","tripData","isNew","silentOnSuccess","deleteUserMonitoredTrip","id","deleteResult"],"mappings":";;;;;;;;;;;;AAAA;;AAEA;;AASA;;AAEA,MAAMA,cAAc,GAAG,gCAAa,kBAAb,CAAvB;AACA,MAAMC,4BAA4B,GAAG,gCAAa,kCAAb,CAArC;AACO,MAAMC,mBAAmB,GAAG,gCAAa,wBAAb,CAA5B;;;AAEP,SAASC,aAAT,CAAwBC,SAAxB,EAAmC;AACjC,SAAO;AACLC,IAAAA,WAAW,EAAED,SAAS,CAACE,GADlB;AAELC,IAAAA,KAAK,EAAEH,SAAS,CAACG,KAFZ;AAGLC,IAAAA,mBAAmB,EAAE,KAHhB;AAGuB;AAC5BC,IAAAA,mBAAmB,EAAE,OAJhB;AAKLC,IAAAA,WAAW,EAAE,EALR;AAMLC,IAAAA,cAAc,EAAE,EANX;AAOLC,IAAAA,gBAAgB,EAAE,KAPb,CAOmB;;AAPnB,GAAP;AASD;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASC,uBAAT,CAAkCC,WAAlC,EAA+C;AACpD,SAAO,gBAAgBC,QAAhB,EAA0BC,QAA1B,EAAoC;AACzC,UAAM;AAAEC,MAAAA;AAAF,QAAUD,QAAQ,EAAxB;AACA,UAAM;AAAEE,MAAAA,cAAc,EAAEC,aAAa,GAAG;AAAlC,QAA2CF,GAAG,CAACG,MAAJ,CAAWC,WAA5D;;AAEA,QAAIF,aAAJ,EAAmB;AACjB,YAAM;AAAEG,QAAAA,IAAI,EAAEC,KAAR;AAAeC,QAAAA,MAAM,EAAEC;AAAvB,UAAuC,MAAM,0BAASN,aAAT,EAAwBL,WAAxB,CAAnD;;AACA,UAAIW,WAAW,KAAK,SAApB,EAA+B;AAC7BV,QAAAA,QAAQ,CAACd,4BAA4B,CAACsB,KAAD,CAA7B,CAAR;AACD;AACF;AACF,GAVD;AAWD;AAED;AACA;AACA;;;AACO,SAASG,qBAAT,CAAgCC,IAAhC,EAAsC;AAC3C,SAAO,gBAAgBZ,QAAhB,EAA0BC,QAA1B,EAAoC;AACzC,UAAM;AAAEC,MAAAA;AAAF,QAAUD,QAAQ,EAAxB;AACA,UAAM;AAAEE,MAAAA,cAAc,EAAEC,aAAa,GAAG;AAAlC,QAA2CF,GAAG,CAACG,MAAJ,CAAWC,WAA5D;;AAEA,QAAIF,aAAJ,EAAmB;AACjB,YAAM;AAAEL,QAAAA,WAAF;AAAec,QAAAA,IAAI,EAAEC;AAArB,UAAkCF,IAAxC;AACA,YAAM;AAAEL,QAAAA,IAAI,EAAEM,IAAR;AAAcJ,QAAAA,MAAM,EAAEM;AAAtB,UAA0C,MAAM,2BAAUX,aAAV,EAAyBL,WAAzB,CAAtD,CAFiB,CAIjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAMiB,YAAY,GAAGD,eAAe,KAAK,OAApB,IAAgCF,IAAI,IAAIA,IAAI,CAACI,MAAL,KAAgB,KAA7E;;AACA,UAAI,CAACD,YAAL,EAAmB;AACjB;AACA,cAAMhB,QAAQ,CAACF,uBAAuB,CAACC,WAAD,CAAxB,CAAd;AAEAC,QAAAA,QAAQ,CAACf,cAAc,CAAC;AAAEc,UAAAA,WAAF;AAAec,UAAAA;AAAf,SAAD,CAAf,CAAR;AACD,OALD,MAKO;AACLb,QAAAA,QAAQ,CAACf,cAAc,CAAC;AAAEc,UAAAA,WAAF;AAAec,UAAAA,IAAI,EAAEzB,aAAa,CAAC0B,QAAD;AAAlC,SAAD,CAAf,CAAR;AACD;AACF;AACF,GAvCD;AAwCD;AAED;AACA;AACA;AACA;;;AACO,SAASI,kBAAT,CAA6BC,QAA7B,EAAuC;AAC5C,SAAO,gBAAgBnB,QAAhB,EAA0BC,QAA1B,EAAoC;AACzC,UAAM;AAAEC,MAAAA,GAAF;AAAOW,MAAAA;AAAP,QAAgBZ,QAAQ,EAA9B;AACA,UAAM;AAAEE,MAAAA,cAAc,EAAEC,aAAa,GAAG;AAAlC,QAA2CF,GAAG,CAACG,MAAJ,CAAWC,WAA5D;;AAEA,QAAIF,aAAJ,EAAmB;AACjB,YAAM;AAAEL,QAAAA,WAAF;AAAeqB,QAAAA;AAAf,UAAgCP,IAAtC;AAEA,UAAII,MAAJ;;AACA,UAAI,qBAAUG,YAAV,CAAJ,EAA6B;AAC3BH,QAAAA,MAAM,GAAG,MAAM,yBAAQb,aAAR,EAAuBL,WAAvB,EAAoCoB,QAApC,CAAf;AACD,OAFD,MAEO;AACLF,QAAAA,MAAM,GAAG,MAAM,4BAAWb,aAAX,EAA0BL,WAA1B,EAAuCoB,QAAvC,CAAf;AACD,OARgB,CAUjB;;;AACA,UAAIF,MAAM,CAACR,MAAP,KAAkB,SAAlB,IAA+BQ,MAAM,CAACV,IAA1C,EAAgD;AAC9Cc,QAAAA,KAAK,CAAC,mCAAD,CAAL,CAD8C,CAG9C;AACA;;AACA,cAAMF,QAAQ,GAAGF,MAAM,CAACV,IAAxB;AACAP,QAAAA,QAAQ,CAACf,cAAc,CAAC;AAAEc,UAAAA,WAAF;AAAec,UAAAA,IAAI,EAAEM;AAArB,SAAD,CAAf,CAAR;AACD,OAPD,MAOO;AACLE,QAAAA,KAAK,CAAE,8BAA6BC,IAAI,CAACC,SAAL,CAAeN,MAAf,CAAuB,EAAtD,CAAL;AACD;AACF;AACF,GA1BD;AA2BD;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASO,+BAAT,CAA0CC,QAA1C,EAAoDC,KAApD,EAA2DC,eAA3D,EAA4E;AACjF,SAAO,gBAAgB3B,QAAhB,EAA0BC,QAA1B,EAAoC;AACzC,UAAM;AAAEC,MAAAA,GAAF;AAAOW,MAAAA;AAAP,QAAgBZ,QAAQ,EAA9B;AACA,UAAM;AAAEE,MAAAA,cAAc,EAAEC,aAAa,GAAG;AAAlC,QAA2CF,GAAG,CAACG,MAAJ,CAAWC,WAA5D;;AAEA,QAAIF,aAAJ,EAAmB;AACjB,YAAM;AAAEL,QAAAA;AAAF,UAAkBc,IAAxB;AAEA,UAAII,MAAJ;;AACA,UAAIS,KAAJ,EAAW;AACTT,QAAAA,MAAM,GAAG,MAAM,yBAAQb,aAAR,EAAuBL,WAAvB,EAAoC0B,QAApC,CAAf;AACD,OAFD,MAEO;AACLR,QAAAA,MAAM,GAAG,MAAM,4BAAWb,aAAX,EAA0BL,WAA1B,EAAuC0B,QAAvC,CAAf;AACD,OARgB,CAUjB;;;AACA,UAAIR,MAAM,CAACR,MAAP,KAAkB,SAAlB,IAA+BQ,MAAM,CAACV,IAA1C,EAAgD;AAC9C,YAAI,CAACoB,eAAL,EAAsB;AACpBN,UAAAA,KAAK,CAAC,mCAAD,CAAL;AACD,SAH6C,CAK9C;;;AACA,cAAMrB,QAAQ,CAACF,uBAAuB,CAACC,WAAD,CAAxB,CAAd;AACD,OAPD,MAOO;AACLsB,QAAAA,KAAK,CAAE,8BAA6BC,IAAI,CAACC,SAAL,CAAeN,MAAf,CAAuB,EAAtD,CAAL;AACD;AACF;AACF,GA1BD;AA2BD;AAED;AACA;AACA;AACA;;;AACO,SAASW,uBAAT,CAAkCC,EAAlC,EAAsC;AAC3C,SAAO,gBAAgB7B,QAAhB,EAA0BC,QAA1B,EAAoC;AACzC,UAAM;AAAEC,MAAAA,GAAF;AAAOW,MAAAA;AAAP,QAAgBZ,QAAQ,EAA9B;AACA,UAAM;AAAEE,MAAAA,cAAc,EAAEC,aAAa,GAAG;AAAlC,QAA2CF,GAAG,CAACG,MAAJ,CAAWC,WAA5D;;AAEA,QAAIF,aAAJ,EAAmB;AACjB,YAAM;AAAEL,QAAAA;AAAF,UAAkBc,IAAxB;AACA,YAAMiB,YAAY,GAAG,MAAM,4BAAW1B,aAAX,EAA0BL,WAA1B,EAAuC8B,EAAvC,CAA3B;;AAEA,UAAIC,YAAY,CAACrB,MAAb,KAAwB,SAA5B,EAAuC;AACrC;AACA,cAAMT,QAAQ,CAACF,uBAAuB,CAACC,WAAD,CAAxB,CAAd;AACD,OAHD,MAGO;AACLsB,QAAAA,KAAK,CAAE,8BAA6BC,IAAI,CAACC,SAAL,CAAeO,YAAf,CAA6B,EAA5D,CAAL;AACD;AACF;AACF,GAfD;AAgBD","sourcesContent":["import { createAction } from 'redux-actions'\n\nimport {\n  addTrip,\n  addUser,\n  deleteTrip,\n  fetchUser,\n  getTrips,\n  updateTrip,\n  updateUser\n} from '../util/middleware'\nimport { isNewUser } from '../util/user'\n\nconst setCurrentUser = createAction('SET_CURRENT_USER')\nconst setCurrentUserMonitoredTrips = createAction('SET_CURRENT_USER_MONITORED_TRIPS')\nexport const setPathBeforeSignIn = createAction('SET_PATH_BEFORE_SIGNIN')\n\nfunction createNewUser (auth0User) {\n  return {\n    auth0UserId: auth0User.sub,\n    email: auth0User.email,\n    hasConsentedToTerms: false, // User must agree to terms.\n    notificationChannel: 'email',\n    phoneNumber: '',\n    savedLocations: [],\n    storeTripHistory: false // User must opt in.\n  }\n}\n\n/**\n * Fetches the saved/monitored trips for a user.\n * We use the accessToken to fetch the data regardless of\n * whether the process to populate state.user is completed or not.\n */\nexport function fetchUserMonitoredTrips (accessToken) {\n  return async function (dispatch, getState) {\n    const { otp } = getState()\n    const { otp_middleware: otpMiddleware = null } = otp.config.persistence\n\n    if (otpMiddleware) {\n      const { data: trips, status: fetchStatus } = await getTrips(otpMiddleware, accessToken)\n      if (fetchStatus === 'success') {\n        dispatch(setCurrentUserMonitoredTrips(trips))\n      }\n    }\n  }\n}\n\n/**\n * Fetches user preferences to state.user, or set initial values under state.user if no user has been loaded.\n */\nexport function fetchOrInitializeUser (auth) {\n  return async function (dispatch, getState) {\n    const { otp } = getState()\n    const { otp_middleware: otpMiddleware = null } = otp.config.persistence\n\n    if (otpMiddleware) {\n      const { accessToken, user: authUser } = auth\n      const { data: user, status: fetchUserStatus } = await fetchUser(otpMiddleware, accessToken)\n\n      // Beware! On AWS API gateway, if a user is not found in the middleware\n      // (e.g. they just created their Auth0 password but have not completed the account setup form yet),\n      // the call above will return, for example:\n      // {\n      //    status: 'success',\n      //    data: {\n      //      \"result\": \"ERR\",\n      //      \"message\": \"No user with id=000000 found.\",\n      //      \"code\": 404,\n      //      \"detail\": null\n      //    }\n      // }\n      //\n      // The same call to a middleware instance that is not behind an API gateway\n      // will return:\n      // {\n      //    status: 'error',\n      //    message: 'Error get-ing user...'\n      // }\n      // TODO: Improve AWS response.\n\n      const isNewAccount = fetchUserStatus === 'error' || (user && user.result === 'ERR')\n      if (!isNewAccount) {\n        // Load user's monitored trips before setting the user state.\n        await dispatch(fetchUserMonitoredTrips(accessToken))\n\n        dispatch(setCurrentUser({ accessToken, user }))\n      } else {\n        dispatch(setCurrentUser({ accessToken, user: createNewUser(authUser) }))\n      }\n    }\n  }\n}\n\n/**\n * Updates (or creates) a user entry in the middleware,\n * then, if that was successful, updates the redux state with that user.\n */\nexport function createOrUpdateUser (userData) {\n  return async function (dispatch, getState) {\n    const { otp, user } = getState()\n    const { otp_middleware: otpMiddleware = null } = otp.config.persistence\n\n    if (otpMiddleware) {\n      const { accessToken, loggedInUser } = user\n\n      let result\n      if (isNewUser(loggedInUser)) {\n        result = await addUser(otpMiddleware, accessToken, userData)\n      } else {\n        result = await updateUser(otpMiddleware, accessToken, userData)\n      }\n\n      // TODO: improve the UI feedback messages for this.\n      if (result.status === 'success' && result.data) {\n        alert('Your preferences have been saved.')\n\n        // Update application state with the user entry as saved\n        // (as returned) by the middleware.\n        const userData = result.data\n        dispatch(setCurrentUser({ accessToken, user: userData }))\n      } else {\n        alert(`An error was encountered:\\n${JSON.stringify(result)}`)\n      }\n    }\n  }\n}\n\n/**\n * Updates a logged-in user's monitored trip,\n * then, if that was successful, alerts (optional)\n * and refreshes the redux monitoredTrips with the updated trip.\n */\nexport function createOrUpdateUserMonitoredTrip (tripData, isNew, silentOnSuccess) {\n  return async function (dispatch, getState) {\n    const { otp, user } = getState()\n    const { otp_middleware: otpMiddleware = null } = otp.config.persistence\n\n    if (otpMiddleware) {\n      const { accessToken } = user\n\n      let result\n      if (isNew) {\n        result = await addTrip(otpMiddleware, accessToken, tripData)\n      } else {\n        result = await updateTrip(otpMiddleware, accessToken, tripData)\n      }\n\n      // TODO: improve the UI feedback messages for this.\n      if (result.status === 'success' && result.data) {\n        if (!silentOnSuccess) {\n          alert('Your preferences have been saved.')\n        }\n\n        // Reload user's monitored trips after add/update.\n        await dispatch(fetchUserMonitoredTrips(accessToken))\n      } else {\n        alert(`An error was encountered:\\n${JSON.stringify(result)}`)\n      }\n    }\n  }\n}\n\n/**\n * Deletes a logged-in user's monitored trip,\n * then, if that was successful, refreshes the redux monitoredTrips state.\n */\nexport function deleteUserMonitoredTrip (id) {\n  return async function (dispatch, getState) {\n    const { otp, user } = getState()\n    const { otp_middleware: otpMiddleware = null } = otp.config.persistence\n\n    if (otpMiddleware) {\n      const { accessToken } = user\n      const deleteResult = await deleteTrip(otpMiddleware, accessToken, id)\n\n      if (deleteResult.status === 'success') {\n        // Reload user's monitored trips after deletion.\n        await dispatch(fetchUserMonitoredTrips(accessToken))\n      } else {\n        alert(`An error was encountered:\\n${JSON.stringify(deleteResult)}`)\n      }\n    }\n  }\n}\n"]}