{"version":3,"sources":["user.js"],"names":["setCurrentUser","setCurrentUserMonitoredTrips","setPathBeforeSignIn","createNewUser","auth0User","auth0UserId","sub","email","hasConsentedToTerms","notificationChannel","phoneNumber","savedLocations","storeTripHistory","fetchUserMonitoredTrips","accessToken","dispatch","getState","otp","config","persistence","otp_middleware","otpMiddleware","trips","data","fetchStatus","status","fetchOrInitializeUser","auth","authUser","user","fetchUserStatus","isNewAccount","result","createOrUpdateUser","userData","loggedInUser","alert","JSON","stringify","createOrUpdateUserMonitoredTrip","tripData","isNew","silentOnSuccess","deleteUserMonitoredTrip","id","deleteResult"],"mappings":"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","sourcesContent":["import { createAction } from 'redux-actions'\n\nimport {\n  addTrip,\n  addUser,\n  deleteTrip,\n  fetchUser,\n  getTrips,\n  updateTrip,\n  updateUser\n} from '../util/middleware'\nimport { isNewUser } from '../util/user'\n\nconst setCurrentUser = createAction('SET_CURRENT_USER')\nconst setCurrentUserMonitoredTrips = createAction('SET_CURRENT_USER_MONITORED_TRIPS')\nexport const setPathBeforeSignIn = createAction('SET_PATH_BEFORE_SIGNIN')\n\nfunction createNewUser (auth0User) {\n  return {\n    auth0UserId: auth0User.sub,\n    email: auth0User.email,\n    hasConsentedToTerms: false, // User must agree to terms.\n    notificationChannel: 'email',\n    phoneNumber: '',\n    savedLocations: [],\n    storeTripHistory: false // User must opt in.\n  }\n}\n\n/**\n * Fetches the saved/monitored trips for a user.\n * We use the accessToken to fetch the data regardless of\n * whether the process to populate state.user is completed or not.\n */\nexport function fetchUserMonitoredTrips (accessToken) {\n  return async function (dispatch, getState) {\n    const { otp } = getState()\n    const { otp_middleware: otpMiddleware = null } = otp.config.persistence\n\n    if (otpMiddleware) {\n      const { data: trips, status: fetchStatus } = await getTrips(otpMiddleware, accessToken)\n      if (fetchStatus === 'success') {\n        dispatch(setCurrentUserMonitoredTrips(trips))\n      }\n    }\n  }\n}\n\n/**\n * Fetches user preferences to state.user, or set initial values under state.user if no user has been loaded.\n */\nexport function fetchOrInitializeUser (auth) {\n  return async function (dispatch, getState) {\n    const { otp } = getState()\n    const { otp_middleware: otpMiddleware = null } = otp.config.persistence\n\n    if (otpMiddleware) {\n      const { accessToken, user: authUser } = auth\n      const { data: user, status: fetchUserStatus } = await fetchUser(otpMiddleware, accessToken)\n\n      // Beware! On AWS API gateway, if a user is not found in the middleware\n      // (e.g. they just created their Auth0 password but have not completed the account setup form yet),\n      // the call above will return, for example:\n      // {\n      //    status: 'success',\n      //    data: {\n      //      \"result\": \"ERR\",\n      //      \"message\": \"No user with id=000000 found.\",\n      //      \"code\": 404,\n      //      \"detail\": null\n      //    }\n      // }\n      //\n      // The same call to a middleware instance that is not behind an API gateway\n      // will return:\n      // {\n      //    status: 'error',\n      //    message: 'Error get-ing user...'\n      // }\n      // TODO: Improve AWS response.\n\n      const isNewAccount = fetchUserStatus === 'error' || (user && user.result === 'ERR')\n      if (!isNewAccount) {\n        // Load user's monitored trips before setting the user state.\n        await dispatch(fetchUserMonitoredTrips(accessToken))\n\n        dispatch(setCurrentUser({ accessToken, user }))\n      } else {\n        dispatch(setCurrentUser({ accessToken, user: createNewUser(authUser) }))\n      }\n    }\n  }\n}\n\n/**\n * Updates (or creates) a user entry in the middleware,\n * then, if that was successful, updates the redux state with that user.\n */\nexport function createOrUpdateUser (userData) {\n  return async function (dispatch, getState) {\n    const { otp, user } = getState()\n    const { otp_middleware: otpMiddleware = null } = otp.config.persistence\n\n    if (otpMiddleware) {\n      const { accessToken, loggedInUser } = user\n\n      let result\n      if (isNewUser(loggedInUser)) {\n        result = await addUser(otpMiddleware, accessToken, userData)\n      } else {\n        result = await updateUser(otpMiddleware, accessToken, userData)\n      }\n\n      // TODO: improve the UI feedback messages for this.\n      if (result.status === 'success' && result.data) {\n        alert('Your preferences have been saved.')\n\n        // Update application state with the user entry as saved\n        // (as returned) by the middleware.\n        const userData = result.data\n        dispatch(setCurrentUser({ accessToken, user: userData }))\n      } else {\n        alert(`An error was encountered:\\n${JSON.stringify(result)}`)\n      }\n    }\n  }\n}\n\n/**\n * Updates a logged-in user's monitored trip,\n * then, if that was successful, alerts (optional)\n * and refreshes the redux monitoredTrips with the updated trip.\n */\nexport function createOrUpdateUserMonitoredTrip (tripData, isNew, silentOnSuccess) {\n  return async function (dispatch, getState) {\n    const { otp, user } = getState()\n    const { otp_middleware: otpMiddleware = null } = otp.config.persistence\n\n    if (otpMiddleware) {\n      const { accessToken } = user\n\n      let result\n      if (isNew) {\n        result = await addTrip(otpMiddleware, accessToken, tripData)\n      } else {\n        result = await updateTrip(otpMiddleware, accessToken, tripData)\n      }\n\n      // TODO: improve the UI feedback messages for this.\n      if (result.status === 'success' && result.data) {\n        if (!silentOnSuccess) {\n          alert('Your preferences have been saved.')\n        }\n\n        // Reload user's monitored trips after add/update.\n        await dispatch(fetchUserMonitoredTrips(accessToken))\n      } else {\n        alert(`An error was encountered:\\n${JSON.stringify(result)}`)\n      }\n    }\n  }\n}\n\n/**\n * Deletes a logged-in user's monitored trip,\n * then, if that was successful, refreshes the redux monitoredTrips state.\n */\nexport function deleteUserMonitoredTrip (id) {\n  return async function (dispatch, getState) {\n    const { otp, user } = getState()\n    const { otp_middleware: otpMiddleware = null } = otp.config.persistence\n\n    if (otpMiddleware) {\n      const { accessToken } = user\n      const deleteResult = await deleteTrip(otpMiddleware, accessToken, id)\n\n      if (deleteResult.status === 'success') {\n        // Reload user's monitored trips after deletion.\n        await dispatch(fetchUserMonitoredTrips(accessToken))\n      } else {\n        alert(`An error was encountered:\\n${JSON.stringify(deleteResult)}`)\n      }\n    }\n  }\n}\n"]}