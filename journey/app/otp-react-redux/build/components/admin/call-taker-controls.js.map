{"version":3,"sources":["call-taker-controls.js"],"names":["RED","BLUE","GREEN","CallTakerControls","_callInProgress","props","endCall","beginCall","marginLeft","position","marginTop","toggleCallHistory","Boolean","activeCall","nextProps","session","fetchCalls","circleButtonStyle","zIndex","color","borderRadius","border","boxShadow","top","backgroundColor","height","width","_onClickCall","_renderCallButton","display","fontWeight","textAlign","_onToggleCallHistory","Component","mapStateToProps","state","ownProps","callTaker","callTakerActions","mapDispatchToProps","routingQuery","setMainPanelContent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport * as callTakerActions from '../../actions/call-taker'\nimport { routingQuery } from '../../actions/api'\nimport { setMainPanelContent } from '../../actions/ui'\nimport CallTimeCounter from './call-time-counter'\nimport Icon from '../narrative/icon'\n\nconst RED = '#C35134'\nconst BLUE = '#1C4D89'\nconst GREEN = '#6B931B'\n\n/**\n * This component displays the controls for the Call Taker/Field Trip modules,\n * including:\n *  - start/end call button\n *  - view call list\n *  TODO\n *  - view field trip list\n */\nclass CallTakerControls extends Component {\n  componentWillReceiveProps (nextProps) {\n    const {session} = nextProps\n    // Once session is available, fetch calls.\n    if (session && !this.props.session) {\n      this.props.fetchCalls()\n    }\n  }\n\n  _onClickCall = () => {\n    if (this._callInProgress()) this.props.endCall()\n    else this.props.beginCall()\n  }\n\n  _renderCallButton = () => {\n    // Show stop button if call not in progress.\n    if (this._callInProgress()) {\n      return (\n        <Icon type='stop' style={{marginLeft: '3px'}} className='fa-3x' />\n      )\n    }\n    // No call is in progress.\n    return (\n      <>\n        <Icon\n          type='plus'\n          style={{\n            position: 'absolute',\n            marginLeft: '17px',\n            marginTop: '6px'\n          }} />\n        <Icon type='phone' className='fa-4x fa-flip-horizontal' />\n      </>\n    )\n  }\n\n  _onToggleCallHistory = () => this.props.toggleCallHistory()\n\n  _callInProgress = () => Boolean(this.props.activeCall)\n\n  render () {\n    const {session} = this.props\n    // If no valid session is found, do not show calltaker controls.\n    if (!session) return null\n    // FIXME: styled component\n    const circleButtonStyle = {\n      position: 'absolute',\n      zIndex: 999999,\n      color: 'white',\n      borderRadius: '50%',\n      border: 'none',\n      boxShadow: '2px 2px 4px #000000'\n    }\n    return (\n      <>\n        {/* Start/End Call button */}\n        <button\n          style={{\n            ...circleButtonStyle,\n            top: '154px',\n            backgroundColor: this._callInProgress() ? RED : BLUE,\n            height: '80px',\n            width: '80px',\n            marginLeft: '-8px'\n\n          }}\n          className='call-taker-button'\n          onClick={this._onClickCall}\n        >\n          {this._renderCallButton()}\n        </button>\n        {this._callInProgress()\n          ? <CallTimeCounter style={{\n            display: 'inline',\n            position: 'absolute',\n            zIndex: 999999,\n            top: '241px',\n            borderRadius: '20px',\n            backgroundColor: BLUE,\n            boxShadow: '2px 2px 4px #000000',\n            color: 'white',\n            fontWeight: '600',\n            textAlign: 'center',\n            width: '80px',\n            marginLeft: '-8px'\n          }} />\n          : null\n        }\n        {/* Call History toggle button */}\n        <button\n          style={{\n            ...circleButtonStyle,\n            top: '140px',\n            backgroundColor: GREEN,\n            height: '40px',\n            width: '40px',\n            marginLeft: '69px'\n\n          }}\n          className='call-taker-button'\n          onClick={this._onToggleCallHistory}\n        >\n          <Icon type='history' className='fa-2x' style={{marginLeft: '-3px'}} />\n        </button>\n        {/* Field Trip toggle button TODO */}\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    activeCall: state.callTaker.activeCall,\n    session: state.callTaker.session\n  }\n}\n\nconst {beginCall, endCall, fetchCalls, toggleCallHistory} = callTakerActions\n\nconst mapDispatchToProps = {\n  beginCall,\n  endCall,\n  fetchCalls,\n  routingQuery,\n  setMainPanelContent,\n  toggleCallHistory\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CallTakerControls)\n"]}