{"version":3,"sources":["call-time-counter.js"],"names":["CallTimeCounter","counterString","seconds","date","Date","setSeconds","toISOString","substr","state","setState","timer","window","setInterval","_refreshCounter","clearInterval","_startRefresh","_stopRefresh","props","className","style","_formatSeconds","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;IAIqBA,e;;;;;;;;;;;;;;;;4DACX;AACNC,MAAAA,aAAa,EAAE;AADT,K;;qEAeS,UAACC,OAAD,EAAa;AAC5B,UAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAAT,CAAb;AACAD,MAAAA,IAAI,CAACE,UAAL,CAAgBH,OAAhB;AACA,aAAOC,IAAI,CAACG,WAAL,GAAmBC,MAAnB,CAA0B,EAA1B,EAA8B,CAA9B,CAAP;AACD,K;;sEAEiB,YAAM;AACtB,UAAMN,aAAa,GAAG,MAAKO,KAAL,CAAWP,aAAX,GAA2B,CAAjD;;AACA,YAAKQ,QAAL,CAAc;AAACR,QAAAA,aAAa,EAAbA;AAAD,OAAd;AACD,K;;oEAEe,YAAM;AACpB;AACA,UAAMS,KAAK,GAAGC,MAAM,CAACC,WAAP,CAAmB,MAAKC,eAAxB,EAAyC,IAAzC,CAAd;;AACA,YAAKJ,QAAL,CAAc;AAAEC,QAAAA,KAAK,EAALA;AAAF,OAAd;AACD,K;;mEAEc,YAAM;AACnBC,MAAAA,MAAM,CAACG,aAAP,CAAqB,MAAKN,KAAL,CAAWE,KAAhC;AACD,K;;;;;;;wCA9BoB;AACnB,WAAKK,aAAL;AACD;;;2CAEuB;AACtB,WAAKC,YAAL;AACD;AAED;;;;;;6BAwBU;AAAA,wBACmB,KAAKC,KADxB;AAAA,UACDC,SADC,eACDA,SADC;AAAA,UACUC,KADV,eACUA,KADV;AAER,0BACE;AAAK,QAAA,SAAS,EAAED,SAAhB;AAA2B,QAAA,KAAK,EAAEC;AAAlC,SACG,KAAKC,cAAL,CAAoB,KAAKZ,KAAL,CAAWP,aAA/B,CADH,CADF;AAKD;;;;EA5C0CoB,gB","sourcesContent":["// import moment from 'moment'\nimport React, { Component } from 'react'\n\n/**\n * Component that displays the call time (ticking with each second)\n * for an active call (assumes that mount time corresponds with call start).\n */\nexport default class CallTimeCounter extends Component {\n  state = {\n    counterString: 0\n  }\n\n  componentDidMount () {\n    this._startRefresh()\n  }\n\n  componentWillUnmount () {\n    this._stopRefresh()\n  }\n\n  /**\n   * Formats seconds as hh:mm:ss string.\n   */\n  _formatSeconds = (seconds) => {\n    const date = new Date(0)\n    date.setSeconds(seconds)\n    return date.toISOString().substr(11, 8)\n  }\n\n  _refreshCounter = () => {\n    const counterString = this.state.counterString + 1\n    this.setState({counterString})\n  }\n\n  _startRefresh = () => {\n    // Set refresh to every second.\n    const timer = window.setInterval(this._refreshCounter, 1000)\n    this.setState({ timer })\n  }\n\n  _stopRefresh = () => {\n    window.clearInterval(this.state.timer)\n  }\n\n  render () {\n    const {className, style} = this.props\n    return (\n      <div className={className} style={style}>\n        {this._formatSeconds(this.state.counterString)}\n      </div>\n    )\n  }\n}\n"]}