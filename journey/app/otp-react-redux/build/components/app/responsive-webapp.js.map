{"version":3,"sources":["responsive-webapp.js"],"names":["isMobile","coreUtils","ui","ResponsiveWebapp","Component","componentDidUpdate","prevProps","currentPosition","location","query","title","props","document","urlParams","getUrlParams","newSearchId","ui_activeSearch","replanningTrip","activeSearchId","formChanged","error","coords","pt","lat","latitude","lon","longitude","from","setLocationToCurrent","locationType","setMapCenter","initZoomOnLocate","setMapZoom","zoom","pathname","matchContentToUrl","componentDidMount","window","addEventListener","handleBackButtonPress","getCurrentPosition","navigator","geolocation","watchPosition","position","receivedPositionResponse","console","log","enableHighAccuracy","search","parseUrlQueryString","initializeModules","componentWillUnmount","removeEventListener","render","desktopView","mobileView","PropTypes","element","number","object","mapStateToProps","state","ownProps","activeItinerary","otp","currentQuery","searches","mobileScreen","config","map","modeGroups","mapDispatchToProps","formActions","locationActions","uiActions","callTakerActions","mapActions","configActions","history","WebappWithRouter","RouterWrapperWithAuth0","routerProps","auth0Config","processSignIn","routerConfig","showAccessTokenError","showLoginError","router","basename","_combineProps","SavedTripList","AUTH0_AUDIENCE","clientId","domain","BeforeSignInScreen","URL_ROOT","AUTH0_SCOPE","mapStateToWrapperProps","persistence","reactRouter","mapWrapperDispatchToProps","authActions"],"mappings":"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","sourcesContent":["import { ConnectedRouter } from 'connected-react-router'\nimport { createHashHistory } from 'history'\nimport isEqual from 'lodash.isequal'\nimport coreUtils from '@opentripplanner/core-utils'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Route, Switch, withRouter } from 'react-router'\nimport { Auth0Provider } from 'use-auth0-hooks'\n\nimport PrintLayout from './print-layout'\nimport * as authActions from '../../actions/auth'\nimport * as callTakerActions from '../../actions/call-taker'\nimport * as configActions from '../../actions/config'\nimport * as formActions from '../../actions/form'\nimport * as locationActions from '../../actions/location'\nimport * as mapActions from '../../actions/map'\nimport * as uiActions from '../../actions/ui'\nimport { getAuth0Config } from '../../util/auth'\nimport { AUTH0_AUDIENCE, AUTH0_SCOPE, URL_ROOT } from '../../util/constants'\nimport { getActiveItinerary, getTitle } from '../../util/state'\nimport AfterSignInScreen from '../user/after-signin-screen'\nimport BeforeSignInScreen from '../user/before-signin-screen'\nimport SavedTripList from '../user/saved-trip-list'\nimport SavedTripScreen from '../user/saved-trip-screen'\nimport UserAccountScreen from '../user/user-account-screen'\nimport withLoggedInUserSupport from '../user/with-logged-in-user-support'\n\nconst { isMobile } = coreUtils.ui\n\nclass ResponsiveWebapp extends Component {\n  static propTypes = {\n    desktopView: PropTypes.element,\n    initZoomOnLocate: PropTypes.number,\n    mobileView: PropTypes.element,\n    query: PropTypes.object\n  }\n\n  /** Lifecycle methods **/\n\n  componentDidUpdate (prevProps) {\n    const { currentPosition, location, query, title } = this.props\n    document.title = title\n    const urlParams = coreUtils.query.getUrlParams()\n    const newSearchId = urlParams.ui_activeSearch\n    // Determine if trip is being replanned by checking the active search ID\n    // against the ID found in the URL params. If they are different, a new one\n    // has been routed to (see handleBackButtonPress) and there is no need to\n    // trigger a form change because necessarily the query will be different\n    // from the previous query.\n    const replanningTrip = newSearchId && this.props.activeSearchId && newSearchId !== this.props.activeSearchId\n    if (!isEqual(prevProps.query, query) && !replanningTrip) {\n      // Trigger on form change action if previous query is different from\n      // current one AND trip is not being replanned already. This will\n      // determine whether a search needs to be made, the mobile view needs\n      // updating, etc.\n      this.props.formChanged(prevProps.query, query)\n    }\n\n    // check if device position changed (typically only set once, on initial page load)\n    if (currentPosition !== prevProps.currentPosition) {\n      if (currentPosition.error || !currentPosition.coords) return\n      const pt = {\n        lat: currentPosition.coords.latitude,\n        lon: currentPosition.coords.longitude\n      }\n\n      // if in mobile mode and from field is not set, use current location as from and recenter map\n      if (isMobile() && this.props.query.from === null) {\n        this.props.setLocationToCurrent({ locationType: 'from' })\n        this.props.setMapCenter(pt)\n        if (this.props.initZoomOnLocate) {\n          this.props.setMapZoom({ zoom: this.props.initZoomOnLocate })\n        }\n      }\n    }\n    // If the path changes (e.g., via a back button press) check whether the\n    // main content needs to switch between, for example, a viewer and a search.\n    if (!isEqual(location.pathname, prevProps.location.pathname)) {\n      // console.log('url changed to', location.pathname)\n      this.props.matchContentToUrl(location)\n    }\n    // Check for change between ITINERARY and PROFILE routingTypes\n    // TODO: restore this for profile mode\n    /* if (query.routingType !== nextProps.query.routingType) {\n      let queryModes = nextProps.query.mode.split(',')\n      // If we are entering 'ITINERARY' mode, ensure that one and only one access mode is selected\n      if (nextProps.query.routingType === 'ITINERARY') {\n        queryModes = ensureSingleAccessMode(queryModes)\n        this.props.setQueryParam({ mode: queryModes.join(',') })\n      }\n      // If we are entering 'PROFILE' mode, ensure that CAR_HAIL is not selected\n      // TODO: make this more generic, i.e. introduce concept of mode->routingType permissions\n      if (nextProps.query.routingType === 'ITINERARY') {\n        queryModes = queryModes.filter(mode => mode !== 'CAR_HAIL')\n        this.props.setQueryParam({ mode: queryModes.join(',') })\n      }\n    } */\n  }\n\n  componentDidMount () {\n    // Add on back button press behavior.\n    window.addEventListener('popstate', this.props.handleBackButtonPress)\n    const { location, title } = this.props\n    document.title = title\n    if (isMobile()) {\n      // If on mobile browser, check position on load\n      this.props.getCurrentPosition()\n\n      // Also, watch for changes in position on mobile\n      navigator.geolocation.watchPosition(\n        // On success\n        position => { this.props.receivedPositionResponse({ position }) },\n        // On error\n        error => { console.log('error in watchPosition', error) },\n        // Options\n        { enableHighAccuracy: true }\n      )\n    }\n    // Handle routing to a specific part of the app (e.g. stop viewer) on page\n    // load. (This happens prior to routing request in case special routerId is\n    // set from URL.)\n    this.props.matchContentToUrl(this.props.location)\n    if (location && location.search) {\n      // Set search params and $_plan_trip_$ if routing enabled and a query exists\n      // in the URL.\n      this.props.parseUrlQueryString()\n    }\n    // Initialize call taker/field trip modules (check for valid auth session).\n    this.props.initializeModules()\n  }\n\n  componentWillUnmount () {\n    // Remove on back button press listener.\n    window.removeEventListener('popstate', this.props.handleBackButtonPress)\n  }\n\n  render () {\n    const { desktopView, mobileView } = this.props\n    return isMobile() ? mobileView : desktopView\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const title = getTitle(state)\n  return {\n    activeItinerary: getActiveItinerary(state.otp),\n    activeSearchId: state.otp.activeSearchId,\n    currentPosition: state.otp.location.currentPosition,\n    query: state.otp.currentQuery,\n    searches: state.otp.searches,\n    mobileScreen: state.otp.ui.mobileScreen,\n    initZoomOnLocate: state.otp.config.map && state.otp.config.map.initZoomOnLocate,\n    modeGroups: state.otp.config.modeGroups,\n    title\n  }\n}\n\nconst mapDispatchToProps = {\n  formChanged: formActions.formChanged,\n  getCurrentPosition: locationActions.getCurrentPosition,\n  handleBackButtonPress: uiActions.handleBackButtonPress,\n  initializeModules: callTakerActions.initializeModules,\n  matchContentToUrl: uiActions.matchContentToUrl,\n  parseUrlQueryString: formActions.parseUrlQueryString,\n  receivedPositionResponse: locationActions.receivedPositionResponse,\n  setLocationToCurrent: mapActions.setLocationToCurrent,\n  setMapCenter: configActions.setMapCenter,\n  setMapZoom: configActions.setMapZoom\n}\n\nconst history = createHashHistory()\n\nconst WebappWithRouter = withRouter(\n  withLoggedInUserSupport(\n    connect(mapStateToProps, mapDispatchToProps)(ResponsiveWebapp)\n  )\n)\n\n/**\n * The routing component for the application.\n * This is the top-most \"standard\" component,\n * and we initialize the Auth0Provider here\n * so that Auth0 services are available everywhere.\n */\nclass RouterWrapperWithAuth0 extends Component {\n  /**\n   * Combine the router props with the other props that get\n   * passed to the exported component. This way, it is possible for\n   * the PrintLayout, UserAccountScreen, and other components to\n   * receive the LegIcon or other needed props.\n   */\n  _combineProps = routerProps => {\n    return { ...this.props, ...routerProps }\n  }\n\n  render () {\n    const {\n      auth0Config,\n      processSignIn,\n      routerConfig,\n      showAccessTokenError,\n      showLoginError\n    } = this.props\n\n    const router = (\n      <ConnectedRouter\n        basename={routerConfig && routerConfig.basename}\n        history={history}>\n        <div>\n          <Switch>\n            <Route\n              exact\n              path={[\n                // App root\n                '/',\n                // Load app with preset lat/lon/zoom and optional router\n                // NOTE: All params will be cast to :id in matchContentToUrl due\n                // to a quirk with react-router.\n                // https://github.com/ReactTraining/react-router/issues/5870#issuecomment-394194338\n                '/@/:latLonZoomRouter',\n                '/start/:latLonZoomRouter',\n                // Route viewer (and route ID).\n                '/route',\n                '/route/:id',\n                // Stop viewer (and stop ID).\n                '/stop',\n                '/stop/:id'\n              ]}\n              render={() => <WebappWithRouter {...this.props} />}\n            />\n            <Route\n              // This route lets new or existing users edit or set up their account.\n              path={'/account'}\n              component={routerProps => {\n                const props = this._combineProps(routerProps)\n                return <UserAccountScreen {...props} />\n              }}\n            />\n            <Route\n              path={'/savetrip'}\n              component={(routerProps) => {\n                const props = this._combineProps(routerProps)\n                return <SavedTripScreen isCreating {...props} />\n              }}\n            />\n            <Route\n              path={'/savedtrips/:id'}\n              component={(routerProps) => {\n                const props = this._combineProps(routerProps)\n                return <SavedTripScreen {...props} />\n              }}\n            />\n            <Route\n              path={'/savedtrips'}\n              component={SavedTripList}\n            />\n            <Route\n              // This route is called immediately after login by Auth0\n              // and by the onRedirectCallback function from /lib/util/auth.js.\n              // For new users, it displays the account setup form.\n              // For existing users, it takes the browser back to the itinerary search prior to login.\n              path={'/signedin'}\n              component={routerProps => {\n                const props = this._combineProps(routerProps)\n                return <AfterSignInScreen {...props} />\n              }}\n            />\n            <Route\n              path='/print'\n              component={routerProps => {\n                const props = this._combineProps(routerProps)\n                return <PrintLayout {...props} />\n              }}\n            />\n            {/* For any other route, simply return the web app. */}\n            <Route\n              render={() => <WebappWithRouter {...this.props} />}\n            />\n          </Switch>\n        </div>\n      </ConnectedRouter>\n    )\n\n    return (\n      auth0Config\n        ? (\n          <Auth0Provider\n            audience={AUTH0_AUDIENCE}\n            clientId={auth0Config.clientId}\n            domain={auth0Config.domain}\n            onAccessTokenError={showAccessTokenError}\n            onLoginError={showLoginError}\n            onRedirectCallback={processSignIn}\n            onRedirecting={BeforeSignInScreen}\n            redirectUri={URL_ROOT}\n            scope={AUTH0_SCOPE}\n          >\n            {router}\n          </Auth0Provider>\n        )\n        : router\n    )\n  }\n}\n\nconst mapStateToWrapperProps = (state, ownProps) => ({\n  auth0Config: getAuth0Config(state.otp.config.persistence),\n  routerConfig: state.otp.config.reactRouter\n})\n\nconst mapWrapperDispatchToProps = {\n  processSignIn: authActions.processSignIn,\n  showAccessTokenError: authActions.showAccessTokenError,\n  showLoginError: authActions.showLoginError\n}\n\nexport default connect(mapStateToWrapperProps, mapWrapperDispatchToProps)(RouterWrapperWithAuth0)\n"]}