{"version":3,"sources":["error-message.js"],"names":["ErrorMessage","Component","render","error","errorMessages","currentQuery","props","message","msg","msgConfig","find","m","id","modes","mode","includes","PropTypes","object","mapStateToProps","state","ownProps","activeSearch","otp","response","config","mapDispatchToProps","dispatch"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;AAEA,MAAMA,YAAN,SAA2BC,gBAA3B,CAAqC;AAKnCC,EAAAA,MAAM,GAAI;AACR,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,aAAT;AAAwBC,MAAAA;AAAxB,QAAyC,KAAKC,KAApD;AACA,QAAI,CAACH,KAAL,EAAY,OAAO,IAAP;AAEZ,QAAII,OAAO,GAAGJ,KAAK,CAACK,GAApB,CAJQ,CAKR;;AACA,QAAIJ,aAAJ,EAAmB;AACjB,YAAMK,SAAS,GAAGL,aAAa,CAACM,IAAd,CAAmBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAAST,KAAK,CAACS,EAAvC,CAAlB;;AACA,UAAIH,SAAJ,EAAe;AACb,YAAIA,SAAS,CAACI,KAAd,EAAqB;AACnB,eAAK,MAAMC,IAAX,IAAmBL,SAAS,CAACI,KAA7B,EAAoC;AAClC,gBAAIR,YAAY,CAACS,IAAb,CAAkBC,QAAlB,CAA2BD,IAA3B,CAAJ,EAAsC;AACpCP,cAAAA,OAAO,GAAGE,SAAS,CAACD,GAApB;AACA;AACD;AACF;AACF,SAPD,MAOOD,OAAO,GAAGE,SAAS,CAACD,GAApB;AACR;AACF;;AAED,wBACE;AAAK,MAAA,SAAS,EAAC;AAAf,oBACE;AAAK,MAAA,SAAS,EAAC;AAAf,oBACE;AAAG,MAAA,SAAS,EAAC;AAAb,MADF,6BADF,eAIE;AAAK,MAAA,SAAS,EAAC;AAAf,OAA0BD,OAA1B,CAJF,eAKE,6BAAC,kBAAD;AAAW,MAAA,WAAW,EAAE,CAAC,YAAD,EAAe,cAAf;AAAxB,MALF,CADF;AASD;;AAlCkC,C,CAqCrC;;;gBArCMP,Y,eACe;AACjBG,EAAAA,KAAK,EAAEa,mBAAUC;AADA,C;;AAsCrB,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,QAAMC,YAAY,GAAG,4BAAgBF,KAAK,CAACG,GAAtB,CAArB;AACA,SAAO;AACLnB,IAAAA,KAAK,EAAEkB,YAAY,IAAIA,YAAY,CAACE,QAA7B,IAAyCF,YAAY,CAACE,QAAb,CAAsBpB,KADjE;AAELE,IAAAA,YAAY,EAAEc,KAAK,CAACG,GAAN,CAAUjB,YAFnB;AAGLD,IAAAA,aAAa,EAAEe,KAAK,CAACG,GAAN,CAAUE,MAAV,CAAiBpB;AAH3B,GAAP;AAKD,CAPD;;AASA,MAAMqB,kBAAkB,GAAG,CAACC,QAAD,EAAWN,QAAX,KAAwB;AACjD,SAAO,EAAP;AACD,CAFD;;eAIe,yBAAQF,eAAR,EAAyBO,kBAAzB,EAA6CzB,YAA7C,C","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport TripTools from '../narrative/trip-tools'\n\nimport { getActiveSearch } from '../../util/state'\n\nclass ErrorMessage extends Component {\n  static propTypes = {\n    error: PropTypes.object\n  }\n\n  render () {\n    const { error, errorMessages, currentQuery } = this.props\n    if (!error) return null\n\n    let message = error.msg\n    // check for configuration-defined message override\n    if (errorMessages) {\n      const msgConfig = errorMessages.find(m => m.id === error.id)\n      if (msgConfig) {\n        if (msgConfig.modes) {\n          for (const mode of msgConfig.modes) {\n            if (currentQuery.mode.includes(mode)) {\n              message = msgConfig.msg\n              break\n            }\n          }\n        } else message = msgConfig.msg\n      }\n    }\n\n    return (\n      <div className='error-message'>\n        <div className='header'>\n          <i className='fa fa-exclamation-circle' /> Could Not $_plan_trip_$\n        </div>\n        <div className='message'>{message}</div>\n        <TripTools buttonTypes={['START_OVER', 'REPORT_ISSUE']} />\n      </div>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const activeSearch = getActiveSearch(state.otp)\n  return {\n    error: activeSearch && activeSearch.response && activeSearch.response.error,\n    currentQuery: state.otp.currentQuery,\n    errorMessages: state.otp.config.errorMessages\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ErrorMessage)\n"]}