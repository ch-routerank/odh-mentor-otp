{"version":3,"sources":["intermediate-place-field.js"],"names":["StyledIntermediatePlace","LocationField","DropdownContainer","FormGroup","Input","InputGroup","InputGroupAddon","MenuItemA","IntermediatePlaceField","Component","index","location","onLocationCleared","props","render","_removeIntermediatePlace","mapStateToProps","state","ownProps","config","transitIndex","user","otp","currentPosition","nearbyStops","sessionSearches","geocoderConfig","geocoder","showUserSettings","stopsIndex","stops","userLocationsAndRecentPlaces","locations","recentPlaces","mapDispatchToProps","addLocationSearch","findNearbyStops","getCurrentPosition","clearLocation"],"mappings":";;;;;;;;;AAAA;;AACA;;AAQA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;AAEA,MAAMA,uBAAuB,GAAG,+BAAOC,sBAAP,CAAsB;AACtD;AACA;AACA,IAAIC,yBAAkB;AACtB;AACA;AACA;AACA;AACA;AACA,IAAIC,iBAAU;AACd;AACA;AACA;AACA;AACA;AACA,IAAIC,aAAM;AACV;AACA;AACA;AACA;AACA;AACA,IAAIC,kBAAW;AACf;AACA;AACA;AACA,IAAIC,uBAAgB;AACpB;AACA;AACA;AACA;AACA;AACA,IAAIC,iBAAU;AACd;AACA;AACA;AACA,IAAIA,iBAAU;AACd;AACA;AACA,CAtCA;AAwCA;AACA;AACA;AACA;AACA;;AACA,MAAMC,sBAAN,SAAqCC,gBAArC,CAA+C;AAAA;AAAA;;AAAA,sDAClB,MAAM;AAC/B,YAAM;AAACC,QAAAA,KAAD;AAAQC,QAAAA,QAAR;AAAkBC,QAAAA;AAAlB,UAAuC,KAAKC,KAAlD;AACAD,MAAAA,iBAAiB,IAAIA,iBAAiB,CAAC;AAACD,QAAAA,QAAD;AAAWD,QAAAA;AAAX,OAAD,CAAtC;AACD,KAJ4C;AAAA;;AAM7CI,EAAAA,MAAM,GAAI;AACR,UAAM;AAACJ,MAAAA;AAAD,QAAU,KAAKG,KAArB;AACA,wBACE,6BAAC,uBAAD,eACM,KAAKA,KADX;AAEE,MAAA,YAAY,EAAG,sBAAqBH,KAAM,EAF5C;AAGE,MAAA,aAAa,EAAE,KAAKK;AAHtB,OADF;AAMD;;AAd4C,C,CAiB/C;;;AAEA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,QAAM;AAAEC,IAAAA,MAAF;AAAUR,IAAAA,QAAV;AAAoBS,IAAAA,YAApB;AAAkCC,IAAAA;AAAlC,MAA2CJ,KAAK,CAACK,GAAvD;AACA,QAAM;AAAEC,IAAAA,eAAF;AAAmBC,IAAAA,WAAnB;AAAgCC,IAAAA;AAAhC,MAAoDd,QAA1D;AACA,SAAO;AACLY,IAAAA,eADK;AAELG,IAAAA,cAAc,EAAEP,MAAM,CAACQ,QAFlB;AAGLH,IAAAA,WAHK;AAILC,IAAAA,eAJK;AAKLG,IAAAA,gBAAgB,EAAE,gCAAoBX,KAAK,CAACK,GAA1B,CALb;AAMLO,IAAAA,UAAU,EAAET,YAAY,CAACU,KANpB;AAOLC,IAAAA,4BAA4B,EAAE,CAAC,GAAGV,IAAI,CAACW,SAAT,EAAoB,GAAGX,IAAI,CAACY,YAA5B;AAPzB,GAAP;AASD,CAZD;;AAcA,MAAMC,kBAAkB,GAAG;AACzBC,EAAAA,iBAAiB,EAAjBA,2BADyB;AAEzBC,EAAAA,eAAe,EAAfA,oBAFyB;AAGzBC,EAAAA,kBAAkB,EAAlBA,4BAHyB;AAIzBC,EAAAA,aAAa,EAAbA;AAJyB,CAA3B;;eAOe,yBAAQtB,eAAR,EAAyBkB,kBAAzB,EAA6C1B,sBAA7C,C","sourcesContent":["import LocationField from '@opentripplanner/location-field'\nimport {\n  DropdownContainer,\n  FormGroup,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  MenuItemA\n} from '@opentripplanner/location-field/lib/styled'\nimport React, {Component} from 'react'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\n\nimport { clearLocation } from '../../actions/map'\nimport { addLocationSearch, getCurrentPosition } from '../../actions/location'\nimport { findNearbyStops } from '../../actions/api'\nimport { getShowUserSettings } from '../../util/state'\n\nconst StyledIntermediatePlace = styled(LocationField)`\n  width: 100%;\n\n  ${DropdownContainer} {\n    display: table-cell;\n    vertical-align: middle;\n    width: 1%;\n  }\n\n  ${FormGroup} {\n    display: table;\n    padding: 6px 12px;\n    width: 100%;\n  }\n\n  ${Input} {\n    display: table-cell;\n    padding: 6px 12px;\n    width: 100%;\n  }\n\n  ${InputGroup} {\n    width: 100%;\n  }\n\n  ${InputGroupAddon} {\n    display: table-cell;\n    vertical-align: middle;\n    width: 1%;\n  }\n\n  ${MenuItemA} {\n    text-decoration: none;\n  }\n\n  ${MenuItemA}:hover {\n    color: #333;\n  }\n`\n\n/**\n * Component that leverages LocationField to allow selecting an intermediate\n * place (e.g., stopover on the way from origin to the destination).\n * TODO: move this to otp-ui?\n */\nclass IntermediatePlaceField extends Component {\n  _removeIntermediatePlace = () => {\n    const {index, location, onLocationCleared} = this.props\n    onLocationCleared && onLocationCleared({location, index})\n  }\n\n  render () {\n    const {index} = this.props\n    return (\n      <StyledIntermediatePlace\n        {...this.props}\n        locationType={`intermediate-place-${index}`}\n        clearLocation={this._removeIntermediatePlace} />\n    )\n  }\n}\n\n// connect to redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const { config, location, transitIndex, user } = state.otp\n  const { currentPosition, nearbyStops, sessionSearches } = location\n  return {\n    currentPosition,\n    geocoderConfig: config.geocoder,\n    nearbyStops,\n    sessionSearches,\n    showUserSettings: getShowUserSettings(state.otp),\n    stopsIndex: transitIndex.stops,\n    userLocationsAndRecentPlaces: [...user.locations, ...user.recentPlaces]\n  }\n}\n\nconst mapDispatchToProps = {\n  addLocationSearch,\n  findNearbyStops,\n  getCurrentPosition,\n  clearLocation\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IntermediatePlaceField)\n"]}