{"version":3,"sources":["connected-endpoints-overlay.js"],"names":["mapStateToProps","state","ownProps","activeSearch","otp","query","currentQuery","showUserSettings","from","to","places","intermediatePlaces","filter","p","fromLocation","locations","user","toLocation","visible","mapDispatchToProps","forgetPlace","rememberPlace","setLocation","clearLocation","EndpointsOverlay"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAMA;;;;AAEA;AAEA,MAAMA,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C;AACA;AACA,QAAMC,YAAY,GAAG,4BAAgBF,KAAK,CAACG,GAAtB,CAArB;AACA,QAAMC,KAAK,GAAGF,YAAY,GAAGA,YAAY,CAACE,KAAhB,GAAwBJ,KAAK,CAACG,GAAN,CAAUE,YAA5D;AACA,QAAMC,gBAAgB,GAAG,gCAAoBN,KAAK,CAACG,GAA1B,CAAzB;AACA,QAAM;AAAEI,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAeJ,KAArB,CAN2C,CAO3C;AACA;;AACA,QAAMK,MAAM,GAAGT,KAAK,CAACG,GAAN,CAAUE,YAAV,CAAuBK,kBAAvB,CAA0CC,MAA1C,CAAiDC,CAAC,IAAIA,CAAtD,CAAf;AACA,SAAO;AACLC,IAAAA,YAAY,EAAEN,IADT;AAELG,IAAAA,kBAAkB,EAAED,MAFf;AAGLK,IAAAA,SAAS,EAAEd,KAAK,CAACG,GAAN,CAAUY,IAAV,CAAeD,SAHrB;AAILR,IAAAA,gBAJK;AAKLU,IAAAA,UAAU,EAAER,EALP;AAMLS,IAAAA,OAAO,EAAE;AANJ,GAAP;AAQD,CAlBD;;AAoBA,MAAMC,kBAAkB,GAAG;AACzBC,EAAAA,WAAW,EAAXA,gBADyB;AAEzBC,EAAAA,aAAa,EAAbA,kBAFyB;AAGzBC,EAAAA,WAAW,EAAXA,gBAHyB;AAIzBC,EAAAA,aAAa,EAAbA;AAJyB,CAA3B;;eAOe,yBAAQvB,eAAR,EAAyBmB,kBAAzB,EAA6CK,yBAA7C,C","sourcesContent":["import EndpointsOverlay from '@opentripplanner/endpoints-overlay'\nimport { connect } from 'react-redux'\n\nimport {\n  clearLocation,\n  forgetPlace,\n  rememberPlace,\n  setLocation\n} from '../../actions/map'\nimport { getActiveSearch, getShowUserSettings } from '../../util/state'\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  // Use query from active search (if a search has been made) or default to\n  // current query is no search is available.\n  const activeSearch = getActiveSearch(state.otp)\n  const query = activeSearch ? activeSearch.query : state.otp.currentQuery\n  const showUserSettings = getShowUserSettings(state.otp)\n  const { from, to } = query\n  // Intermediate places doesn't trigger a re-plan, so for now default to\n  // current query. FIXME: Determine with TriMet if this is desired behavior.\n  const places = state.otp.currentQuery.intermediatePlaces.filter(p => p)\n  return {\n    fromLocation: from,\n    intermediatePlaces: places,\n    locations: state.otp.user.locations,\n    showUserSettings,\n    toLocation: to,\n    visible: true\n  }\n}\n\nconst mapDispatchToProps = {\n  forgetPlace,\n  rememberPlace,\n  setLocation,\n  clearLocation\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EndpointsOverlay)\n"]}