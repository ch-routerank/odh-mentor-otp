{"version":3,"sources":["default-map.js"],"names":["MapContainer","styled","div","DefaultMap","Component","oldQuery","newQuery","overlays","props","mode","oldModes","split","newModes","removed","filter","m","includes","added","overlayVisibility","oConfig","modes","length","overlayMode","companies","overlayCompany","name","Object","keys","updateOverlayVisibility","e","setMapPopupLocationAndGeocode","setMapPopupLocation","location","payload","setLocation","componentDidUpdate","prevProps","_handleQueryChange","query","render","bikeRentalQuery","bikeRentalStations","carRentalQuery","carRentalStations","mapConfig","mapPopupLocation","vehicleRentalQuery","vehicleRentalStations","center","initLat","initLon","popup","contents","onSetLocationFromPopup","lat","lon","baseLayers","maxZoom","onMapClick","onPopupClosed","initZoom","map","overlayConfig","k","type","mapStateToProps","state","ownProps","otp","config","overlay","bikeRental","stations","carRental","ui","currentQuery","vehicleRental","mapDispatchToProps"],"mappings":"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","sourcesContent":["import BaseMap from '@opentripplanner/base-map'\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\n\nimport {\n  bikeRentalQuery,\n  carRentalQuery,\n  vehicleRentalQuery\n} from '../../actions/api'\nimport { updateOverlayVisibility } from '../../actions/config'\nimport {\n  setLocation,\n  setMapPopupLocation,\n  setMapPopupLocationAndGeocode\n} from '../../actions/map'\nimport BoundsUpdatingOverlay from './bounds-updating-overlay'\nimport EndpointsOverlay from './connected-endpoints-overlay'\nimport ParkAndRideOverlay from './connected-park-and-ride-overlay'\nimport RouteViewerOverlay from './connected-route-viewer-overlay'\nimport StopViewerOverlay from './connected-stop-viewer-overlay'\nimport StopsOverlay from './connected-stops-overlay'\nimport TransitiveOverlay from './connected-transitive-overlay'\nimport TripViewerOverlay from './connected-trip-viewer-overlay'\nimport VehicleRentalOverlay from './connected-vehicle-rental-overlay'\nimport ElevationPointMarker from './elevation-point-marker'\nimport PointPopup from './point-popup'\nimport TileOverlay from './tile-overlay'\nimport ZipcarOverlay from './zipcar-overlay'\nimport ParkingOverlay from './parking-overlay'\n\nconst MapContainer = styled.div`\n  height: 100%;\n  width: 100%;\n\n  .map {\n    height: 100%;\n    width: 100%;\n  }\n\n  * {\n    box-sizing: unset;\n  }\n`\n\nclass DefaultMap extends Component {\n  /**\n   * Checks whether the modes have changed between old and new queries and\n   * whether to update the map overlays accordingly (e.g., to show rental vehicle\n   * options on the map).\n   */\n  _handleQueryChange = (oldQuery, newQuery) => {\n    const { overlays } = this.props\n    if (overlays && oldQuery.mode) {\n      // Determine any added/removed modes\n      const oldModes = oldQuery.mode.split(',')\n      const newModes = newQuery.mode.split(',')\n      const removed = oldModes.filter(m => !newModes.includes(m))\n      const added = newModes.filter(m => !oldModes.includes(m))\n      const overlayVisibility = {}\n      for (const oConfig of overlays) {\n        if (!oConfig.modes || oConfig.modes.length !== 1) continue\n        // TODO: support multi-mode overlays\n        const overlayMode = oConfig.modes[0]\n\n        if (\n          (\n            overlayMode === 'CAR_RENT' ||\n            overlayMode === 'CAR_HAIL' ||\n            overlayMode === 'MICROMOBILITY_RENT'\n          ) &&\n          oConfig.companies\n        ) {\n          // Special handling for company-based mode overlays (e.g. carshare, car-hail)\n          const overlayCompany = oConfig.companies[0] // TODO: handle multi-company overlays\n          if (added.includes(overlayMode)) {\n            // Company-based mode was just selected; enable overlay iff overlay's company is active\n            if (newQuery.companies.includes(overlayCompany)) overlayVisibility[oConfig.name] = true\n          } else if (removed.includes(overlayMode)) {\n            // Company-based mode was just deselected; disable overlay (regardless of company)\n            overlayVisibility[oConfig.name] = false\n          } else if (newModes.includes(overlayMode) && oldQuery.companies !== newQuery.companies) {\n            // Company-based mode remains selected but companies change\n            overlayVisibility[oConfig.name] = newQuery.companies.includes(overlayCompany)\n          }\n        } else { // Default handling for other modes\n          if (added.includes(overlayMode)) overlayVisibility[oConfig.name] = true\n          if (removed.includes(overlayMode)) overlayVisibility[oConfig.name] = false\n        }\n      }\n      // Only trigger update action if there are overlays to update.\n      if (Object.keys(overlayVisibility).length > 0) {\n        this.props.updateOverlayVisibility(overlayVisibility)\n      }\n    }\n  }\n\n  onMapClick = (e) => {\n    this.props.setMapPopupLocationAndGeocode(e)\n  }\n\n  onPopupClosed = () => {\n    this.props.setMapPopupLocation({ location: null })\n  }\n\n  onSetLocationFromPopup = (payload) => {\n    const { setLocation, setMapPopupLocation } = this.props\n    setMapPopupLocation({ location: null })\n    setLocation(payload)\n  }\n\n  componentDidUpdate (prevProps) {\n    // Check if any overlays should be toggled due to mode change\n    this._handleQueryChange(prevProps.query, this.props.query)\n  }\n\n  render () {\n    const {\n      bikeRentalQuery,\n      bikeRentalStations,\n      carRentalQuery,\n      carRentalStations,\n      mapConfig,\n      mapPopupLocation,\n      vehicleRentalQuery,\n      vehicleRentalStations\n    } = this.props\n\n    const center = mapConfig && mapConfig.initLat && mapConfig.initLon\n      ? [mapConfig.initLat, mapConfig.initLon]\n      : null\n\n    const popup = mapPopupLocation && {\n      contents: (\n        <PointPopup\n          mapPopupLocation={mapPopupLocation}\n          onSetLocationFromPopup={this.onSetLocationFromPopup}\n        />\n      ),\n      location: [mapPopupLocation.lat, mapPopupLocation.lon]\n    }\n\n    return (\n      <MapContainer>\n        <BaseMap\n          baseLayers={mapConfig.baseLayers}\n          center={center}\n          maxZoom={mapConfig.maxZoom}\n          onClick={this.onMapClick}\n          popup={popup}\n          onPopupClosed={this.onPopupClosed}\n          zoom={mapConfig.initZoom || 13}\n        >\n          {/* The default overlays */}\n          <BoundsUpdatingOverlay />\n          <EndpointsOverlay />\n          <RouteViewerOverlay />\n          <StopViewerOverlay />\n          <TransitiveOverlay />\n          <TripViewerOverlay />\n          <ElevationPointMarker />\n\n          {/* The configurable overlays */}\n          {mapConfig.overlays && mapConfig.overlays.map((overlayConfig, k) => {\n            switch (overlayConfig.type) {\n              case 'bike-rental': return (\n                <VehicleRentalOverlay\n                  key={k}\n                  {...overlayConfig}\n                  refreshVehicles={bikeRentalQuery}\n                  stations={bikeRentalStations}\n                />\n              )\n              case 'car-rental': return (\n                <VehicleRentalOverlay\n                  key={k}\n                  {...overlayConfig}\n                  refreshVehicles={carRentalQuery}\n                  stations={carRentalStations}\n                />\n              )\n              case 'park-and-ride':\n                return <ParkAndRideOverlay key={k} {...overlayConfig} />\n              case 'stops': return <StopsOverlay key={k} {...overlayConfig} />\n              case 'tile': return <TileOverlay key={k} {...overlayConfig} />\n              case 'micromobility-rental': return (\n                <VehicleRentalOverlay\n                  key={k}\n                  {...overlayConfig}\n                  refreshVehicles={vehicleRentalQuery}\n                  stations={vehicleRentalStations}\n                />\n              )\n              case 'zipcar': return <ZipcarOverlay key={k} {...overlayConfig} />\n              case 'parking': return <ParkingOverlay key={k} {...overlayConfig} />\n              default: return null\n            }\n          })}\n        </BaseMap>\n      </MapContainer>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const overlays = state.otp.config.map && state.otp.config.map.overlays\n    ? state.otp.config.map.overlays\n    : []\n  return {\n    bikeRentalStations: state.otp.overlay.bikeRental.stations,\n    carRentalStations: state.otp.overlay.carRental.stations,\n    mapConfig: state.otp.config.map,\n    mapPopupLocation: state.otp.ui.mapPopupLocation,\n    overlays,\n    query: state.otp.currentQuery,\n    vehicleRentalStations: state.otp.overlay.vehicleRental.stations\n  }\n}\n\nconst mapDispatchToProps = {\n  bikeRentalQuery,\n  carRentalQuery,\n  setLocation,\n  setMapPopupLocation,\n  setMapPopupLocationAndGeocode,\n  updateOverlayVisibility,\n  vehicleRentalQuery\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DefaultMap)\n"]}