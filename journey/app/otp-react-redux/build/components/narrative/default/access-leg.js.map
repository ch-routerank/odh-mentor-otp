{"version":3,"sources":["access-leg.js"],"names":["AccessLeg","e","props","active","leg","index","setActiveLeg","step","activeStep","setActiveStep","_onLegClick","mode","coreUtils","time","formatDuration","duration","distance","steps","map","stepIndex","stepIsActive","_onStepClick","itinerary","getStepInstructions","Component","PropTypes","number","object","func"],"mappings":"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","sourcesContent":["import coreUtils from '@opentripplanner/core-utils'\nimport { humanizeDistanceString } from '@opentripplanner/humanize-distance'\nimport PropTypes from 'prop-types'\nimport React, {Component} from 'react'\n\nimport Icon from '../icon'\nimport LegDiagramPreview from '../leg-diagram-preview'\n\n/**\n * Default access leg component for narrative itinerary.\n */\nexport default class AccessLeg extends Component {\n  static propTypes = {\n    activeStep: PropTypes.number,\n    leg: PropTypes.object,\n    setActiveLeg: PropTypes.func,\n    setActiveStep: PropTypes.func\n  }\n\n  _onLegClick = (e) => {\n    const {active, leg, index, setActiveLeg} = this.props\n    if (active) {\n      setActiveLeg(null)\n    } else {\n      setActiveLeg(index, leg)\n    }\n  }\n\n  _onStepClick (e, step, index) {\n    if (index === this.props.activeStep) {\n      this.props.setActiveStep(null)\n    } else {\n      this.props.setActiveStep(index, step)\n    }\n  }\n\n  render () {\n    const { active, activeStep, index, leg } = this.props\n    return (\n      <div\n        key={index}\n        className={`leg${active ? ' active' : ''} access-leg`}>\n        <button\n          className='header'\n          onClick={this._onLegClick}>\n          <span><Icon type={`caret-${active ? 'down' : 'right'}`} /></span>\n          <span><b>{leg.mode}</b></span>\n          {' '}\n          <span className='leg-duration'>{coreUtils.time.formatDuration(leg.duration)}</span>\n          {' '}\n          <span className='leg-distance'>({humanizeDistanceString(leg.distance)})</span>\n        </button>\n        {active &&\n          <div className='step-by-step'>\n            <div className='access-leg'>\n              {leg.steps.map((step, stepIndex) => {\n                const stepIsActive = activeStep === stepIndex\n                return (\n                  <button\n                    key={stepIndex}\n                    className={`step ${stepIsActive ? 'active' : ''}`}\n                    onClick={(e) => this._onStepClick(e, step, stepIndex)}>\n                    <span className='step-distance'>{humanizeDistanceString(step.distance)}</span>\n                    <span className='step-text'>{coreUtils.itinerary.getStepInstructions(step)}</span>\n                  </button>\n                )\n              })}\n            </div>\n          </div>\n        }\n        <LegDiagramPreview leg={leg} />\n      </div>\n    )\n  }\n}\n"]}