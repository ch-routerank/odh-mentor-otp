{"version":3,"sources":["default-itinerary.js"],"names":["coreUtils","itinerary","isBicycle","isTransit","time","formatDuration","formatTime","getItineraryDescription","primaryTransitDuration","mainMode","transitMode","legs","forEach","leg","i","duration","mode","rentedBike","toLowerCase","description","ITINERARY_ATTRIBUTES","alias","id","order","render","options","isSelected","selection","endTime","startTime","LegIcon","walkTime","width","height","display","paddingLeft","paddingBottom","DefaultItinerary","props","active","index","setVisibleItinerary","visibleItinerary","visibleNotSet","undefined","isVisible","attribute","sort","type","expanded","showRealtimeAnnotation","timeFormat","timeOptions","format","offset","getTimeZoneOffset","borderLeft","backgroundColor","_onMouseEnter","_onMouseLeave","_onHeaderClick","a","b","aSelected","_isSortingOnAttribute","bSelected","map","clear","textAlign","color","NarrativeItinerary"],"mappings":"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","sourcesContent":["import coreUtils from '@opentripplanner/core-utils'\nimport React from 'react'\n\nimport NarrativeItinerary from '../narrative-itinerary'\nimport ItineraryBody from '../line-itin/connected-itinerary-body'\nimport ItinerarySummary from './itinerary-summary'\nimport SimpleRealtimeAnnotation from '../simple-realtime-annotation'\nimport { getTotalFareAsString } from '../../../util/state'\n\nconst { isBicycle, isTransit } = coreUtils.itinerary\nconst { formatDuration, formatTime } = coreUtils.time\n\n// FIXME move to core utils\nfunction getItineraryDescription (itinerary) {\n  let primaryTransitDuration = 0\n  let mainMode = 'Walk'\n  let transitMode\n  itinerary.legs.forEach((leg, i) => {\n    const {duration, mode, rentedBike} = leg\n    if (isTransit(mode) && duration > primaryTransitDuration) {\n      // TODO: convert OTP's TRAM mode to the correct wording for Portland\n      primaryTransitDuration = duration\n      transitMode = mode.toLowerCase()\n    }\n    if (isBicycle(mode)) mainMode = 'Bike'\n    if (rentedBike) mainMode = 'Bikeshare'\n    if (mode === 'CAR') mainMode = 'Drive'\n  })\n  let description = mainMode\n  if (transitMode) description += ` verso ${transitMode}`\n  return description\n}\n\nconst ITINERARY_ATTRIBUTES = [\n  {\n    alias: 'best',\n    id: 'duration',\n    order: 0,\n    render: (itinerary, options) => formatDuration(itinerary.duration)\n  },\n  {\n    alias: 'departureTime',\n    id: 'arrivalTime',\n    order: 1,\n    render: (itinerary, options) => {\n      if (options.isSelected) {\n        if (options.selection === 'ARRIVALTIME') return formatTime(itinerary.endTime, options)\n        else return formatTime(itinerary.startTime, options)\n      }\n      return (\n        <span>\n          {formatTime(itinerary.startTime, options)}\n          â€”\n          {formatTime(itinerary.endTime, options)}\n        </span>\n      )\n    }\n  },\n  {\n    id: 'cost',\n    order: 2,\n    render: (itinerary, options) => getTotalFareAsString(itinerary)\n  },\n  {\n    id: 'walkTime',\n    order: 3,\n    render: (itinerary, options) => {\n      const leg = itinerary.legs[0]\n      const {LegIcon} = options\n      return (\n        // FIXME: For CAR mode, walk time considers driving time.\n        <span>\n          {formatDuration(itinerary.walkTime)}{' '}\n          <div style={{\n            width: '20px',\n            height: '20px',\n            display: 'inline-block',\n            paddingLeft: '2px',\n            paddingBottom: '6px'\n          }}>\n            <LegIcon leg={leg} size={5} />\n          </div>\n        </span>\n      )\n    }\n  }\n]\n\nexport default class DefaultItinerary extends NarrativeItinerary {\n  _onMouseEnter = () => {\n    const {active, index, setVisibleItinerary, visibleItinerary} = this.props\n    // Set this itinerary as visible if not already visible.\n    const visibleNotSet = visibleItinerary === null || visibleItinerary === undefined\n    const isVisible = visibleItinerary === index ||\n      (active === index && visibleNotSet)\n    if (typeof setVisibleItinerary === 'function' && !isVisible) {\n      setVisibleItinerary({index})\n    }\n  }\n\n  _onMouseLeave = () => {\n    const {index, setVisibleItinerary, visibleItinerary} = this.props\n    if (typeof setVisibleItinerary === 'function' && visibleItinerary === index) {\n      setVisibleItinerary({index: null})\n    }\n  }\n\n  _isSortingOnAttribute = (attribute) => {\n    const {sort} = this.props\n    if (sort && sort.type) {\n      const type = sort.type.toLowerCase()\n      return attribute.id.toLowerCase() === type ||\n        (attribute.alias && attribute.alias.toLowerCase() === type)\n    }\n    return false\n  }\n\n  render () {\n    const {\n      active,\n      expanded,\n      itinerary,\n      LegIcon,\n      showRealtimeAnnotation,\n      timeFormat\n    } = this.props\n    const timeOptions = {\n      format: timeFormat,\n      offset: coreUtils.itinerary.getTimeZoneOffset(itinerary)\n    }\n    return (\n      <div\n        className={`option default-itin${active ? ' active' : ''}${expanded ? ' expanded' : ''}`}\n        role='presentation'\n        // FIXME: Move style to css\n        style={{\n          borderLeft: active && !expanded ? '4px teal solid' : undefined,\n          backgroundColor: expanded ? 'white' : undefined\n        }}\n        onMouseEnter={this._onMouseEnter}\n        onMouseLeave={this._onMouseLeave}\n      >\n        <button\n          className='header'\n          // _onHeaderClick comes from super component (NarrativeItinerary).\n          onClick={this._onHeaderClick}\n        >\n          <div\n            className='title'>\n            {getItineraryDescription(itinerary)}\n          </div>\n          <ul className='list-unstyled itinerary-attributes'>\n            {ITINERARY_ATTRIBUTES\n              .sort((a, b) => {\n                const aSelected = this._isSortingOnAttribute(a)\n                const bSelected = this._isSortingOnAttribute(b)\n                if (aSelected) return -1\n                if (bSelected) return 1\n                else return a.order - b.order\n              })\n              .map(attribute => {\n                const isSelected = this._isSortingOnAttribute(attribute)\n                const options = attribute.id === 'arrivalTime' ? timeOptions : {}\n                if (isSelected) {\n                  options.isSelected = true\n                  options.selection = this.props.sort.type\n                }\n                options.LegIcon = LegIcon\n                return (\n                  <li key={attribute.id} className={`${attribute.id}${isSelected ? ' main' : ''}`}>\n                    {attribute.render(itinerary, options)}\n                  </li>\n                )\n              })\n            }\n          </ul>\n          <ItinerarySummary itinerary={itinerary} LegIcon={LegIcon} />\n          {(active && !expanded) &&\n            <small style={{clear: 'both', textAlign: 'center', display: 'block', color: 'grey'}}>\n              click to view details\n            </small>\n          }\n        </button>\n        {(active && expanded) &&\n          <>\n            {showRealtimeAnnotation && <SimpleRealtimeAnnotation />}\n            <ItineraryBody timeOptions={timeOptions} itinerary={itinerary} LegIcon={LegIcon} />\n          </>\n        }\n      </div>\n    )\n  }\n}\n"]}