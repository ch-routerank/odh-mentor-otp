{"version":3,"sources":["tnc-leg.js"],"names":["toSentenceCase","coreUtils","itinerary","formatDuration","time","isMobile","ui","TransportationNetworkCompanyLeg","Component","render","leg","legMode","LYFT_CLIENT_ID","UBER_CLIENT_ID","props","universalLinks","from","lat","lon","encodeURI","name","to","defaultTncRideTypes","tncData","label","toUpperCase","marginBottom","estimatedArrival","minCost","currencyFormatter","format","code","currency","maxCost","PropTypes","object","mapStateToProps","state","ownProps","otp","config","companies","currentQuery","tnc","mapDispatchToProps","getTransportationNetworkCompanyEtaEstimate","getTransportationNetworkCompanyRideEstimate"],"mappings":"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","sourcesContent":["import currencyFormatter from 'currency-formatter'\nimport coreUtils from '@opentripplanner/core-utils'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport {\n  getTransportationNetworkCompanyEtaEstimate,\n  getTransportationNetworkCompanyRideEstimate\n} from '../../../actions/api'\n\nconst { toSentenceCase } = coreUtils.itinerary\nconst { formatDuration } = coreUtils.time\nconst { isMobile } = coreUtils.ui\n\nclass TransportationNetworkCompanyLeg extends Component {\n  static propTypes = {\n    leg: PropTypes.object,\n    legMode: PropTypes.object\n  }\n\n  state = {}\n\n  render () {\n    const { leg, legMode, LYFT_CLIENT_ID, UBER_CLIENT_ID } = this.props\n    const universalLinks = {\n      'UBER': `https://m.uber.com/${isMobile() ? 'ul/' : ''}?client_id=${UBER_CLIENT_ID}&action=setPickup&pickup[latitude]=${leg.from.lat}&pickup[longitude]=${leg.from.lon}&pickup[nickname]=${encodeURI(leg.from.name)}&dropoff[latitude]=${leg.to.lat}&dropoff[longitude]=${leg.to.lon}&dropoff[nickname]=${encodeURI(leg.to.name)}`,\n      'LYFT': `https://lyft.com/ride?id=${defaultTncRideTypes['LYFT']}&partner=${LYFT_CLIENT_ID}&pickup[latitude]=${leg.from.lat}&pickup[longitude]=${leg.from.lon}&destination[latitude]=${leg.to.lat}&destination[longitude]=${leg.to.lon}`\n    }\n    const { tncData } = leg\n    return (\n      <div>\n        <p>* estimated travel time does not account for traffic.</p>\n        <a\n          className='btn btn-default'\n          href={universalLinks[legMode.label.toUpperCase()]}\n          style={{ marginBottom: 15 }}\n          target={isMobile() ? '_self' : '_blank'}>\n          Book Ride\n        </a>\n        {tncData && tncData.estimatedArrival\n          ? <p>ETA for a driver: {formatDuration(tncData.estimatedArrival)}</p>\n          : <p>Could not obtain eta estimate from {toSentenceCase(legMode.label)}!</p>\n        }\n        {/* tncData && tncData.travelDuration &&\n          <p>Estimated drive time: {formatDuration(tncData.travelDuration)}</p> */}\n        {tncData && tncData.minCost\n          ? <p>Estimated cost: {\n            `${currencyFormatter.format(tncData.minCost, { code: tncData.currency })} - ${currencyFormatter.format(tncData.maxCost, { code: tncData.currency })}`\n          }</p>\n          : <p>Could not obtain ride estimate from {toSentenceCase(legMode.label)}!</p>}\n        }\n      </div>\n    )\n  }\n}\n\nconst defaultTncRideTypes = {\n  'LYFT': 'lyft',\n  'UBER': 'a6eef2e1-c99a-436f-bde9-fefb9181c0b0'\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const { LYFT_CLIENT_ID, UBER_CLIENT_ID } = state.otp.config\n  return {\n    companies: state.otp.currentQuery.companies,\n    tncData: state.otp.tnc,\n    LYFT_CLIENT_ID,\n    UBER_CLIENT_ID\n  }\n}\n\nconst mapDispatchToProps = {\n  getTransportationNetworkCompanyEtaEstimate,\n  getTransportationNetworkCompanyRideEstimate\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransportationNetworkCompanyLeg)\n"]}