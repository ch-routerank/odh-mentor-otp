{"version":3,"sources":["transit-leg.js"],"names":["getMapColor","coreUtils","itinerary","formatDuration","formatTime","time","TransitLeg","Component","constructor","props","setState","expanded","state","_onLegClick","e","leg","index","active","setActiveLeg","render","LegIcon","numStops","to","stopIndex","from","routeShortName","routeLongName","headsign","realTime","startTime","backgroundColor","mode","float","stopId","formatLocation","name","tripId","_onClick","duration","clear","intermediateStops","map","s","i","alerts","alert","alertDescriptionText","alertUrl","agencyUrl","agencyName","endTime","PropTypes","object","elementType","isRequired","str","trim","toLowerCase","replace","split","includes","toUpperCase","capitalizeFirst","join","charAt","slice"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAkBC,mBAAUC,SAAlC;AACA,MAAM;AAAEC,EAAAA,cAAF;AAAkBC,EAAAA;AAAlB,IAAiCH,mBAAUI,IAAjD;;AAEe,MAAMC,UAAN,SAAyBC,gBAAzB,CAAmC;AAMhDC,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAClB,UAAMA,KAAN;;AADkB,sCAeT,MAAM;AACf,WAAKC,QAAL,CAAc;AAACC,QAAAA,QAAQ,EAAE,CAAC,KAAKC,KAAL,CAAWD;AAAvB,OAAd;AACD,KAjBmB;;AAElB,SAAKC,KAAL,GAAa;AACXD,MAAAA,QAAQ,EAAE;AADC,KAAb;AAGD;;AAEDE,EAAAA,WAAW,CAAEC,CAAF,EAAKC,GAAL,EAAUC,KAAV,EAAiB;AAC1B,QAAI,KAAKP,KAAL,CAAWQ,MAAf,EAAuB;AACrB,WAAKR,KAAL,CAAWS,YAAX,CAAwB,IAAxB;AACD,KAFD,MAEO;AACL,WAAKT,KAAL,CAAWS,YAAX,CAAwBF,KAAxB,EAA+BD,GAA/B;AACD;AACF;;AAMDI,EAAAA,MAAM,GAAI;AACR,UAAM;AAAEF,MAAAA,MAAF;AAAUD,MAAAA,KAAV;AAAiBD,MAAAA,GAAjB;AAAsBK,MAAAA;AAAtB,QAAkC,KAAKX,KAA7C;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAe,KAAKC,KAA1B;AACA,UAAMS,QAAQ,GAAGN,GAAG,CAACO,EAAJ,CAAOC,SAAP,GAAmBR,GAAG,CAACS,IAAJ,CAASD,SAA5B,GAAwC,CAAzD;AAEA,wBACE;AACE,MAAA,SAAS,EAAG,MAAKN,MAAM,GAAG,SAAH,GAAe,EAAG;AAD3C,oBAEE;AACE,MAAA,SAAS,EAAG,QADd;AAEE,MAAA,OAAO,EAAGH,CAAD,IAAO,KAAKD,WAAL,CAAiBC,CAAjB,EAAoBC,GAApB,EAAyBC,KAAzB;AAFlB,oBAIE;AAAK,MAAA,SAAS,EAAC;AAAf,oBACE,6BAAC,OAAD;AAAS,MAAA,GAAG,EAAED;AAAd,MADF,CAJF,eAOE;AAAK,MAAA,SAAS,EAAC;AAAf,oBACE,0CACGA,GAAG,CAACU,cAAJ,iBAAsB;AAAM,MAAA,SAAS,EAAC;AAAhB,OAAoCV,GAAG,CAACU,cAAxC,CADzB,EAEGV,GAAG,CAACW,aAAJ,iBAAqB;AAAM,MAAA,SAAS,EAAC;AAAhB,OAAmCX,GAAG,CAACW,aAAvC,CAFxB,CADF,EAKGX,GAAG,CAACY,QAAJ,iBAAgB;AAAK,MAAA,SAAS,EAAC;AAAf,cAA8BZ,GAAG,CAACY,QAAlC,CALnB,CAPF,EAcGZ,GAAG,CAACa,QAAJ,gBAAe,6BAAC,aAAD;AAAM,MAAA,IAAI,EAAC;AAAX,MAAf,GAAqC,IAdxC,CAFF,eAkBE;AAAK,MAAA,SAAS,EAAC;AAAf,oBACE;AAAK,MAAA,SAAS,EAAC;AAAf,oBAGE;AAAK,MAAA,SAAS,EAAC;AAAf,oBACE;AAAK,MAAA,SAAS,EAAC;AAAf,OAA4BxB,UAAU,CAACW,GAAG,CAACc,SAAL,CAAtC,CADF,eAEE;AAAK,MAAA,SAAS,EAAC;AAAf,oBACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAA+B,MAAA,KAAK,EAAE;AAAEC,QAAAA,eAAe,EAAE9B,WAAW,CAACe,GAAG,CAACgB,IAAL;AAA9B;AAAtC,MADF,eAEE;AAAK,MAAA,SAAS,EAAC;AAAf,MAFF,CAFF,eAME;AAAK,MAAA,SAAS,EAAC;AAAf,oBACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT;AAAZ,oBACE,6BAAC,uBAAD;AAAgB,MAAA,MAAM,EAAEjB,GAAG,CAACS,IAAJ,CAASS;AAAjC,MADF,CADF,EAIGC,cAAc,CAACnB,GAAG,CAACS,IAAJ,CAASW,IAAV,CAJjB,CANF,CAHF,eAkBE;AAAK,MAAA,SAAS,EAAC;AAAf,oBACE;AAAK,MAAA,SAAS,EAAC;AAAf,MADF,eAEE;AAAK,MAAA,SAAS,EAAC;AAAf,oBACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAkC,MAAA,KAAK,EAAE;AAAEL,QAAAA,eAAe,EAAE9B,WAAW,CAACe,GAAG,CAACgB,IAAL;AAA9B;AAAzC,MADF,CAFF,eAKE;AAAK,MAAA,SAAS,EAAC;AAAf,oBAEE;AAAK,MAAA,SAAS,EAAC;AAAf,oBACE,uDAEE;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR;AAAZ,oBACE,6BAAC,uBAAD;AACE,MAAA,MAAM,EAAEjB,GAAG,CAACqB,MADd;AAEE,MAAA,SAAS,EAAErB,GAAG,CAACS,IAAJ,CAASD,SAFtB;AAGE,MAAA,OAAO,EAAER,GAAG,CAACO,EAAJ,CAAOC;AAHlB,MADF,CAFF,eAWE;AAAQ,MAAA,SAAS,EAAC,yBAAlB;AAA4C,MAAA,OAAO,EAAE,KAAKc;AAA1D,oBACE,6BAAC,aAAD;AAAM,MAAA,IAAI,EAAG,SAAQ1B,QAAQ,GAAG,MAAH,GAAY,OAAQ;AAAjD,MADF,eAEE;AAAM,MAAA,SAAS,EAAC;AAAhB,OAAoCR,cAAc,CAACY,GAAG,CAACuB,QAAL,CAAlD,CAFF,EAGG,GAHH,OAIIjB,QAAQ,GAAI,GAAEA,QAAS,QAAf,GAAyB,UAJrC,MAXF,eAiBE;AAAK,MAAA,KAAK,EAAE;AAAEkB,QAAAA,KAAK,EAAE;AAAT;AAAZ,MAjBF,CADF,EAsBG5B,QAAQ,iBACP,uDACE;AAAK,MAAA,SAAS,EAAC;AAAf,OACGI,GAAG,CAACyB,iBAAJ,CAAsBC,GAAtB,CAA0B,CAACC,CAAD,EAAIC,CAAJ,kBACzB;AAAK,MAAA,GAAG,EAAEA,CAAV;AAAa,MAAA,SAAS,EAAC;AAAvB,oBACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAgC,MAAA,KAAK,EAAE;AAAEb,QAAAA,eAAe,EAAE9B,WAAW,CAACe,GAAG,CAACgB,IAAL;AAA9B;AAAvC,MADF,eAEE;AAAM,MAAA,SAAS,EAAC;AAAhB,OAA6BG,cAAc,CAACQ,CAAC,CAACP,IAAH,CAA3C,CAFF,CADD,CADH,CADF,CAvBJ,CAFF,EAuCGpB,GAAG,CAAC6B,MAAJ,iBACC,uDACE;AAAK,MAAA,SAAS,EAAC;AAAf,oBAAsB,6BAAC,aAAD;AAAM,MAAA,IAAI,EAAC;AAAX,MAAtB,iBADF,EAEGjC,QAAQ,iBACP,0CACGI,GAAG,CAAC6B,MAAJ,CAAWH,GAAX,CAAe,CAACI,KAAD,EAAQF,CAAR,kBACd;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAiC,MAAA,GAAG,EAAEA;AAAtC,OACGE,KAAK,CAACC,oBADT,EAEG,GAFH,EAGGD,KAAK,CAACE,QAAN,gBAAiB;AAAG,MAAA,MAAM,EAAC,QAAV;AAAmB,MAAA,IAAI,EAAEF,KAAK,CAACE;AAA/B,mBAAjB,GAA0E,IAH7E,CADD,CADH,CAHJ,CAxCJ,eAyDE;AAAK,MAAA,SAAS,EAAC;AAAf,oBACE;AAAM,MAAA,SAAS,EAAC;AAAhB,oCAA0C;AAAG,MAAA,IAAI,EAAEhC,GAAG,CAACiC;AAAb,OAAyBjC,GAAG,CAACkC,UAA7B,CAA1C,CADF,CAzDF,CALF,CAlBF,eA2FE;AAAK,MAAA,SAAS,EAAC;AAAf,oBACE;AAAK,MAAA,SAAS,EAAC;AAAf,OAA4B7C,UAAU,CAACW,GAAG,CAACmC,OAAL,CAAtC,CADF,eAEE;AAAK,MAAA,SAAS,EAAC;AAAf,oBACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAkC,MAAA,KAAK,EAAE;AAAEpB,QAAAA,eAAe,EAAE9B,WAAW,CAACe,GAAG,CAACgB,IAAL;AAA9B;AAAzC,MADF,eAEE;AAAK,MAAA,SAAS,EAAC;AAAf,MAFF,CAFF,eAME;AAAK,MAAA,SAAS,EAAC;AAAf,oBACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT;AAAZ,oBACE,6BAAC,uBAAD;AAAgB,MAAA,MAAM,EAAEjB,GAAG,CAACO,EAAJ,CAAOW;AAA/B,MADF,CADF,EAIGC,cAAc,CAACnB,GAAG,CAACO,EAAJ,CAAOa,IAAR,CAJjB,CANF,CA3FF,CADF,CAlBF,CADF;AAiID;;AA/J+C;;;;gBAA7B7B,U,eACA;AACjBJ,EAAAA,SAAS,EAAEiD,mBAAUC,MADJ;AAEjBhC,EAAAA,OAAO,EAAE+B,mBAAUE,WAAV,CAAsBC;AAFd,C;;AAiKrB,SAASpB,cAAT,CAAyBqB,GAAzB,EAA8B;AAC5B,SAAOA,GAAG,CACPC,IADI,GAEJC,WAFI,GAGJC,OAHI,CAGI,GAHJ,EAGS,KAHT,EAIJA,OAJI,CAII,GAJJ,EAIS,KAJT,EAKJA,OALI,CAKI,GALJ,EAKS,KALT,EAMJA,OANI,CAMI,GANJ,EAMS,IANT,EAOJA,OAPI,CAOI,IAPJ,EAOU,GAPV,EAQJC,KARI,CAQE,GARF,EASJlB,GATI,CASAC,CAAC,IAAI;AACR,QAAI,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyBkB,QAAzB,CAAkClB,CAAlC,CAAJ,EAA0C,OAAOA,CAAC,CAACmB,WAAF,EAAP;AAC1C,WAAOC,eAAe,CAACpB,CAAD,CAAtB;AACD,GAZI,EAaJqB,IAbI,CAaC,GAbD,EAcJL,OAdI,CAcI,IAdJ,EAcU,GAdV,CAAP;AAeD;;AAED,SAASI,eAAT,CAA0BP,GAA1B,EAA+B;AAC7B,SAAOA,GAAG,CAACS,MAAJ,CAAW,CAAX,EAAcH,WAAd,KAA8BN,GAAG,CAACU,KAAJ,CAAU,CAAV,CAArC;AACD","sourcesContent":["import coreUtils from '@opentripplanner/core-utils'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\n\nimport Icon from '../icon'\nimport ViewTripButton from '../../viewers/view-trip-button'\nimport ViewStopButton from '../../viewers/view-stop-button'\n\nconst { getMapColor } = coreUtils.itinerary\nconst { formatDuration, formatTime } = coreUtils.time\n\nexport default class TransitLeg extends Component {\n  static propTypes = {\n    itinerary: PropTypes.object,\n    LegIcon: PropTypes.elementType.isRequired\n  }\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      expanded: false\n    }\n  }\n\n  _onLegClick (e, leg, index) {\n    if (this.props.active) {\n      this.props.setActiveLeg(null)\n    } else {\n      this.props.setActiveLeg(index, leg)\n    }\n  }\n\n  _onClick = () => {\n    this.setState({expanded: !this.state.expanded})\n  }\n\n  render () {\n    const { active, index, leg, LegIcon } = this.props\n    const { expanded } = this.state\n    const numStops = leg.to.stopIndex - leg.from.stopIndex - 1\n\n    return (\n      <div\n        className={`leg${active ? ' active' : ''} transit-leg`}>\n        <button\n          className={`header`}\n          onClick={(e) => this._onLegClick(e, leg, index)}\n        >\n          <div className='mode-icon-container'>\n            <LegIcon leg={leg} />\n          </div>\n          <div className='route-name'>\n            <div>\n              {leg.routeShortName && <span className='route-short-name'>{leg.routeShortName}</span>}\n              {leg.routeLongName && <span className='route-long-name'>{leg.routeLongName}</span>}\n            </div>\n            {leg.headsign && <div className='headsign'>To {leg.headsign}</div>}\n          </div>\n          {leg.realTime ? <Icon type='rss' /> : null}\n        </button>\n        <div className='step-by-step'>\n          <div className='transit-leg-body'>\n\n            {/* 'from' Stop Row */}\n            <div className='from-row'>\n              <div className='time-cell'>{formatTime(leg.startTime)}</div>\n              <div className='trip-line-cell'>\n                <div className='trip-line-top' style={{ backgroundColor: getMapColor(leg.mode) }} />\n                <div className='stop-bubble' />\n              </div>\n              <div className='stop-name-cell'>\n                <div style={{ float: 'right' }}>\n                  <ViewStopButton stopId={leg.from.stopId} />\n                </div>\n                {formatLocation(leg.from.name)}\n              </div>\n            </div>\n\n            {/* Trip Details Row (intermediate stops, alerts, etc.) ${getMapColor(leg.mode)} */}\n            <div className='trip-details-row'>\n              <div className='time-cell' />\n              <div className='trip-line-cell'>\n                <div className='trip-line-middle' style={{ backgroundColor: getMapColor(leg.mode) }} />\n              </div>\n              <div className='trip-details-cell'>\n                {/* Intermediate Stops (expandable) */}\n                <div className='intermediate-stops'>\n                  <div>\n                    {/* Trip Viewer Button */}\n                    <div style={{float: 'right'}}>\n                      <ViewTripButton\n                        tripId={leg.tripId}\n                        fromIndex={leg.from.stopIndex}\n                        toIndex={leg.to.stopIndex}\n                      />\n                    </div>\n\n                    {/* Expand Stops Button */}\n                    <button className='clear-button-formatting' onClick={this._onClick}>\n                      <Icon type={`caret-${expanded ? 'down' : 'right'}`} />\n                      <span className='transit-duration'>{formatDuration(leg.duration)}</span>\n                      {' '}\n                      ({numStops ? `${numStops} stops` : 'non-stop'})\n                    </button>\n                    <div style={{ clear: 'both' }} />\n                  </div>\n\n                  {/* Expanded Stops */}\n                  {expanded &&\n                    <div>\n                      <div className='stop-list'>\n                        {leg.intermediateStops.map((s, i) => (\n                          <div key={i} className='stop-item item'>\n                            <div className='trip-line-stop' style={{ backgroundColor: getMapColor(leg.mode) }} />\n                            <span className='stop-name'>{formatLocation(s.name)}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  }\n                </div>\n\n                {/* Service Alerts for Leg */}\n                {leg.alerts &&\n                  <div>\n                    <div className='item'><Icon type='exclamation-circle' /> Information</div>\n                    {expanded &&\n                      <div>\n                        {leg.alerts.map((alert, i) => (\n                          <div className='alert-item item' key={i}>\n                            {alert.alertDescriptionText}\n                            {' '}\n                            {alert.alertUrl ? <a target='_blank' href={alert.alertUrl}>more info</a> : null}\n                          </div>\n                        ))}\n                      </div>\n                    }\n                  </div>\n                }\n\n                {/* General Info */}\n                <div className='item info-item'>\n                  <span className='agency-info'>$_service_$ <a href={leg.agencyUrl}>{leg.agencyName}</a></span>\n                  {\n                    // route info included?\n                    // <span className='route-info'><a target='_blank' href={leg.routeUrl}>Route information</a></span>\n                  }\n                </div>\n              </div>\n            </div>\n\n            {/* 'to' stop row */}\n            <div className='to-row'>\n              <div className='time-cell'>{formatTime(leg.endTime)}</div>\n              <div className='trip-line-cell'>\n                <div className='trip-line-bottom' style={{ backgroundColor: getMapColor(leg.mode) }} />\n                <div className='stop-bubble' />\n              </div>\n              <div className='stop-name-cell'>\n                <div style={{ float: 'right' }}>\n                  <ViewStopButton stopId={leg.to.stopId} />\n                </div>\n                {formatLocation(leg.to.name)}\n              </div>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction formatLocation (str) {\n  return str\n    .trim()\n    .toLowerCase()\n    .replace('/', ' / ')\n    .replace('-', ' - ')\n    .replace('@', ' @ ')\n    .replace('(', '( ')\n    .replace('  ', ' ')\n    .split(' ')\n    .map(s => {\n      if (['ne', 'sw', 'nw', 'se'].includes(s)) return s.toUpperCase()\n      return capitalizeFirst(s)\n    })\n    .join(' ')\n    .replace('( ', '(')\n}\n\nfunction capitalizeFirst (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n}\n"]}