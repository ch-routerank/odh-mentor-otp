{"version":3,"sources":["connected-itinerary-body.js"],"names":["noop","ItineraryBodyContainer","styled","div","StyledItineraryBody","ItineraryBody","PlaceNameWrapper","ConnectedItineraryBody","Component","shouldComponentUpdate","nextProps","nextState","props","itinerary","render","config","diagramVisible","LegIcon","setActiveLeg","setViewedTrip","setLegDiagram","timeOptions","LineColumnContent","PlaceName","RouteDescription","elevationProfile","showRouteFares","TransitLegSubheader","TransitLegSummary","RealtimeTimeColumn","mapStateToProps","state","ownProps","otp","ui","diagramLeg","mapDispatchToProps"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,IAAI,GAAG,MAAM,CAAE,CAArB;;AAEA,MAAMC,sBAAsB,GAAGC,0BAAOC,GAAI;AAC1C;AACA,CAFA;AAIA,MAAMC,mBAAmB,GAAG,+BAAOC,sBAAP,CAAsB;AAClD,IAAIC,iBAAiB;AACrB;AACA;AACA,CAJA;;AAMA,MAAMC,sBAAN,SAAqCC,gBAArC,CAA+C;AAC7C;AACAC,EAAAA,qBAAqB,CAAEC,SAAF,EAAaC,SAAb,EAAwB;AAC3C,WAAO,CAAC,qBAAQ,KAAKC,KAAL,CAAWC,SAAnB,EAA8BH,SAAS,CAACG,SAAxC,CAAR;AACD;;AAEDC,EAAAA,MAAM,GAAI;AACR,UAAM;AACJC,MAAAA,MADI;AAEJC,MAAAA,cAFI;AAGJH,MAAAA,SAHI;AAIJI,MAAAA,OAJI;AAKJC,MAAAA,YALI;AAMJC,MAAAA,aANI;AAOJC,MAAAA,aAPI;AAQJC,MAAAA;AARI,QASF,KAAKT,KATT;AAWA,wBACE,6BAAC,sBAAD,qBACE,6BAAC,mBAAD;AACE,MAAA,MAAM,EAAEG,MADV;AAEE,MAAA,cAAc,EAAEC,cAFlB;AAGE,MAAA,SAAS,EAAEH,SAHb;AAIE,MAAA,OAAO,EAAEI,OAJX;AAKE,MAAA,iBAAiB,EAAEK,0BALrB;AAME,MAAA,SAAS,EAAEC,kBANb;AAOE,MAAA,gBAAgB,EAAEC,yBAPpB;AAQE,MAAA,YAAY,EAAEN,YARhB;AASE,MAAA,aAAa,EAAEE,aATjB;AAUE,MAAA,aAAa,EAAED,aAVjB;AAWE,MAAA,cAAc,MAXhB;AAYE,MAAA,oBAAoB,EAAEJ,MAAM,CAACU,gBAZ/B;AAaE,MAAA,WAAW,MAbb;AAcE,MAAA,mBAAmB,EAAE,KAdvB;AAeE,MAAA,cAAc,EAAEV,MAAM,CAACF,SAAP,IAAoBE,MAAM,CAACF,SAAP,CAAiBa,cAfvD;AAgBE,MAAA,kBAAkB,MAhBpB;AAiBE,MAAA,WAAW,EAAEL,WAjBf;AAkBE,MAAA,mBAAmB,EAAErB,IAlBvB;AAmBE,MAAA,mBAAmB,EAAE2B,qCAnBvB;AAoBE,MAAA,iBAAiB,EAAEC,0BApBrB;AAqBE,MAAA,iBAAiB,EAAEC;AArBrB,MADF,eAwBE,6BAAC,6BAAD;AAAa,MAAA,SAAS,EAAEhB;AAAxB,MAxBF,eAyBE,6BAAC,kBAAD;AAAW,MAAA,SAAS,EAAEA;AAAtB,MAzBF,CADF;AA6BD;;AA/C4C;;AAkD/C,MAAMiB,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAO;AACLjB,IAAAA,MAAM,EAAEgB,KAAK,CAACE,GAAN,CAAUlB,MADb;AAELC,IAAAA,cAAc,EAAEe,KAAK,CAACE,GAAN,CAAUC,EAAV,CAAaC;AAFxB,GAAP;AAID,CALD;;AAOA,MAAMC,kBAAkB,GAAG;AACzBjB,EAAAA,aAAa,EAAbA,iBADyB;AAEzBC,EAAAA,aAAa,EAAbA;AAFyB,CAA3B;;eAKe,yBAAQU,eAAR,EAAyBM,kBAAzB,EACb7B,sBADa,C","sourcesContent":["import isEqual from 'lodash.isequal'\nimport TransitLegSummary from '@opentripplanner/itinerary-body/lib/defaults/transit-leg-summary'\nimport ItineraryBody from '@opentripplanner/itinerary-body/lib/otp-react-redux/itinerary-body'\nimport LineColumnContent from '@opentripplanner/itinerary-body/lib/otp-react-redux/line-column-content'\nimport PlaceName from '@opentripplanner/itinerary-body/lib/otp-react-redux/place-name'\nimport { PlaceName as PlaceNameWrapper } from '@opentripplanner/itinerary-body/lib/styled'\nimport RouteDescription from '@opentripplanner/itinerary-body/lib/otp-react-redux/route-description'\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\n\nimport { setLegDiagram } from '../../../actions/map'\nimport { setViewedTrip } from '../../../actions/ui'\nimport TransitLegSubheader from './connected-transit-leg-subheader'\nimport RealtimeTimeColumn from './realtime-time-column'\nimport TripDetails from '../connected-trip-details'\nimport TripTools from '../trip-tools'\n\nconst noop = () => {}\n\nconst ItineraryBodyContainer = styled.div`\n  padding: 0px 0px;\n`\n\nconst StyledItineraryBody = styled(ItineraryBody)`\n  ${PlaceNameWrapper} {\n    font-weight: inherit;\n  }\n`\n\nclass ConnectedItineraryBody extends Component {\n  /** avoid rerendering if the itinerary to display hasn't changed */\n  shouldComponentUpdate (nextProps, nextState) {\n    return !isEqual(this.props.itinerary, nextProps.itinerary)\n  }\n\n  render () {\n    const {\n      config,\n      diagramVisible,\n      itinerary,\n      LegIcon,\n      setActiveLeg,\n      setViewedTrip,\n      setLegDiagram,\n      timeOptions\n    } = this.props\n\n    return (\n      <ItineraryBodyContainer>\n        <StyledItineraryBody\n          config={config}\n          diagramVisible={diagramVisible}\n          itinerary={itinerary}\n          LegIcon={LegIcon}\n          LineColumnContent={LineColumnContent}\n          PlaceName={PlaceName}\n          RouteDescription={RouteDescription}\n          setActiveLeg={setActiveLeg}\n          setLegDiagram={setLegDiagram}\n          setViewedTrip={setViewedTrip}\n          showAgencyInfo\n          showElevationProfile={config.elevationProfile}\n          showLegIcon\n          showMapButtonColumn={false}\n          showRouteFares={config.itinerary && config.itinerary.showRouteFares}\n          showViewTripButton\n          timeOptions={timeOptions}\n          toRouteAbbreviation={noop}\n          TransitLegSubheader={TransitLegSubheader}\n          TransitLegSummary={TransitLegSummary}\n          TimeColumnContent={RealtimeTimeColumn}\n        />\n        <TripDetails itinerary={itinerary} />\n        <TripTools itinerary={itinerary} />\n      </ItineraryBodyContainer>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    config: state.otp.config,\n    diagramVisible: state.otp.ui.diagramLeg\n  }\n}\n\nconst mapDispatchToProps = {\n  setViewedTrip,\n  setLegDiagram\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n  ConnectedItineraryBody\n)\n"]}