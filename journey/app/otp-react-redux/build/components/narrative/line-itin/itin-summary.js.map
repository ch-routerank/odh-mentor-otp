{"version":3,"sources":["itin-summary.js"],"names":["defaultRouteColor","Container","styled","div","coreUtils","ui","isMobile","Detail","Details","Header","LegIconContainer","NonTransitSpacer","RoutePreview","Routes","ShortName","props","getRouteColorForBadge","leg","ItinerarySummary","Component","onClick","render","itinerary","LegIcon","timeOptions","centsToString","maxTNCFare","minTNCFare","transitFare","calculateFares","minTotalFare","maxTotalFare","caloriesBurned","calculatePhysicalActivity","_onSummaryClicked","time","formatDuration","duration","formatTime","startTime","endTime","Math","round","transfers","legs","filter","mode","transitTime","map","k","isTransit","getRouteNameForBadge","PropTypes","object","elementType","isRequired","getRouteLongName","routes","length","longName","routeLongName","shortName","routeShortName","toLowerCase","startsWith","split","trim","routeColor"],"mappings":"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","sourcesContent":["import coreUtils from '@opentripplanner/core-utils'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport styled from 'styled-components'\n\n// TODO: make this a prop\nconst defaultRouteColor = '#008'\n\nconst Container = styled.div`\n  display: ${() => coreUtils.ui.isMobile() ? 'table' : 'none'};\n  height: 60px;\n  margin-bottom: 15px;\n  padding-right: 5px;\n  width: 100%;\n`\n\nconst Detail = styled.div`\n  color: #999999;\n  font-size: 13px;\n`\n\nconst Details = styled.div`\n  display: table-cell;\n  vertical-align: top;\n`\n\nconst Header = styled.div`\n  font-size: 18px;\n  font-weight: bold;\n  margin-top: -3px;\n`\n\nconst LegIconContainer = styled.div`\n  height: 30px;\n  width: 30px;\n`\n\nconst NonTransitSpacer = styled.div`\n  height: 30px;\n  overflow: hidden\n`\n\nconst RoutePreview = styled.div`\n  display: inline-block;\n  margin-left: 8px;\n  vertical-align: top;\n`\n\nconst Routes = styled.div`\n  display: table-cell;\n  text-align: right;\n`\n\nconst ShortName = styled.div`\n  background-color: ${props => getRouteColorForBadge(props.leg)};\n  border-radius: 15px;\n  border: 2px solid white;\n  box-shadow: 0 0 0.5em #000;\n  color: white;\n  font-size: 15px;\n  font-weight: 500;\n  height: 30px;\n  margin-top: 6px;\n  overflow: hidden;\n  padding-top: 4px;\n  text-align: center;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 30px;\n`\n\nexport default class ItinerarySummary extends Component {\n  static propTypes = {\n    itinerary: PropTypes.object,\n    LegIcon: PropTypes.elementType.isRequired\n  }\n\n  _onSummaryClicked = () => {\n    if (typeof this.props.onClick === 'function') this.props.onClick()\n  }\n\n  render () {\n    const { itinerary, LegIcon, timeOptions } = this.props\n    const {\n      centsToString,\n      maxTNCFare,\n      minTNCFare,\n      transitFare\n    } = coreUtils.itinerary.calculateFares(itinerary)\n    // TODO: support non-USD\n    const minTotalFare = minTNCFare * 100 + transitFare\n    const maxTotalFare = maxTNCFare * 100 + transitFare\n\n    const { caloriesBurned } = coreUtils.itinerary.calculatePhysicalActivity(itinerary)\n\n    return (\n      <Container onClick={this._onSummaryClicked}>\n        <Details>\n          {/* Travel time in hrs/mins */}\n          <Header>{coreUtils.time.formatDuration(itinerary.duration)}</Header>\n\n          {/* Duration as time range */}\n          <Detail>\n            {coreUtils.time.formatTime(itinerary.startTime, timeOptions)} - {coreUtils.time.formatTime(itinerary.endTime, timeOptions)}\n          </Detail>\n\n          {/* Fare / Calories */}\n          <Detail>\n            {minTotalFare > 0 && <span>\n              {centsToString(minTotalFare)}\n              {minTotalFare !== maxTotalFare && <span> - {centsToString(maxTotalFare)}</span>}\n              <span> &bull; </span>\n            </span>}\n            {Math.round(caloriesBurned)} Cals\n          </Detail>\n\n          {/* Number of transfers, if applicable */}\n          {itinerary.transfers > 0 && (\n            <Detail>\n              {itinerary.transfers} cambi{itinerary.transfers > 1 ? '' : 'o'}\n            </Detail>\n          )}\n\n        </Details>\n        <Routes>\n          {itinerary.legs.filter(leg => {\n            return !(leg.mode === 'WALK' && itinerary.transitTime > 0)\n          }).map((leg, k) => {\n            return (\n              <RoutePreview key={k}>\n                <LegIconContainer><LegIcon leg={leg} /></LegIconContainer>\n                {coreUtils.itinerary.isTransit(leg.mode)\n                  ? (\n                    <ShortName leg={leg} >\n                      {getRouteNameForBadge(leg)}\n                    </ShortName>\n                  )\n                  : (<NonTransitSpacer />)\n                }\n              </RoutePreview>\n            )\n          })}\n        </Routes>\n      </Container>\n    )\n  }\n}\n\n// Helper functions\n\nfunction getRouteLongName (leg) {\n  return leg.routes && leg.routes.length > 0\n    ? leg.routes[0].longName\n    : leg.routeLongName\n}\n\nfunction getRouteNameForBadge (leg) {\n  const shortName = leg.routes && leg.routes.length > 0\n    ? leg.routes[0].shortName : leg.routeShortName\n\n  const longName = getRouteLongName(leg)\n\n  // check for max\n  if (longName && longName.toLowerCase().startsWith('max')) return null\n\n  // check for streetcar\n  if (longName && longName.startsWith('Portland Streetcar')) return longName.split('-')[1].trim().split(' ')[0]\n\n  return shortName || longName\n}\n\nfunction getRouteColorForBadge (leg) {\n  return leg.routeColor ? '#' + leg.routeColor : defaultRouteColor\n}\n"]}