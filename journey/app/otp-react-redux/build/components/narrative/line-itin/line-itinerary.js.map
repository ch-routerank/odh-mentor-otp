{"version":3,"sources":["line-itinerary.js"],"names":["getLegModeLabel","getTimeZoneOffset","isTransit","coreUtils","itinerary","LineItineraryContainer","styled","div","LineItinerary","NarrativeItinerary","_headerText","props","summary","_getSummary","transitModes","legs","forEach","leg","index","mode","modeStr","indexOf","push","length","join","render","active","companies","expanded","itineraryFooter","LegIcon","onClick","setActiveLeg","showRealtimeAnnotation","timeFormat","user","timeOptions","format","offset"],"mappings":"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","sourcesContent":["import coreUtils from '../../../otp-ui/core-utils/src'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport ItineraryBody from './connected-itinerary-body'\nimport ItinerarySummary from './itin-summary'\nimport NarrativeItinerary from '../narrative-itinerary'\nimport SimpleRealtimeAnnotation from '../simple-realtime-annotation'\nimport LinkButton from '../../user/link-button'\n\nconst { getLegModeLabel, getTimeZoneOffset, isTransit } = coreUtils.itinerary\n\nexport const LineItineraryContainer = styled.div`\n  margin-bottom: 20px;\n`\n\nexport default class LineItinerary extends NarrativeItinerary {\n  _headerText () {\n    const { itinerary } = this.props\n    return itinerary.summary || this._getSummary(itinerary)\n  }\n\n  _getSummary (itinerary) {\n    let summary = ''\n    let transitModes = []\n    itinerary.legs.forEach((leg, index) => {\n      if (isTransit(leg.mode)) {\n        const modeStr = getLegModeLabel(leg)\n        if (transitModes.indexOf(modeStr) === -1) transitModes.push(modeStr)\n      }\n    })\n\n    // check for access mode\n    if (!isTransit(itinerary.legs[0].mode)) {\n      summary += getLegModeLabel(itinerary.legs[0])\n    }\n\n    // append transit modes, if applicable\n    if (transitModes.length > 0) {\n      summary += ' to ' + transitModes.join(', ')\n    }\n\n    return summary\n  }\n\n  render () {\n    const {\n      active,\n      companies,\n      expanded,\n      itinerary,\n      itineraryFooter,\n      LegIcon,\n      onClick,\n      setActiveLeg,\n      showRealtimeAnnotation,\n      timeFormat,\n      user\n    } = this.props\n\n    if (!itinerary) {\n      return <div>No Itinerary!</div>\n    }\n\n    const timeOptions = {\n      format: timeFormat,\n      offset: getTimeZoneOffset(itinerary)\n    }\n\n    return (\n      <LineItineraryContainer className='line-itin'>\n        <ItinerarySummary\n          companies={companies}\n          itinerary={itinerary}\n          LegIcon={LegIcon}\n          onClick={onClick}\n          timeOptions={timeOptions}\n        />\n\n        {user &&\n          <span className='pull-right'><LinkButton to='/savetrip'>Save this option</LinkButton></span>\n        }\n\n        {showRealtimeAnnotation && <SimpleRealtimeAnnotation />}\n        {active || expanded\n          ? <ItineraryBody\n            itinerary={itinerary}\n            LegIcon={LegIcon}\n            // timeOptions={timeOptions}\n            // Don't use setActiveLeg as an import\n            // (will cause error when clicking on itinerary suymmary).\n            // Use the one passed by NarrativeItineraries instead.\n            setActiveLeg={setActiveLeg}\n            timeOptions={timeOptions}\n          />\n          : null}\n        {itineraryFooter}\n      </LineItineraryContainer>\n    )\n  }\n}\n"]}