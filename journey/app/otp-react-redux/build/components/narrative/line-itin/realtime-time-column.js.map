{"version":3,"sources":["realtime-time-column.js"],"names":["TimeText","styled","div","TimeStruck","TimeBlock","TimeColumnBase","StatusText","DelayText","span","TimeColumnOnTime","TimeColumnEarly","TimeColumnLate","RealtimeTimeColumn","isDestination","leg","timeOptions","time","endTime","startTime","formattedTime","isTransitLeg","mode","realTime","delay","arrivalDelay","departureDelay","originalTime","originalFormattedTime","isOnTime","statusText","TimeColumn","delayInMinutes","Math","abs","round","renderedTime","mapStateToProps","state","ownProps","format","otp","config","propTypes","PropTypes","bool","isRequired","legType","timeOptionsType","defaultProps"],"mappings":"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","sourcesContent":["import { isTransit } from '@opentripplanner/core-utils/lib/itinerary'\nimport {\n  legType,\n  timeOptionsType\n} from '@opentripplanner/core-utils/lib/types'\nimport { formatTime, getTimeFormat } from '@opentripplanner/core-utils/lib/time'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\n\nconst TimeText = styled.div``\n\nconst TimeStruck = styled.div`\n  text-decoration: line-through;\n`\n\nconst TimeBlock = styled.div`\n  line-height: 1em;\n  margin-bottom: 4px;\n`\n\nconst TimeColumnBase = styled.div``\n\nconst StatusText = styled.div`\n  color: #bbb;\n  font-size: 80%;\n  line-height: 1em;\n`\n\nconst DelayText = styled.span`\n  display: block;\n  white-space: nowrap;\n`\n\n// Reusing stop viewer colors.\nconst TimeColumnOnTime = styled(TimeColumnBase)`\n  ${TimeText}, ${StatusText} {\n    color: #5cb85c;\n  }\n`\nconst TimeColumnEarly = styled(TimeColumnBase)`\n  ${TimeText}, ${StatusText} {\n    color: #337ab7;\n  }\n`\nconst TimeColumnLate = styled(TimeColumnBase)`\n  ${TimeText}, ${StatusText} {\n    color: #d9534f;\n  }\n`\n\n/**\n * This component displays the scheduled departure/arrival time for a leg,\n * and, for transit legs, displays any delays or earliness where applicable.\n */\nfunction RealtimeTimeColumn ({\n  isDestination,\n  leg,\n  timeOptions\n}) {\n  const time = isDestination ? leg.endTime : leg.startTime\n  const formattedTime = time && formatTime(time, timeOptions)\n  const isTransitLeg = isTransit(leg.mode)\n\n  // For non-real-time legs, show only the scheduled time,\n  // except for transit legs where we add the \"scheduled\" text underneath.\n  if (!leg.realTime) {\n    return (\n      <>\n        <TimeText>{formattedTime}</TimeText>\n        {isTransitLeg && <StatusText>$_schedule2_$</StatusText>}\n      </>\n    )\n  }\n\n  // Delay in seconds.\n  const delay = isDestination ? leg.arrivalDelay : leg.departureDelay\n  // Time is in milliseconds.\n  const originalTime = time - delay * 1000\n  const originalFormattedTime =\n    originalTime && formatTime(originalTime, timeOptions)\n\n  // TODO: refine on-time thresholds.\n  // const isOnTime = delay >= -60 && delay <= 120;\n  const isOnTime = delay === 0\n\n  let statusText\n  let TimeColumn = TimeColumnBase\n  if (isOnTime) {\n    statusText = 'on time'\n    TimeColumn = TimeColumnOnTime\n  } else if (delay < 0) {\n    statusText = 'early'\n    TimeColumn = TimeColumnEarly\n  } else if (delay > 0) {\n    statusText = 'late'\n    TimeColumn = TimeColumnLate\n  }\n\n  // Absolute delay in rounded minutes, for display purposes.\n  const delayInMinutes = Math.abs(\n    Math.round((isDestination ? leg.arrivalDelay : leg.departureDelay) / 60)\n  )\n\n  let renderedTime\n  if (!isOnTime) {\n    // If the transit vehicle is not on time, strike the original scheduled time\n    // and display the updated time underneath.\n    renderedTime = (\n      <TimeBlock>\n        {!isOnTime && <TimeStruck>{originalFormattedTime}</TimeStruck>}\n        <TimeText>{formattedTime}</TimeText>\n      </TimeBlock>\n    )\n  } else {\n    renderedTime = <TimeText>{formattedTime}</TimeText>\n  }\n\n  return (\n    <TimeColumn>\n      {renderedTime}\n      <StatusText>\n        {/* Keep the '5 min' string on the same line. */}\n        {!isOnTime && <DelayText>{delayInMinutes} min</DelayText>}\n        {statusText}\n      </StatusText>\n    </TimeColumn>\n  )\n}\n\n// Connect to redux store for timeOptions.\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    timeOptions: {\n      format: getTimeFormat(state.otp.config)\n    }\n  }\n}\n\nexport default connect(mapStateToProps)(RealtimeTimeColumn)\n\nRealtimeTimeColumn.propTypes = {\n  isDestination: PropTypes.bool.isRequired,\n  leg: legType.isRequired,\n  timeOptions: timeOptionsType\n}\n\nRealtimeTimeColumn.defaultProps = {\n  timeOptions: null\n}\n"]}