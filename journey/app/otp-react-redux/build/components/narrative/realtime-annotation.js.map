{"version":3,"sources":["realtime-annotation.js"],"names":["RealtimeAnnotation","Component","render","componentClass","realtimeEffects","toggleRealtime","useRealtime","props","filteredRoutes","normalRoutes","filter","routeId","index","self","indexOf","innerContent","coreUtils","time","formatDuration","normalDuration","map","route","idx","length","maxWidth","PropTypes","object","func","bool"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;AAEe,MAAMA,kBAAN,SAAiCC,gBAAjC,CAA2C;AAOxDC,EAAAA,MAAM,GAAI;AACR,UAAM;AACJC,MAAAA,cADI;AAEJC,MAAAA,eAFI;AAGJC,MAAAA,cAHI;AAIJC,MAAAA;AAJI,QAKF,KAAKC,KALT,CADQ,CAOR;;AACA,UAAMC,cAAc,GAAGJ,eAAe,CAACK,YAAhB,CACpBC,MADoB,CACb,CAACC,OAAD,EAAUC,KAAV,EAAiBC,IAAjB,KAA0BA,IAAI,CAACC,OAAL,CAAaH,OAAb,MAA0BC,KADvC,CAAvB,CARQ,CAUR;AACA;;AACA,UAAMG,YAAY,gBAAG;AAAK,MAAA,SAAS,EAAC;AAAf,oBACnB;AAAK,MAAA,SAAS,EAAC;AAAf,oBACE,sDACE;AAAG,MAAA,SAAS,EAAC;AAAb,MADF,oBADF,eAIE,wCACGT,WAAW,gBACR;AAAM,MAAA,SAAS,EAAC;AAAhB,6HAE2D,GAF3D,eAGA,wCAAIU,mBAAUC,IAAV,CAAeC,cAAf,CAA8Bd,eAAe,CAACe,cAA9C,CAAJ,MAHA,iCAI4B,GAJ5B,EAKCX,cAAc,CACZY,GADF,CACM,CAACC,KAAD,EAAQC,GAAR,kBACH;AAAM,MAAA,GAAG,EAAEA;AAAX,oBACE,wCAAID,KAAJ,CADF,EAEGb,cAAc,CAACe,MAAf,GAAwB,CAAxB,GAA4BD,GAA5B,IAAmC,IAFtC,CAFH,CALD,MADQ,gBAeR;AAAM,MAAA,SAAS,EAAC;AAAhB,qIAhBN,CAJF,eA0BE,uDACE,6BAAC,sBAAD;AACE,MAAA,KAAK,EAAEnB,cAAc,KAAK,SAD5B,CACuC;AADvC;AAEE,MAAA,SAAS,EAAC,iBAFZ;AAGE,MAAA,OAAO,EAAEE;AAHX,OAKGC,WAAW,GAAI,QAAJ,GAAe,OAL7B,oBADF,CA1BF,CADmB,CAArB;;AAuCA,QAAIH,cAAc,KAAK,SAAvB,EAAkC;AAChC,0BAAO,6BAAC,8BAAD;AACL,QAAA,OAAO,EAAC,OADH;AAEL,QAAA,SAAS,EAAC,QAFL,CAGL;AACA;AAJK;AAKL,QAAA,OAAO,eACL,6BAAC,uBAAD;AAAS,UAAA,KAAK,EAAE;AAACqB,YAAAA,QAAQ,EAAE;AAAX,WAAhB;AAAqC,UAAA,EAAE,EAAC;AAAxC,WACGT,YADH;AANG,sBAUL,6BAAC,sBAAD;AAAQ,QAAA,OAAO,EAAC;AAAhB,sBAAuB;AAAG,QAAA,SAAS,EAAC;AAAb,QAAvB,CAVK,CAAP;AAYD,KAbD,MAaO;AACL,aAAOA,YAAP;AACD;AACF;;AA1EuD;;;;gBAArCf,kB,eACA;AACjBI,EAAAA,eAAe,EAAEqB,mBAAUC,MADV;AAEjBrB,EAAAA,cAAc,EAAEoB,mBAAUE,IAFT;AAGjBrB,EAAAA,WAAW,EAAEmB,mBAAUG;AAHN,C","sourcesContent":["import coreUtils from '@opentripplanner/core-utils'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport { Button, OverlayTrigger, Popover } from 'react-bootstrap'\n\nexport default class RealtimeAnnotation extends Component {\n  static propTypes = {\n    realtimeEffects: PropTypes.object,\n    toggleRealtime: PropTypes.func,\n    useRealtime: PropTypes.bool\n  }\n\n  render () {\n    const {\n      componentClass,\n      realtimeEffects,\n      toggleRealtime,\n      useRealtime\n    } = this.props\n    // Keep only the unique route IDs (so that duplicates are not listed).\n    const filteredRoutes = realtimeEffects.normalRoutes\n      .filter((routeId, index, self) => self.indexOf(routeId) === index)\n    // FIXME: there are some weird css things happening in desktop vs. mobile,\n    // so I removed the divs with classNames and opted for h4 and p for now\n    const innerContent = <div className='realtime-alert'>\n      <div className='content'>\n        <h3>\n          <i className='fa fa-exclamation-circle' /> Service update\n        </h3>\n        <p>\n          {useRealtime\n            ? <span className='small'>\n              Your trip results have been adjusted based on real-time\n              information. Under normal conditions, this trip would take{' '}\n              <b>{coreUtils.time.formatDuration(realtimeEffects.normalDuration)} </b>\n              using the following routes:{' '}\n              {filteredRoutes\n                .map((route, idx) => (\n                  <span key={idx}>\n                    <b>{route}</b>\n                    {filteredRoutes.length - 1 > idx && ', '}\n                  </span>\n                ))\n              }.\n            </span>\n            : <span className='small'>\n              Your trip results are currently being affected by service delays.\n              These delays do not factor into travel times shown below.\n            </span>\n          }\n        </p>\n        <div>\n          <Button\n            block={componentClass === 'popover'} // display as block in popover\n            className='toggle-realtime'\n            onClick={toggleRealtime}\n          >\n            {useRealtime ? `Ignore` : `Apply`} service delays\n          </Button>\n        </div>\n      </div>\n    </div>\n\n    if (componentClass === 'popover') {\n      return <OverlayTrigger\n        trigger='click'\n        placement='bottom'\n        // container={this}\n        // containerPadding={40}\n        overlay={\n          <Popover style={{maxWidth: '300px'}} id='popover-positioned-bottom'>\n            {innerContent}\n          </Popover>\n        }>\n        <Button bsStyle='link'><i className='fa fa-2x fa-exclamation-circle' /></Button>\n      </OverlayTrigger>\n    } else {\n      return innerContent\n    }\n  }\n}\n"]}