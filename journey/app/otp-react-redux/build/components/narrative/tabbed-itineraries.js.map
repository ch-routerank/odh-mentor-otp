{"version":3,"sources":["tabbed-itineraries.js"],"names":["calculateFares","calculatePhysicalActivity","getTimeZoneOffset","coreUtils","itinerary","formatDuration","formatTime","getTimeFormat","time","TabbedItineraries","Component","e","setUseRealtimeResponse","useRealtime","props","render","activeItinerary","itineraries","itineraryClass","realtimeEffects","setActiveItinerary","timeFormat","itineraryClassProps","showRealtimeAnnotation","isAffectedByRealtimeData","exceedsThreshold","routesDiffer","map","index","length","React","createElement","key","active","expanded","routingType","PropTypes","array","func","pending","number","setActiveLeg","setActiveStep","bool","DefaultItinerary","mapStateToProps","state","ownProps","activeSearch","otp","activeLeg","activeStep","companies","currentQuery","tnc","config","user","loggedInUser","TabButton","onClick","isActive","timeOptions","format","offset","classNames","caloriesBurned","centsToString","maxTNCFare","minTNCFare","transitFare","minTotalFare","plus","push","join","_onClick","duration","startTime","endTime","Math","round","transfers","mapDispatchToProps","dispatch","narrativeActions","leg","step"],"mappings":"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","sourcesContent":["import coreUtils from '../../otp-ui/core-utils/src'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n\nimport * as narrativeActions from '../../actions/narrative'\nimport DefaultItinerary from './default/default-itinerary'\nimport { getActiveSearch, getRealtimeEffects } from '../../util/state'\n\nconst { calculateFares, calculatePhysicalActivity, getTimeZoneOffset } = coreUtils.itinerary\nconst { formatDuration, formatTime, getTimeFormat } = coreUtils.time\n\nclass TabbedItineraries extends Component {\n  static propTypes = {\n    itineraries: PropTypes.array,\n    itineraryClass: PropTypes.func,\n    pending: PropTypes.number,\n    activeItinerary: PropTypes.number,\n    setActiveItinerary: PropTypes.func,\n    setActiveLeg: PropTypes.func,\n    setActiveStep: PropTypes.func,\n    setUseRealtimeResponse: PropTypes.func,\n    useRealtime: PropTypes.bool\n  }\n\n  static defaultProps = {\n    itineraryClass: DefaultItinerary\n  }\n\n  _toggleRealtimeItineraryClick = (e) => {\n    const { setUseRealtimeResponse, useRealtime } = this.props\n    setUseRealtimeResponse({ useRealtime: !useRealtime })\n  }\n\n  render () {\n    const {\n      activeItinerary,\n      itineraries,\n      itineraryClass,\n      realtimeEffects,\n      setActiveItinerary,\n      timeFormat,\n      useRealtime,\n      ...itineraryClassProps\n    } = this.props\n    if (!itineraries) return null\n\n    /* TODO: should this be moved? */\n    const showRealtimeAnnotation =\n      realtimeEffects.isAffectedByRealtimeData && (\n        realtimeEffects.exceedsThreshold ||\n        realtimeEffects.routesDiffer ||\n        !useRealtime\n      )\n    return (\n      <div className='options itinerary tabbed-itineraries'>\n        <div className='tab-row'>\n          {itineraries.map((itinerary, index) => {\n            return (\n              <TabButton\n                index={index}\n                isActive={index === activeItinerary}\n                itinerary={itinerary}\n                onClick={setActiveItinerary}\n                timeFormat={timeFormat}\n              />\n            )\n          })}\n        </div>\n\n        {/* <RealtimeAnnotation\n          realtimeEffects={realtimeEffects}\n          toggleRealtime={this._toggleRealtimeItineraryClick}\n          useRealtime={useRealtime} />\n        */}\n\n        {/* Show active itin if itineraries exist and active itin is defined. */}\n        {(itineraries.length > 0 && activeItinerary >= 0)\n          ? React.createElement(itineraryClass, {\n            itinerary: itineraries[activeItinerary],\n            index: activeItinerary,\n            key: activeItinerary,\n            active: true,\n            expanded: true,\n            routingType: 'ITINERARY',\n            showRealtimeAnnotation,\n            ...itineraryClassProps\n          })\n          : null\n        }\n\n      </div>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const activeSearch = getActiveSearch(state.otp)\n  // const { activeItinerary, activeLeg, activeStep } = activeSearch ? activeSearch.activeItinerary : {}\n  const pending = activeSearch ? activeSearch.pending : false\n  const realtimeEffects = getRealtimeEffects(state.otp)\n  const useRealtime = state.otp.useRealtime\n  return {\n    // swap out realtime itineraries with non-realtime depending on boolean\n    pending,\n    realtimeEffects,\n    activeItinerary: activeSearch && activeSearch.activeItinerary,\n    activeLeg: activeSearch && activeSearch.activeLeg,\n    activeStep: activeSearch && activeSearch.activeStep,\n    useRealtime,\n    companies: state.otp.currentQuery.companies,\n    tnc: state.otp.tnc,\n    timeFormat: getTimeFormat(state.otp.config),\n    user: state.user.loggedInUser\n  }\n}\n\nclass TabButton extends Component {\n  _onClick = () => {\n    const {index, onClick} = this.props\n    // FIXME: change signature once actions resolved with otp-ui\n    onClick(index)\n  }\n\n  render () {\n    const {index, isActive, itinerary, timeFormat} = this.props\n    const timeOptions = {\n      format: timeFormat,\n      offset: getTimeZoneOffset(itinerary)\n    }\n    const classNames = ['tab-button', 'clear-button-formatting']\n    const { caloriesBurned } = calculatePhysicalActivity(itinerary)\n    const {\n      centsToString,\n      maxTNCFare,\n      minTNCFare,\n      transitFare\n    } = calculateFares(itinerary)\n    // TODO: support non-USD\n    const minTotalFare = minTNCFare * 100 + transitFare\n    const plus = maxTNCFare && maxTNCFare > minTNCFare ? '+' : ''\n    if (isActive) classNames.push('selected')\n    return (\n      <Button\n        key={`tab-button-${index}`}\n        className={classNames.join(' ')}\n        onClick={this._onClick}\n      >\n        <div className='title'><span>Option {index + 1}</span></div>\n        <div className='details'>\n          {/* The itinerary duration in hrs/mins */}\n          {formatDuration(itinerary.duration)}\n\n          {/* The duration as a time range */}\n          <span>\n            <br />\n            {formatTime(itinerary.startTime, timeOptions)} - {formatTime(itinerary.endTime, timeOptions)}\n          </span>\n\n          {/* the fare / calories summary line */}\n          <span>\n            <br />\n            {minTotalFare ? <span>{`${centsToString(minTotalFare)}${plus}`} &bull; </span> : ''}\n            {Math.round(caloriesBurned)} Cal\n          </span>\n\n          {/* The 'X tranfers' line, if applicable */}\n          {itinerary.transfers > 0 && (\n            <span>\n              <br />\n              {itinerary.transfers} cambi{itinerary.transfers > 1 ? '' : 'o'}\n            </span>\n          )}\n        </div>\n      </Button>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const {setActiveItinerary, setActiveLeg, setActiveStep, setUseRealtimeResponse} = narrativeActions\n  return {\n    // FIXME\n    setActiveItinerary: (index) => {\n      dispatch(setActiveItinerary({index}))\n    },\n    // FIXME\n    setActiveLeg: (index, leg) => {\n      dispatch(setActiveLeg({index, leg}))\n    },\n    // FIXME\n    setActiveStep: (index, step) => {\n      dispatch(setActiveStep({index, step}))\n    },\n    // FIXME\n    setUseRealtimeResponse: ({useRealtime}) => {\n      dispatch(setUseRealtimeResponse({useRealtime}))\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n  TabbedItineraries\n)\n"]}