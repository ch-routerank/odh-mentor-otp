{"version":3,"sources":["after-signin-screen.js"],"names":["AfterSignInScreen","Component","componentDidUpdate","loggedInUser","replace","routeTo","pathBeforeSignIn","props","previousSearch","split","newSearch","routerActions","render","mapStateToProps","state","ownProps","user","mapDispatchToProps","uiActions"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,iBAAN,SAAgCC,gBAAhC,CAA0C;AACxCC,EAAAA,kBAAkB,GAAI;AACpB,UAAM;AAAEC,MAAAA,YAAF;AAAgBC,MAAAA,OAAhB;AAAyBC,MAAAA,OAAzB;AAAkCC,MAAAA;AAAlC,QAAuD,KAAKC,KAAlE,CADoB,CAGpB;;AACA,QAAIJ,YAAJ,EAAkB;AAChB,UAAI,qBAAUA,YAAV,CAAJ,EAA6B;AAC3B,cAAMK,cAAc,GAAGF,gBAAgB,CAACG,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,CAAvB;AACA,cAAMC,SAAS,GAAGF,cAAc,GAAI,IAAGA,cAAe,EAAtB,GAA0B,IAA1D,CAF2B,CAEoC;;AAC/DH,QAAAA,OAAO,CAAC,UAAD,EAAaK,SAAb,EAAwBC,aAAa,CAACP,OAAtC,CAAP;AACD,OAJD,MAIO;AACLA,QAAAA,OAAO,CAACE,gBAAD,CAAP;AACD;AACF;AACF;;AAEDM,EAAAA,MAAM,GAAI;AACR;AACA,wBACE,uDACE,sEACE,wCADF,eAEE,6BAAC,yBAAD;AACE,MAAA,IAAI,EAAC,gBADP;AAEE,MAAA,IAAI,EAAC;AAFP,MAFF,CADF,CADF;AAWD;;AA7BuC,C,CAgC1C;;;AAEA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,QAAM;AAAEZ,IAAAA,YAAF;AAAgBG,IAAAA;AAAhB,MAAqCQ,KAAK,CAACE,IAAjD;AACA,SAAO;AACLb,IAAAA,YADK;AAELG,IAAAA;AAFK,GAAP;AAID,CAND;;AAQA,MAAMW,kBAAkB,GAAG;AACzBb,EAAAA,OAAO,EAAEO,aAAa,CAACP,OADE;AAEzBC,EAAAA,OAAO,EAAEa,SAAS,CAACb;AAFM,CAA3B;;eAKe,sCACb,yBAAQQ,eAAR,EAAyBI,kBAAzB,EAA6CjB,iBAA7C,CADa,C","sourcesContent":["import * as routerActions from 'connected-react-router'\nimport React, { Component } from 'react'\nimport FontAwesome from 'react-fontawesome'\nimport { connect } from 'react-redux'\n\nimport * as uiActions from '../../actions/ui'\nimport { isNewUser } from '../../util/user'\nimport withLoggedInUserSupport from './with-logged-in-user-support'\n\n/**\n * This screen is flashed just after user sign in while state.user.loggedInUser is being fetched.\n * Once state.user.loggedInUser is available:\n * - For new users, route them to the account page (it will show account setup).\n *   while trying to preserve the search portion of the URL before login.\n * - For existing users, simply take them to the route (itinerary search, stop/trip viewer) that was in place before login.\n *\n * Rerouting is performed so that the current URL does not appear in the browser history.\n */\nclass AfterSignInScreen extends Component {\n  componentDidUpdate () {\n    const { loggedInUser, replace, routeTo, pathBeforeSignIn } = this.props\n\n    // Redirect when loggedInUser is populated (i.e. after several calls to componentDidUpdate())\n    if (loggedInUser) {\n      if (isNewUser(loggedInUser)) {\n        const previousSearch = pathBeforeSignIn.split('?')[1]\n        const newSearch = previousSearch ? `?${previousSearch}` : null // if not null, must include '?'.\n        routeTo('/account', newSearch, routerActions.replace)\n      } else {\n        replace(pathBeforeSignIn)\n      }\n    }\n  }\n\n  render () {\n    // TODO: Improve the visuals.\n    return (\n      <div>\n        <h1>Signed In...\n          <br />\n          <FontAwesome\n            name='hourglass-half'\n            size='4x'\n          />\n        </h1>\n      </div>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const { loggedInUser, pathBeforeSignIn } = state.user\n  return {\n    loggedInUser,\n    pathBeforeSignIn\n  }\n}\n\nconst mapDispatchToProps = {\n  replace: routerActions.replace,\n  routeTo: uiActions.routeTo\n}\n\nexport default withLoggedInUserSupport(\n  connect(mapStateToProps, mapDispatchToProps)(AfterSignInScreen)\n)\n"]}