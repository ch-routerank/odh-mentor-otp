{"version":3,"sources":["saved-trip-screen.js"],"names":["createMonitoredTrip","loggedInUser","queryParams","itinerary","WEEKDAYS","excludeFederalHolidays","isActive","leadTimeInMinutes","tripName","userId","id","hasMaxTripCount","trips","length","SavedTripScreen","Component","constructor","props","newMonitoredTrip","monitoredTrip","state","setState","isCreating","createOrUpdateUserMonitoredTrip","routeTo","_updateMonitoredTrip","_goToTripPlanner","_goToSavedTrips","Pane","_updateMonitoredTripState","basics","_hookMonitoredTrip","TripBasicsPane","notifications","TripNotificationsPane","summary","TripSummaryPane","saveState","match","monitoredTrips","path","url","tripId","split","find","trip","_getTripToEdit","componentDidMount","alert","componentDidUpdate","prevProps","render","_handleSaveNewTrip","_handleSaveTripEdits","_panes","mapStateToProps","ownProps","activeSearch","otp","activeItinerary","itineraries","user","loggedInUserMonitoredTrips","router","location","search","mapDispatchToProps","userActions","uiActions"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { withLoginRequired } from 'use-auth0-hooks'\n\nimport * as uiActions from '../../actions/ui'\nimport * as userActions from '../../actions/user'\nimport DesktopNav from '../app/desktop-nav'\nimport SavedTripEditor from './saved-trip-editor'\nimport TripBasicsPane from './trip-basics-pane'\nimport TripNotificationsPane from './trip-notifications-pane'\nimport TripSummaryPane from './trip-summary-pane'\nimport { arrayToDayFields, WEEKDAYS } from '../../util/monitored-trip'\nimport { getActiveItineraries, getActiveSearch } from '../../util/state'\nimport withLoggedInUserSupport from './with-logged-in-user-support'\n\n/**\n * Initializes a monitored trip object from the given query.\n */\nfunction createMonitoredTrip (loggedInUser, queryParams, itinerary) {\n  return {\n    ...arrayToDayFields(WEEKDAYS),\n    excludeFederalHolidays: true,\n    isActive: true,\n    itinerary,\n    leadTimeInMinutes: 30,\n    queryParams,\n    tripName: '',\n    // FIXME: Handle populating/checking userID from middleware too,\n    // so that providing this field is no longer needed.\n    userId: loggedInUser.id\n  }\n}\n\n/**\n * Checks that the maximum allowed number of saved trips has not been reached.\n */\nfunction hasMaxTripCount (trips) {\n  // TODO: Obtain the maximum number from a query to middleware (it is currently hard coded there too).\n  return trips && trips.length >= 5\n}\n\n/**\n * This screen handles saving a trip from an OTP query, or editing an existing saved trip\n * for the currently logged-in user.\n */\nclass SavedTripScreen extends Component {\n  constructor (props) {\n    super(props)\n\n    const monitoredTrip = this._getTripToEdit(props)\n    this.state = { monitoredTrip }\n  }\n\n  /**\n   * Handles editing events on from all panes.\n   */\n  _updateMonitoredTripState = newMonitoredTrip => {\n    const { monitoredTrip } = this.state\n    this.setState({\n      monitoredTrip: {\n        ...monitoredTrip,\n        ...newMonitoredTrip\n      }\n    })\n  }\n\n  /**\n   * Persists changes to edited trip.\n   */\n  _updateMonitoredTrip = async () => {\n    const { isCreating, createOrUpdateUserMonitoredTrip } = this.props\n    const { monitoredTrip } = this.state\n    await createOrUpdateUserMonitoredTrip(monitoredTrip, isCreating)\n  }\n\n  /**\n   * Navigates to the trip planner (for new trips).\n   */\n  _goToTripPlanner = () => {\n    this.props.routeTo('/')\n  }\n\n  /**\n   * Navigates to saved trips screen.\n   */\n  _goToSavedTrips = () => {\n    this.props.routeTo('/savedtrips')\n  }\n\n  _handleSaveNewTrip = async () => {\n    await this._updateMonitoredTrip()\n    this._goToTripPlanner()\n  }\n\n  _handleSaveTripEdits = async () => {\n    await this._updateMonitoredTrip()\n    this._goToSavedTrips()\n  }\n\n  /**\n   * Hook monitoredTrip, onMonitoredTripChange on some panes upon rendering.\n   * This returns a new render function for the passed component\n   * that allows passing other props to it later if needed.\n   */\n  _hookMonitoredTrip = Pane => props => {\n    const { monitoredTrip } = this.state\n    return (\n      <Pane\n        onMonitoredTripChange={this._updateMonitoredTripState}\n        monitoredTrip={monitoredTrip}\n        {...props}\n      />\n    )\n  }\n\n  // Make an index of pane components, so we don't render all panes at once on every render.\n  // Hook some panes to the monitoredTrip and onMonitoredTripChange props.\n  _panes = {\n    basics: this._hookMonitoredTrip(TripBasicsPane),\n    notifications: this._hookMonitoredTrip(TripNotificationsPane),\n    summary: this._hookMonitoredTrip(TripSummaryPane)\n  }\n\n  componentDidMount () {\n    const { isCreating, monitoredTrips } = this.props\n\n    // There is a middleware limit of 5 saved trips,\n    // so if that limit is already reached, alert, then show editing mode.\n    if (isCreating && hasMaxTripCount(monitoredTrips)) {\n      alert('You already have reached the maximum of five saved trips.\\n' +\n          'Please remove unused trips from your saved trips, and try again.')\n\n      this._goToSavedTrips()\n    }\n\n    // TODO: Update title bar during componentDidMount.\n  }\n\n  /**\n   * Gets the trip to edit from the props.\n   * Optionally saves the state.\n   */\n  _getTripToEdit = (props, saveState) => {\n    let monitoredTrip\n\n    if (props.isCreating) {\n      const { itinerary, loggedInUser, queryParams } = props\n      monitoredTrip = createMonitoredTrip(loggedInUser, queryParams, itinerary)\n    } else {\n      const { match, monitoredTrips } = props\n      const { path, url } = match\n      if (monitoredTrips && path === '/savedtrips/:id') {\n        // Trip id is the portion of url after the second (the last) slash.\n        const tripId = url.split('/')[2]\n        monitoredTrip = monitoredTrips.find(trip => trip.id === tripId)\n      } else {\n        monitoredTrip = null\n      }\n    }\n\n    if (saveState) {\n      this.setState({ monitoredTrip })\n    }\n\n    return monitoredTrip\n  }\n\n  componentDidUpdate (prevProps) {\n    // Update the monitored trip from the new props if the url has changed.\n    if (prevProps.match.url !== this.props.match.url) {\n      this._getTripToEdit(this.props, true)\n    }\n  }\n\n  render () {\n    const { isCreating } = this.props\n    const { monitoredTrip } = this.state\n\n    return (\n      <div className='otp'>\n        {/* TODO: Do mobile view. */}\n        <DesktopNav />\n        <form className='container'>\n          <SavedTripEditor\n            isCreating={isCreating}\n            monitoredTrip={monitoredTrip}\n            onCancel={isCreating ? this._goToTripPlanner : this._goToSavedTrips}\n            onComplete={isCreating ? this._handleSaveNewTrip : this._handleSaveTripEdits}\n            panes={this._panes}\n          />\n        </form>\n      </div>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const activeSearch = getActiveSearch(state.otp)\n  const activeItinerary = activeSearch && activeSearch.activeItinerary\n  const itineraries = getActiveItineraries(state.otp) || []\n  return {\n    itinerary: itineraries[activeItinerary],\n    loggedInUser: state.user.loggedInUser,\n    monitoredTrips: state.user.loggedInUserMonitoredTrips,\n    queryParams: state.router.location.search\n  }\n}\n\nconst mapDispatchToProps = {\n  createOrUpdateUserMonitoredTrip: userActions.createOrUpdateUserMonitoredTrip,\n  routeTo: uiActions.routeTo\n}\n\nexport default withLoggedInUserSupport(\n  withLoginRequired(connect(mapStateToProps, mapDispatchToProps)(SavedTripScreen)),\n  true\n)\n"]}