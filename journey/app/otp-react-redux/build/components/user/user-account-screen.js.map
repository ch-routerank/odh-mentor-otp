{"version":3,"sources":["user-account-screen.js"],"names":["UserAccountScreen","Component","constructor","props","newUserData","userData","state","setState","createOrUpdateUser","routeTo","_updateUserPrefs","_handleExit","Pane","_updateUserState","terms","_hookUserData","TermsOfUsePane","notifications","NotificationPrefsPane","verifyPhone","PhoneVerificationPane","locations","FavoriteLocationsPane","finish","AccountSetupFinishPane","loggedInUser","render","auth","formContents","user","email_verified","_handleExitAndSave","_panes","mapStateToProps","ownProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import clone from 'lodash/cloneDeep'\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { withLoginRequired } from 'use-auth0-hooks'\n\nimport { routeTo } from '../../actions/ui'\nimport { createOrUpdateUser } from '../../actions/user'\nimport { isNewUser } from '../../util/user'\nimport DesktopNav from '../app/desktop-nav'\nimport AccountSetupFinishPane from './account-setup-finish-pane'\nimport ExistingAccountDisplay from './existing-account-display'\nimport FavoriteLocationsPane from './favorite-locations-pane'\nimport NewAccountWizard from './new-account-wizard'\nimport NotificationPrefsPane from './notification-prefs-pane'\nimport PhoneVerificationPane from './phone-verification-pane'\nimport TermsOfUsePane from './terms-of-use-pane'\nimport VerifyEmailScreen from './verify-email-screen'\nimport withLoggedInUserSupport from './with-logged-in-user-support'\n\n/**\n * This screen handles creating/updating OTP user account settings.\n */\nclass UserAccountScreen extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      userData: clone(props.loggedInUser)\n    }\n  }\n\n  _updateUserState = newUserData => {\n    const { userData } = this.state\n    this.setState({\n      userData: {\n        ...userData,\n        ...newUserData\n      }\n    })\n  }\n\n  _updateUserPrefs = async () => {\n    // TODO: Change state of Save button while the update action takes place.\n\n    const { createOrUpdateUser } = this.props\n    const { userData } = this.state\n    await createOrUpdateUser(userData)\n\n    // TODO: Handle UI feedback (currently an alert() dialog inside createOrUpdateUser).\n  }\n\n  _handleExit = () => {\n    // On exit, route to default search route.\n    this.props.routeTo('/')\n  }\n\n  _handleExitAndSave = async () => {\n    await this._updateUserPrefs()\n    this._handleExit()\n  }\n\n  /**\n   * Hook userData, onUserDataChange on some panes upon rendering.\n   * This returns a new render function for the passed component\n   * that allows passing other props to it later if needed.\n   */\n  _hookUserData = Pane => props => {\n    const { userData } = this.state\n    return (\n      <Pane\n        onUserDataChange={this._updateUserState}\n        userData={userData}\n        {...props}\n      />\n    )\n  }\n\n  // Make an index of pane components, so we don't render all panes at once on every render.\n  // Hook some panes the userData and onUserDataChange props.\n  _panes = {\n    terms: this._hookUserData(TermsOfUsePane),\n    notifications: this._hookUserData(NotificationPrefsPane),\n    verifyPhone: PhoneVerificationPane,\n    locations: this._hookUserData(FavoriteLocationsPane),\n    finish: AccountSetupFinishPane\n  }\n\n  // TODO: Update title bar during componentDidMount.\n\n  render () {\n    const { auth, loggedInUser } = this.props\n    const { userData } = this.state\n\n    let formContents\n    if (isNewUser(loggedInUser)) {\n      if (!auth.user.email_verified) {\n        // Check and prompt for email verification first to avoid extra user wait.\n        formContents = <VerifyEmailScreen />\n      } else {\n        // New users are shown \"wizard\" (step-by-step) mode\n        // (includes when a \"new\" user clicks 'My Account' from the account menu in the nav bar).\n        formContents = (\n          <NewAccountWizard\n            onComplete={this._handleExitAndSave}\n            panes={this._panes}\n            userData={userData}\n          />\n        )\n      }\n    } else {\n      formContents = (\n        // Existing users are shown all panes together.\n        <ExistingAccountDisplay\n          onCancel={this._handleExit}\n          onComplete={this._handleExitAndSave}\n          panes={this._panes}\n        />\n      )\n    }\n\n    return (\n      <div className='otp'>\n        {/* TODO: Do mobile view. */}\n        <DesktopNav />\n        <form className='container'>\n          {formContents}\n        </form>\n      </div>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    loggedInUser: state.user.loggedInUser\n  }\n}\n\nconst mapDispatchToProps = {\n  createOrUpdateUser,\n  routeTo\n}\n\nexport default withLoggedInUserSupport(\n  withLoginRequired(connect(mapStateToProps, mapDispatchToProps)(UserAccountScreen)),\n  true\n)\n"]}