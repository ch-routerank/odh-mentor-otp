{"version":3,"sources":["pattern-row.js"],"names":["PatternRow","Component","constructor","setState","expanded","state","pattern","route","stopTimes","homeTimezone","stopViewerArriving","stopViewerConfig","timeFormat","props","sortedStopTimes","hasStopTimes","length","concat","sort","a","b","aTime","serviceDay","realtimeDeparture","bTime","slice","numberOfDepartures","routeName","shortName","longName","headsign","_toggleExpandedView","animation","map","stopTime","i","display","marginTop","fontSize","realtimeState","departureDelay","backgroundColor","scheduledDeparture","time","textAlign","blockId","render","showScheduleView","_renderScheduleView","_renderNextArrivalsView"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { VelocityTransitionGroup } from 'velocity-react'\n\nimport Icon from '../narrative/icon'\nimport { getFormattedStopTime, getStatusLabel } from '../../util/viewer'\n\n/**\n * Represents a single pattern row for displaying arrival times in the stop\n * viewer.\n */\nexport default class PatternRow extends Component {\n  constructor () {\n    super()\n    this.state = { expanded: false }\n  }\n\n  _toggleExpandedView = () => {\n    this.setState({ expanded: !this.state.expanded })\n  }\n\n  _renderNextArrivalsView = () => {\n    const {\n      pattern,\n      route,\n      stopTimes,\n      homeTimezone,\n      stopViewerArriving,\n      stopViewerConfig,\n      timeFormat\n    } = this.props\n    // sort stop times by next departure\n    let sortedStopTimes = []\n    const hasStopTimes = stopTimes && stopTimes.length > 0\n    if (hasStopTimes) {\n      sortedStopTimes = stopTimes\n        .concat()\n        .sort((a, b) => {\n          const aTime = a.serviceDay + a.realtimeDeparture\n          const bTime = b.serviceDay + b.realtimeDeparture\n          return aTime - bTime\n        })\n        // We request only x departures per pattern, but the patterns are merged\n        // according to shared headsigns, so we need to slice the stop times\n        // here as well to ensure only x times are shown per route/headsign combo.\n        // This is applied after the sort, so we're keeping the soonest departures.\n        .slice(0, stopViewerConfig.numberOfDepartures)\n    } else {\n      // Do not include pattern row if it has no stop times.\n      return null\n    }\n    const routeName = route.shortName ? route.shortName : route.longName\n\n    return (\n      <>\n        {/* header row */}\n        <div className='header'>\n          {/* route name */}\n          <div className='route-name'>\n            <b>{routeName}</b> To {pattern.headsign}\n          </div>\n          {/* next departure preview */}\n          {hasStopTimes && (\n            <div className='next-trip-preview'>\n              {getFormattedStopTime(sortedStopTimes[0], homeTimezone, stopViewerArriving, timeFormat)}\n            </div>\n          )}\n\n          {/* expansion chevron button */}\n          <div className='expansion-button-container'>\n            <button className='expansion-button' onClick={this._toggleExpandedView}>\n              <Icon type={`chevron-${this.state.expanded ? 'up' : 'down'}`} />\n            </button>\n          </div>\n        </div>\n\n        {/* expanded view */}\n        <VelocityTransitionGroup\n          enter={{ animation: 'slideDown' }}\n          leave={{ animation: 'slideUp' }}>\n          {this.state.expanded && (\n            <div>\n              <div className='trip-table'>\n                {/* trips table header row */}\n                <div className='header'>\n                  <div className='cell' />\n                  <div className='cell time-column'>DEPARTURE</div>\n                  <div className='cell status-column'>STATUS</div>\n                </div>\n\n                {/* list of upcoming trips */}\n                {hasStopTimes && (\n                  sortedStopTimes.map((stopTime, i) => {\n                    return (\n                      <div\n                        className='trip-row'\n                        style={{ display: 'table-row', marginTop: 6, fontSize: 14 }}\n                        key={i}>\n                        <div className='cell'>\n                          To {stopTime.headsign}\n                        </div>\n                        <div className='cell time-column'>\n                          {getFormattedStopTime(stopTime, homeTimezone, stopViewerArriving, timeFormat)}\n                        </div>\n                        <div className='cell status-column'>\n                          {stopTime.realtimeState === 'UPDATED'\n                            ? getStatusLabel(stopTime.departureDelay)\n                            : <div\n                              className='status-label'\n                              style={{ backgroundColor: '#bbb' }}>\n                              Scheduled\n                            </div>\n                          }\n                        </div>\n                      </div>\n                    )\n                  })\n                )}\n              </div>\n            </div>\n          )}\n        </VelocityTransitionGroup>\n      </>\n    )\n  }\n\n  _renderScheduleView = () => {\n    const {\n      pattern,\n      route,\n      stopTimes,\n      homeTimezone,\n      stopViewerArriving,\n      stopViewerConfig,\n      timeFormat\n    } = this.props\n    // sort stop times by next departure\n    let sortedStopTimes = []\n    const hasStopTimes = stopTimes && stopTimes.length > 0\n    if (hasStopTimes) {\n      sortedStopTimes = stopTimes\n        .concat()\n        .sort((a, b) => {\n          const aTime = a.serviceDay + a.scheduledDeparture\n          const bTime = b.serviceDay + b.scheduledDeparture\n          return aTime - bTime\n        })\n        // We request only x departures per pattern, but the patterns are merged\n        // according to shared headsigns, so we need to slice the stop times\n        // here as well to ensure only x times are shown per route/headsign combo.\n        // This is applied after the sort, so we're keeping the soonest departures.\n        .slice(0, stopViewerConfig.numberOfDepartures)\n    } else {\n      // Do not include pattern row if it has no stop times.\n      return null\n    }\n    const routeName = route.shortName ? route.shortName : route.longName\n    return (\n      <>\n        {/* header row */}\n        <div className='header'>\n          {/* route name */}\n          <div className='route-name'>\n            <b>{routeName}</b> To {pattern.headsign}\n          </div>\n        </div>\n        <div>\n          <div className='trip-table'>\n            {/* trips table header row */}\n            <div className='header'>\n              <div className='cell' />\n              <div className='cell'>BLOCK</div>\n              <div className='cell time-column'>DEPARTURE</div>\n            </div>\n\n            {/* list of upcoming trips */}\n            {hasStopTimes && (\n              sortedStopTimes.map((stopTime, i) => {\n                // Get formatted scheduled departure time.\n                const time = getFormattedStopTime(stopTime, homeTimezone, stopViewerArriving, timeFormat, true)\n                return (\n                  <div\n                    className='trip-row'\n                    style={{ display: 'table-row', marginTop: 6, fontSize: 14 }}\n                    key={i}>\n                    <div className='cell'>\n                      To {stopTime.headsign}\n                    </div>\n                    <div className='cell' style={{textAlign: 'center'}}>\n                      {stopTime.blockId}\n                    </div>\n                    <div className='cell time-column'>\n                      {time}\n                    </div>\n                  </div>\n                )\n              })\n            )}\n          </div>\n        </div>\n      </>\n    )\n  }\n\n  render () {\n    return (\n      <div className='route-row'>\n        {this.props.showScheduleView\n          ? this._renderScheduleView()\n          : this._renderNextArrivalsView()\n        }\n      </div>\n    )\n  }\n}\n"]}