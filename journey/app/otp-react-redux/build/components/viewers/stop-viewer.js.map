{"version":3,"sources":["stop-viewer.js"],"names":["getTimeFormat","getUserTimezone","OTP_API_DATE_FORMAT","coreUtils","time","defaultState","date","format","scheduleView","StopViewer","Component","props","setMainPanelContent","locationType","setLocation","stopData","location","name","lat","lon","reverseGeocode","setState","popupPosition","_setLocationFromStop","findStopTimesForStop","viewedStop","stopId","spin","window","setTimeout","_stopSpin","autoRefreshStopTimes","toggleAutoRefresh","_refreshStopTimes","timer","setInterval","clearInterval","state","forgetStop","rememberStop","_isFavorite","id","isShowingScheduleView","_stopAutoRefresh","startTime","_getStartTimeForDate","timeRange","_startAutoRefresh","favoriteStops","findIndex","s","startOf","unix","evt","target","value","hideBackButton","showUserSettings","_backClicked","_toggleFavorite","color","padding","marginLeft","clear","includes","split","fontSize","_toggleScheduleView","_onClickPlanFrom","_onClickPlanTo","onKeyDown","width","border","outline","handleDateChange","componentDidMount","findStop","componentWillUnmount","componentDidUpdate","prevProps","render","homeTimezone","stopViewerArriving","stopViewerConfig","timeFormat","transitOperators","hasStopTimesAndRoutes","stopTimes","length","routes","stopTimesByPattern","routeComparator","route","makeRouteComparator","patternHeadsignComparator","makeStringValueComparator","pattern","headsign","patternComparator","patternA","patternB","routeCompareValue","_renderHeader","_renderControls","marginTop","Object","values","sort","map","patternTimes","console","warn","times","fontWeight","_onToggleAutoRefresh","stopTimesLastUpdated","tz","PropTypes","bool","object","mapStateToProps","ownProps","otp","user","config","ui","transitIndex","stops","language","mapDispatchToProps"],"mappings":"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","sourcesContent":["import moment from 'moment'\nimport 'moment-timezone'\nimport coreUtils from '@opentripplanner/core-utils'\nimport FromToLocationPicker from '@opentripplanner/from-to-location-picker'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n\nimport Icon from '../narrative/icon'\nimport { setMainPanelContent, toggleAutoRefresh } from '../../actions/ui'\nimport { findStop, findStopTimesForStop } from '../../actions/api'\nimport { forgetStop, rememberStop, setLocation } from '../../actions/map'\nimport PatternRow from './pattern-row'\nimport { getShowUserSettings, getStopViewerConfig } from '../../util/state'\nimport { getRouteIdForPattern, getStopTimesByPattern } from '../../util/viewer'\n\nconst {\n  getTimeFormat,\n  getUserTimezone,\n  OTP_API_DATE_FORMAT\n} = coreUtils.time\n\nconst defaultState = {\n  date: moment().format(OTP_API_DATE_FORMAT),\n  scheduleView: false\n}\n\nclass StopViewer extends Component {\n  state = defaultState\n\n  static propTypes = {\n    hideBackButton: PropTypes.bool,\n    stopData: PropTypes.object,\n    viewedStop: PropTypes.object\n  }\n\n  _backClicked = () => this.props.setMainPanelContent(null)\n\n  _setLocationFromStop = (locationType) => {\n    const { setLocation, stopData } = this.props\n    const location = {\n      name: stopData.name,\n      lat: stopData.lat,\n      lon: stopData.lon\n    }\n    setLocation({ locationType, location, reverseGeocode: true })\n    this.setState({ popupPosition: null })\n  }\n\n  _onClickPlanTo = () => this._setLocationFromStop('to')\n\n  _onClickPlanFrom = () => this._setLocationFromStop('from')\n\n  _refreshStopTimes = () => {\n    const { findStopTimesForStop, viewedStop } = this.props\n    findStopTimesForStop({ stopId: viewedStop.stopId })\n    // TODO: GraphQL approach would just call findStop again.\n    // findStop({ stopId: viewedStop.stopId })\n    this.setState({ spin: true })\n    window.setTimeout(this._stopSpin, 1000)\n  }\n\n  _onToggleAutoRefresh = () => {\n    const { autoRefreshStopTimes, toggleAutoRefresh } = this.props\n    if (autoRefreshStopTimes) {\n      toggleAutoRefresh(false)\n    } else {\n      // Turn on auto-refresh and refresh immediately to give user feedback.\n      this._refreshStopTimes()\n      toggleAutoRefresh(true)\n    }\n  }\n\n  _stopSpin = () => this.setState({ spin: false })\n\n  componentDidMount () {\n    // Load the viewed stop in the store when the Stop Viewer first mounts\n    this.props.findStop({ stopId: this.props.viewedStop.stopId })\n    // Turn on stop times refresh if enabled.\n    if (this.props.autoRefreshStopTimes) this._startAutoRefresh()\n  }\n\n  componentWillUnmount () {\n    // Turn off auto refresh unconditionally (just in case).\n    this._stopAutoRefresh()\n  }\n\n  _startAutoRefresh = () => {\n    const timer = window.setInterval(this._refreshStopTimes, 10000)\n    this.setState({ timer })\n  }\n\n  _stopAutoRefresh = () => {\n    window.clearInterval(this.state.timer)\n  }\n\n  _toggleFavorite = () => {\n    const { forgetStop, rememberStop, stopData } = this.props\n    if (this._isFavorite()) forgetStop(stopData.id)\n    else rememberStop(stopData)\n  }\n\n  _toggleScheduleView = () => {\n    const { findStopTimesForStop, viewedStop } = this.props\n    const {date, scheduleView: isShowingScheduleView} = this.state\n    if (!isShowingScheduleView) {\n      // If not currently showing schedule view, fetch schedules for current\n      // date and turn off auto refresh.\n      this._stopAutoRefresh()\n      findStopTimesForStop({\n        stopId: viewedStop.stopId,\n        startTime: this._getStartTimeForDate(date),\n        timeRange: 86400\n      })\n    } else {\n      // Otherwise, turn on auto refresh.\n      this._startAutoRefresh()\n      this._refreshStopTimes()\n    }\n    this.setState({scheduleView: !isShowingScheduleView})\n  }\n\n  _isFavorite = () => this.props.stopData &&\n    this.props.favoriteStops.findIndex(s => s.id === this.props.stopData.id) !== -1\n\n  // refresh the stop in the store if the viewed stop changes w/ the\n  // Stop Viewer already mounted\n  componentDidUpdate (prevProps) {\n    if (\n      prevProps.viewedStop &&\n      this.props.viewedStop &&\n      prevProps.viewedStop.stopId !== this.props.viewedStop.stopId\n    ) {\n      // Reset state to default if stop changes (i.e., show next arrivals).\n      this.setState(defaultState)\n      this.props.findStop({ stopId: this.props.viewedStop.stopId })\n    }\n    // Handle stopping or starting the auto refresh timer.\n    if (prevProps.autoRefreshStopTimes && !this.props.autoRefreshStopTimes) this._stopAutoRefresh()\n    else if (!prevProps.autoRefreshStopTimes && this.props.autoRefreshStopTimes) this._startAutoRefresh()\n  }\n\n  /**\n   * Get today at midnight (morning) in seconds since epoch.\n   * FIXME: handle timezone diffs?\n   */\n  _getStartTimeForDate = date => moment(date).startOf('day').unix()\n\n  handleDateChange = evt => {\n    const { findStopTimesForStop, viewedStop } = this.props\n    const date = evt.target.value\n    findStopTimesForStop({\n      stopId: viewedStop.stopId,\n      startTime: this._getStartTimeForDate(date),\n      timeRange: 86400\n    })\n    this.setState({ date })\n  }\n\n  _renderHeader = () => {\n    const {hideBackButton, showUserSettings, stopData} = this.props\n    return (\n      <div className='stop-viewer-header'>\n        {/* Back button */}\n        {!hideBackButton && (\n          <div className='back-button-container'>\n            <Button\n              bsSize='small'\n              onClick={this._backClicked}\n            ><Icon type='arrow-left' />Back</Button>\n          </div>\n        )}\n\n        {/* Header Text */}\n        <div className='header-text'>\n          {stopData\n            ? <span>{stopData.name}</span>\n            : <span>Loading Stop...</span>\n          }\n          {showUserSettings\n            ? <Button\n              onClick={this._toggleFavorite}\n              bsSize='large'\n              style={{\n                color: this._isFavorite() ? 'yellow' : 'black',\n                padding: 0,\n                marginLeft: '5px'\n              }}\n              bsStyle='link'>\n              <Icon type={this._isFavorite() ? 'star' : 'star-o'} />\n            </Button>\n            : null\n          }\n        </div>\n        <div style={{ clear: 'both' }} />\n      </div>\n    )\n  }\n\n  /**\n   * Plan trip from/to here buttons, plus the schedule/next arrivals toggle.\n   * TODO: Can this use SetFromToButtons?\n   */\n  _renderControls = () => {\n    const {stopData} = this.props\n    const {scheduleView} = this.state\n    // Rewrite stop ID to not include Agency prefix, if present\n    // TODO: make this functionality configurable?\n    let stopId\n    if (stopData && stopData.id) {\n      stopId = stopData.id.includes(':') ? stopData.id.split(':')[1] : stopData.id\n    }\n    return (\n      <div>\n        <div>\n          <b>Stop ID</b>: {stopId}\n          <button\n            className='link-button pull-right'\n            style={{ fontSize: 'small' }}\n            onClick={this._toggleScheduleView}>\n            <Icon type={scheduleView ? 'clock-o' : 'calendar'} />{' '}\n            View {scheduleView ? 'next arrivals' : 'schedule'}\n          </button>\n        </div>\n        <b>Plan a trip:</b>\n        <FromToLocationPicker\n          onFromClick={this._onClickPlanFrom}\n          onToClick={this._onClickPlanTo} />\n        {scheduleView && <input\n          className='pull-right'\n          onKeyDown={this.props.onKeyDown}\n          type='date'\n          value={this.state.date}\n          style={{\n            width: '115px',\n            border: 'none',\n            outline: 'none'\n          }}\n          required\n          onChange={this.handleDateChange}\n        />}\n      </div>\n    )\n  }\n\n  render () {\n    const {\n      homeTimezone,\n      stopData,\n      stopViewerArriving,\n      stopViewerConfig,\n      timeFormat,\n      transitOperators\n    } = this.props\n    const { scheduleView, spin } = this.state\n    const hasStopTimesAndRoutes = !!(stopData && stopData.stopTimes && stopData.stopTimes.length > 0 && stopData.routes)\n    // construct a lookup table mapping pattern (e.g. 'ROUTE_ID-HEADSIGN') to\n    // an array of stoptimes\n    const stopTimesByPattern = getStopTimesByPattern(stopData)\n    const routeComparator = coreUtils.route.makeRouteComparator(\n      transitOperators\n    )\n    const patternHeadsignComparator = coreUtils.route.makeStringValueComparator(\n      pattern => pattern.pattern.headsign\n    )\n    const patternComparator = (patternA, patternB) => {\n      // first sort by routes\n      const routeCompareValue = routeComparator(\n        patternA.route,\n        patternB.route\n      )\n      if (routeCompareValue !== 0) return routeCompareValue\n\n      // if same route, sort by headsign\n      return patternHeadsignComparator(patternA, patternB)\n    }\n    return (\n      <div className='stop-viewer'>\n        {/* Header Block */}\n        {this._renderHeader()}\n\n        {stopData && (\n          <div className='stop-viewer-body'>\n            {this._renderControls()}\n            {hasStopTimesAndRoutes\n              ? <>\n                <div style={{ marginTop: 20 }}>\n                  {Object.values(stopTimesByPattern)\n                    .sort(patternComparator)\n                    .map(patternTimes => {\n                      // Only add pattern row if route is found.\n                      // FIXME: there is currently a bug with the alernative transit index\n                      // where routes are not associated with the stop if the only stoptimes\n                      // for the stop are drop off only. See https://github.com/ibi-group/trimet-mod-otp/issues/217\n                      if (!patternTimes.route) {\n                        console.warn(`Cannot render stop times for missing route ID: ${getRouteIdForPattern(patternTimes.pattern)}`)\n                        return null\n                      }\n                      return (\n                        <PatternRow\n                          pattern={patternTimes.pattern}\n                          route={patternTimes.route}\n                          stopTimes={patternTimes.times}\n                          stopViewerConfig={stopViewerConfig}\n                          showScheduleView={scheduleView}\n                          key={patternTimes.id}\n                          stopViewerArriving={stopViewerArriving}\n                          homeTimezone={homeTimezone}\n                          timeFormat={timeFormat}\n                        />\n                      )\n                    })\n                  }\n                </div>\n                {!scheduleView\n                  // If showing next arrivals, include auto update controls.\n                  ? <div style={{ marginTop: '20px' }}>\n                    <label style={{ fontWeight: 300, fontSize: 'small' }}>\n                      <input\n                        name='autoUpdate'\n                        type='checkbox'\n                        checked={this.props.autoRefreshStopTimes}\n                        onChange={this._onToggleAutoRefresh} />{' '}\n                      Auto-refresh arrivals?\n                    </label>\n                    <button\n                      className='link-button pull-right'\n                      style={{ fontSize: 'small' }}\n                      onClick={this._refreshStopTimes}>\n                      <Icon\n                        className={spin ? 'fa-spin' : ''}\n                        type='refresh' />{' '}\n                      {moment(stopData.stopTimesLastUpdated)\n                        .tz(getUserTimezone())\n                        .format(timeFormat)}\n                    </button>\n                  </div>\n                  : null\n                }\n              </>\n              : <div>No stop times found for date.</div>\n            }\n            {/* Future: add stop details */}\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\n// connect to redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const showUserSettings = getShowUserSettings(state.otp)\n  const stopViewerConfig = getStopViewerConfig(state.otp)\n  return {\n    autoRefreshStopTimes: state.otp.user.autoRefreshStopTimes,\n    favoriteStops: state.otp.user.favoriteStops,\n    homeTimezone: state.otp.config.homeTimezone,\n    viewedStop: state.otp.ui.viewedStop,\n    showUserSettings,\n    stopData: state.otp.transitIndex.stops[state.otp.ui.viewedStop.stopId],\n    stopViewerArriving: state.otp.config.language.stopViewerArriving,\n    stopViewerConfig,\n    timeFormat: getTimeFormat(state.otp.config),\n    transitOperators: state.otp.config.transitOperators\n  }\n}\n\nconst mapDispatchToProps = {\n  findStop,\n  findStopTimesForStop,\n  forgetStop,\n  rememberStop,\n  setLocation,\n  setMainPanelContent,\n  toggleAutoRefresh\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StopViewer)\n"]}