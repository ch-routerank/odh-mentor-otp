{"version":3,"sources":["SelectVehicles.js"],"names":["vehicleData","require","SelectVehicles","MapLayer","selectedRoutes","selectedStop","routeData","mapZoom","trackedVehicle","vehicles","e","props","onOverlayAdded","onOverlayRemoved","viewport","setState","zoom","onViewportChanged","componentDidMount","console","log","registerOverlay","getLeafletContext","map","getZoom","componentWillUnmount","componentDidUpdate","componentWillReceiveProps","leaflet","trackVehicle","state","id","v","findVehicle","ll","lat","lon","setView","isTrackingVehicle","vehicle","find","createLeafletElement","updateLeafletElement","render","limit","slice","Math","min","length","closeZoom","farZoom","midZoom"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { FeatureGroup, MapLayer, withLeaflet } from \"react-leaflet\";\n\nimport callIfValid from \"../src/util\";\n\nimport VehicleMarker from \"./VehicleMarker\";\n\nconst vehicleData = require(\"./vehicle-data/all-trimet.json\"); // https://maps.trimet.org/gtfs/rt/vehicles/routes/all\n\n/**\n * This component demonstrates an example map overlay that shows real-time transit vehicle locations on a leaflet map.\n * It is modeled after the component available in this file:\n * https://github.com/OpenTransitTools/transit-components/blob/master/lib/vehicles/SelectVehicles.js\n */\nclass SelectVehicles extends MapLayer {\n  state = {\n    selectedRoutes: [],\n    selectedStop: null,\n    routeData: [], // TBD Array of <RouteData > components, which comprise route and stop geo data\n    mapZoom: 0,\n    trackedVehicle: vehicleData[0],\n    vehicles: vehicleData\n  };\n\n  // these zoom layers control which markers are shown (e.g. closeZoom is where icons are turned on)\n  closeZoom = 15;\n\n  midZoom = 13;\n\n  farZoom = 10;\n\n  /**\n   * Implement method onOverlayAdded to get notified whenever this layer\n   * gets added to BaseMap (e.g. when user clicks the map's layer control).\n   * This method is optional.\n   * @param e The event data. See https://leafletjs.com/reference-1.6.0.html#map-overlayadd for details.\n   */\n  onOverlayAdded = e => {\n    callIfValid(this.props.onOverlayAdded)(e);\n  };\n\n  /**\n   * Implement method onOverlayRemoved to get notified whenever this layer\n   * gets removed from BaseMap (e.g. when user clicks the map's layer control).\n   * This method is optional.\n   * @param e The event data. See https://leafletjs.com/reference-1.6.0.html#map-overlayremove for details.\n   */\n  onOverlayRemoved = e => {\n    callIfValid(this.props.onOverlayRemoved)(e);\n  };\n\n  /**\n   * Implement method onViewportChanged to get notified whenever the BaseMap's center\n   * or zoom level change (e.g. as the result of the user panning or zooming the map).\n   * This method is optional.\n   * @param viewport The viewport data. See https://github.com/PaulLeCam/react-leaflet/blob/master/example/components/viewport.js for details.\n   */\n  onViewportChanged = viewport => {\n    this.setState({ mapZoom: viewport.zoom });\n    callIfValid(this.props.onViewportChanged)(viewport);\n  };\n\n  componentDidMount() {\n    console.log(\"SelectedVehicles::componentDidMount\");\n    const { registerOverlay } = this.props;\n    callIfValid(registerOverlay)(this);\n\n    // Initialize zoom state here? (may trigger render again.)\n    const zoom = this.getLeafletContext().map.getZoom();\n    this.setState({ mapZoom: zoom });\n  }\n\n  componentWillUnmount() {}\n\n  componentDidUpdate() {\n    // this.trackVehicle();\n  }\n\n  componentWillReceiveProps(/* nextProps */) {}\n\n  /**\n   * this method is used for backporting to React 15\n   * v16:  return this.props.leaflet;\n   * v15:  return this.context;\n   */\n  getLeafletContext() {\n    return this.props.leaflet;\n  }\n\n  trackVehicle() {\n    if (\n      this.state.trackedVehicle != null &&\n      this.state.trackedVehicle.id != null\n    ) {\n      const v = this.findVehicle(this.state.trackedVehicle.id);\n      if (v != null) {\n        const ll = [v.lat, v.lon];\n        this.getLeafletContext().map.setView(ll);\n        this.setState({ trackedVehicle: v }); // update the state with newest vehicle\n      }\n    }\n  }\n\n  isTrackingVehicle(vehicle) {\n    return (\n      this.state.trackedVehicle && this.state.trackedVehicle.id === vehicle.id\n    );\n  }\n\n  findVehicle(id) {\n    return this.state.vehicles.find(v => v.id === id);\n  }\n\n  // need to implement create interface (and update interface for older React-Leaflet versions)\n  createLeafletElement(/* props */) {}\n\n  updateLeafletElement(/* props */) {}\n\n  render() {\n    const { limit = 5 } = this.props;\n    const { mapZoom } = this.state;\n    let { vehicles } = this.state;\n    vehicles = vehicles.slice(0, Math.min(limit, vehicles.length) - 1);\n    return (\n      <FeatureGroup id=\"vehicles fg\">\n        {mapZoom <= this.closeZoom &&\n          mapZoom >= this.farZoom &&\n          vehicles &&\n          vehicles.map(v => (\n            <VehicleMarker\n              key={v.id}\n              vehicle={v}\n              controller={this}\n              closeZoom={this.closeZoom}\n              midZoom={this.midZoom}\n              farZoom={this.farZoom}\n            />\n          ))}\n      </FeatureGroup>\n    );\n  }\n}\n\nexport default withLeaflet(SelectVehicles);\n"]}