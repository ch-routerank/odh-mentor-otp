{"version":3,"sources":["query.js"],"names":["_time","require","_query","describe","afterEach","restoreDateNowBehavior","it","expect","planParamsToQuery","arriveBy","bannedRoutes","companies","date","fromPlace","ignoreRealtimeUpdates","maxWalkDistance","mode","optimize","showIntermediateStops","time","toPlace","ui_activeItinerary","ui_activeSearch","walkSpeed","toMatchSnapshot","setDefaultTestTime","getDefaultQuery","parseLocationString"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,6BAAD,CAAnB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAApB;;AAEAE,QAAQ,CAAC,OAAD,EAAU,MAAM;AACtBC,EAAAA,SAAS,CAACJ,KAAK,CAACK,sBAAP,CAAT;AACAF,EAAAA,QAAQ,CAAC,mBAAD,EAAsB,MAAM;AAClCG,IAAAA,EAAE,CAAC,gCAAD,EAAmC,YAAY;AAC/CC,MAAAA,MAAM,CAAC,MAAM,CAAC,GAAGL,MAAM,CAACM,iBAAX,EAA8B;AACzCC,QAAAA,QAAQ,EAAE,OAD+B;AAEzCC,QAAAA,YAAY,EAAE,QAF2B;AAGzCC,QAAAA,SAAS,EAAE,EAH8B;AAIzCC,QAAAA,IAAI,EAAE,YAJmC;AAKzCC,QAAAA,SAAS,EAAE,oEAL8B;AAMzCC,QAAAA,qBAAqB,EAAE,MANkB;AAOzCC,QAAAA,eAAe,EAAE,MAPwB;AAQzCC,QAAAA,IAAI,EAAE,4BARmC;AASzCC,QAAAA,QAAQ,EAAE,OAT+B;AAUzCC,QAAAA,qBAAqB,EAAE,MAVkB;AAWzCC,QAAAA,IAAI,EAAE,OAXmC;AAYzCC,QAAAA,OAAO,EAAE,2DAZgC;AAazCC,QAAAA,kBAAkB,EAAE,GAbqB;AAczCC,QAAAA,eAAe,EAAE,WAdwB;AAezCC,QAAAA,SAAS,EAAE;AAf8B,OAA9B,CAAP,CAAN,CAgBIC,eAhBJ;AAiBD,KAlBC,CAAF;AAmBD,GApBO,CAAR;AAqBArB,EAAAA,QAAQ,CAAC,iBAAD,EAAoB,MAAM;AAChCG,IAAAA,EAAE,CAAC,6BAAD,EAAgC,MAAM;AACtC,OAAC,GAAGN,KAAK,CAACyB,kBAAV;AACAlB,MAAAA,MAAM,CAAC,CAAC,GAAGL,MAAM,CAACwB,eAAX,GAAD,CAAN,CAAsCF,eAAtC;AACD,KAHC,CAAF;AAID,GALO,CAAR;AAMArB,EAAAA,QAAQ,CAAC,qBAAD,EAAwB,MAAM;AACpCG,IAAAA,EAAE,CAAC,mCAAD,EAAsC,MAAM;AAC5CC,MAAAA,MAAM,CAAC,CAAC,GAAGL,MAAM,CAACyB,mBAAX,EAAgC,IAAhC,CAAD,CAAN,CAA8CH,eAA9C;AACD,KAFC,CAAF;AAGAlB,IAAAA,EAAE,CAAC,wCAAD,EAA2C,MAAM;AACjDC,MAAAA,MAAM,CAAC,CAAC,GAAGL,MAAM,CAACyB,mBAAX,EAAgC,0CAAhC,CAAD,CAAN,CAAoFH,eAApF;AACD,KAFC,CAAF;AAGAlB,IAAAA,EAAE,CAAC,4EAAD,EAA+E,MAAM;AACrFC,MAAAA,MAAM,CAAC,CAAC,GAAGL,MAAM,CAACyB,mBAAX,EAAgC,6BAAhC,CAAD,CAAN,CAAuEH,eAAvE;AACD,KAFC,CAAF;AAGD,GAVO,CAAR;AAWD,CAxCO,CAAR","sourcesContent":["\"use strict\";\n\nvar _time = require(\"../../../../test-utils/time\");\n\nvar _query = require(\"../query\");\n\ndescribe(\"query\", () => {\n  afterEach(_time.restoreDateNowBehavior);\n  describe(\"planParamsToQuery\", () => {\n    it(\"should parse a depart at query\", async () => {\n      expect(await (0, _query.planParamsToQuery)({\n        arriveBy: \"false\",\n        bannedRoutes: \"897ABC\",\n        companies: \"\",\n        date: \"2019-10-31\",\n        fromPlace: \"Guide Dogs for the Blind, Portland, OR, USA::45.517373,-122.675601\",\n        ignoreRealtimeUpdates: \"true\",\n        maxWalkDistance: \"1207\",\n        mode: \"BUS,TRAM,RAIL,GONDOLA,WALK\",\n        optimize: \"QUICK\",\n        showIntermediateStops: \"true\",\n        time: \"17:45\",\n        toPlace: \"Weather Machine, Portland, OR, USA::45.519015,-122.679321\",\n        ui_activeItinerary: \"0\",\n        ui_activeSearch: \"irc7h4rb8\",\n        walkSpeed: \"1.34\"\n      })).toMatchSnapshot();\n    });\n  });\n  describe(\"getDefaultQuery\", () => {\n    it(\"should return default query\", () => {\n      (0, _time.setDefaultTestTime)();\n      expect((0, _query.getDefaultQuery)()).toMatchSnapshot();\n    });\n  });\n  describe(\"parseLocationString\", () => {\n    it(\"should return null for null input\", () => {\n      expect((0, _query.parseLocationString)(null)).toMatchSnapshot();\n    });\n    it(\"should return location for valid input\", () => {\n      expect((0, _query.parseLocationString)(\"123 Main St::33.983929829,-87.3892387982\")).toMatchSnapshot();\n    });\n    it(\"should return location with coordinates as name for coordinates-only input\", () => {\n      expect((0, _query.parseLocationString)(\"33.983929829,-87.3892387982\")).toMatchSnapshot();\n    });\n  });\n});"]}