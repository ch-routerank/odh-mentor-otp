{"version":3,"sources":["route.js"],"names":["_route","require","route1","route2","route3","route4","route5","route6","route7","route8","route9","route10","route11","route12","route13","route14","route15","sortRoutes","routes","sort","routeComparator","describe","it","expectedTransitOperator","id","expect","getTransitOperatorFromId","toBe","toBeNull","otpRoute","getTransitOperatorFromOtpRoute","toMatchSnapshot"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _route = require(\"../route\");\n\nconst {\n  route1,\n  route2,\n  route3,\n  route4,\n  route5,\n  route6,\n  route7,\n  route8,\n  route9,\n  route10,\n  route11,\n  route12,\n  route13,\n  route14,\n  route15\n} = require(\"./__mocks__/itinerary.json\");\n\nfunction sortRoutes(...routes) {\n  routes.sort(_route.routeComparator);\n  return routes;\n}\n\ndescribe(\"util > route\", () => {\n  describe(\"getTransitOperatorFromId\", () => {\n    it(\"should get a transit operator\", () => {\n      const expectedTransitOperator = {\n        id: \"1\"\n      };\n      expect((0, _route.getTransitOperatorFromId)(\"1\", [{\n        id: \"2\"\n      }, expectedTransitOperator])).toBe(expectedTransitOperator);\n    });\n    it(\"should return null if transit operator is not found\", () => {\n      expect((0, _route.getTransitOperatorFromId)(\"abc\", [])).toBeNull();\n    });\n  });\n  describe(\"getTransitOperatorFromOtpRoute\", () => {\n    const otpRoute = {\n      id: \"1:abc\"\n    };\n    it(\"should get a transit operator\", () => {\n      const expectedTransitOperator = {\n        id: \"1\"\n      };\n      expect((0, _route.getTransitOperatorFromOtpRoute)(otpRoute, [{\n        id: \"2\"\n      }, expectedTransitOperator])).toBe(expectedTransitOperator);\n    });\n    it(\"should return null if transit operator is not found\", () => {\n      expect((0, _route.getTransitOperatorFromOtpRoute)(otpRoute, [])).toBeNull();\n    });\n  });\n  describe(\"routeComparator\", () => {\n    it(\"should sort routes based off of sortOrder\", () => {\n      expect(sortRoutes(route1, route2)).toMatchSnapshot();\n    });\n    it(\"should prioritize routes with valid sortOrder\", () => {\n      expect(sortRoutes(route2, route3)).toMatchSnapshot();\n    });\n    it(\"should sort routes based off of integer shortName\", () => {\n      expect(sortRoutes(route3, route4)).toMatchSnapshot();\n    });\n    it(\"should prioritize routes with integer shortNames over alphabetic shortNames\", () => {\n      expect(sortRoutes(route4, route5)).toMatchSnapshot();\n    });\n    it(\"should sort routes based off of shortNames\", () => {\n      expect(sortRoutes(route5, route6)).toMatchSnapshot();\n    });\n    it(\"should sort routes with alphanumeric shortNames\", () => {\n      expect(sortRoutes(route14, route15)).toMatchSnapshot();\n    });\n    it(\"should prioritize routes with shortNames over those with just longNames\", () => {\n      expect(sortRoutes(route6, route7)).toMatchSnapshot();\n    });\n    it(\"should sort routes based off of longNames\", () => {\n      expect(sortRoutes(route9, route10)).toMatchSnapshot();\n    });\n    it(\"should sort routes on all of the criteria at once\", () => {\n      expect(sortRoutes(route1, route2, route3, route4, route5, route6, route7, route8, route9, route10, route11, route12, route13, route14, route15)).toMatchSnapshot();\n    });\n    it(\"should sort based off of route type\", () => {\n      expect(sortRoutes(route12, route13)).toMatchSnapshot();\n    });\n  });\n});"]}