{"version":3,"sources":["itinerary.js"],"names":["Object","defineProperty","exports","value","getTransitModes","isTransit","isWalk","isBicycle","isBicycleRent","isCar","isMicromobility","isAccessMode","hasTransit","hasCar","hasBike","hasMicromobility","hasHail","hasRental","getMapColor","getStepDirection","getStepInstructions","getStepStreetName","toSentenceCase","getLegModeLabel","getItineraryBounds","getLegBounds","legLocationAtDistance","legElevationAtDistance","getElevationProfile","getTextWidth","getCompaniesLabelFromNetworks","getModeForPlace","getPlaceName","getTNCLocation","calculatePhysicalActivity","calculateFares","getTimeZoneOffset","routeComparator","transitModes","_polyline","_interopRequireDefault","require","_along","obj","__esModule","default","config","modes","map","tm","mode","includes","startsWith","modesStr","split","some","indexOf","get","convertAbsoluteDirection","direction","step","relativeDirection","absoluteDirection","toLowerCase","conjunction","streetName","str","String","charAt","toUpperCase","substr","leg","hailedCar","routeLongName","itinerary","coords","legs","forEach","legCoords","toGeoJSON","legGeometry","points","coordinates","c","length","push","from","lat","lon","to","distance","line","pt","units","geometry","e","traversed","unshift","i","start","elevDistanceSpan","console","warn","pct","elevSpan","steps","unitConversion","minElev","maxElev","gain","loss","previous","elevation","elev","diff","second","first","convertedElevation","text","font","canvas","document","createElement","context","getContext","metrics","measureText","width","getCompanyForNetwork","networkString","companies","company","find","co","id","networks","network","filter","label","join","place","vertexType","address","name","type","location","toFixed","walkDuration","bikeDuration","duration","caloriesBurned","transitFare","symbol","dollarsToString","dollars","centsToString","cents","fare","regular","reg","currency","defaultFractionDigits","minTNCFare","maxTNCFare","tncData","maxCost","minCost","dstOffset","Date","startTime","getTimezoneOffset","agencyTimeZoneOffset","getSortValues","getterFn","a","b","aVal","bVal","modeComparatorValue","SUBWAY","TRAM","RAIL","GONDOLA","FERRY","CABLE_CAR","FUNICULAR","BUS","routeTypeComparatorValue","getRouteTypeComparatorValue","route","Error","routeTypeComparator","startsWithAlphabeticCharacter","val","firstCharCode","charCodeAt","alphabeticShortNameComparator","aStartsWithAlphabeticCharacter","shortName","bStartsWithAlphabeticCharacter","makeNumericValueComparator","objGetterFn","isNaN","makeStringValueComparator","getRouteSortOrderValue","undefined","makeMultiCriteriaSort","criteria","curCriteriaComparatorValue","sortOrder","parseInt","longName"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTransitModes = getTransitModes;\nexports.isTransit = isTransit;\nexports.isWalk = isWalk;\nexports.isBicycle = isBicycle;\nexports.isBicycleRent = isBicycleRent;\nexports.isCar = isCar;\nexports.isMicromobility = isMicromobility;\nexports.isAccessMode = isAccessMode;\nexports.hasTransit = hasTransit;\nexports.hasCar = hasCar;\nexports.hasBike = hasBike;\nexports.hasMicromobility = hasMicromobility;\nexports.hasHail = hasHail;\nexports.hasRental = hasRental;\nexports.getMapColor = getMapColor;\nexports.getStepDirection = getStepDirection;\nexports.getStepInstructions = getStepInstructions;\nexports.getStepStreetName = getStepStreetName;\nexports.toSentenceCase = toSentenceCase;\nexports.getLegModeLabel = getLegModeLabel;\nexports.getItineraryBounds = getItineraryBounds;\nexports.getLegBounds = getLegBounds;\nexports.legLocationAtDistance = legLocationAtDistance;\nexports.legElevationAtDistance = legElevationAtDistance;\nexports.getElevationProfile = getElevationProfile;\nexports.getTextWidth = getTextWidth;\nexports.getCompaniesLabelFromNetworks = getCompaniesLabelFromNetworks;\nexports.getModeForPlace = getModeForPlace;\nexports.getPlaceName = getPlaceName;\nexports.getTNCLocation = getTNCLocation;\nexports.calculatePhysicalActivity = calculatePhysicalActivity;\nexports.calculateFares = calculateFares;\nexports.getTimeZoneOffset = getTimeZoneOffset;\nexports.routeComparator = exports.transitModes = void 0;\n\nvar _polyline = _interopRequireDefault(require(\"@mapbox/polyline\"));\n\nvar _along = _interopRequireDefault(require(\"@turf/along\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// All OTP transit modes\nconst transitModes = [\"TRAM\", \"BUS\", \"SUBWAY\", \"FERRY\", \"RAIL\", \"GONDOLA\"];\n/**\n * @param  {config} config OTP-RR configuration object\n * @return {Array}  List of all transit modes defined in config; otherwise default mode list\n */\n\nexports.transitModes = transitModes;\n\nfunction getTransitModes(config) {\n  if (!config || !config.modes || !config.modes.transitModes) return transitModes;\n  return config.modes.transitModes.map(tm => tm.mode);\n}\n\nfunction isTransit(mode) {\n  return transitModes.includes(mode) || mode === \"TRANSIT\";\n}\n\nfunction isWalk(mode) {\n  if (!mode) return false;\n  return mode === \"WALK\";\n}\n\nfunction isBicycle(mode) {\n  if (!mode) return false;\n  return mode === \"BICYCLE\";\n}\n\nfunction isBicycleRent(mode) {\n  if (!mode) return false;\n  return mode === \"BICYCLE_RENT\";\n}\n\nfunction isCar(mode) {\n  if (!mode) return false;\n  return mode.startsWith(\"CAR\");\n}\n\nfunction isMicromobility(mode) {\n  if (!mode) return false;\n  return mode.startsWith(\"MICROMOBILITY\");\n}\n\nfunction isAccessMode(mode) {\n  return isWalk(mode) || isBicycle(mode) || isBicycleRent(mode) || isCar(mode) || isMicromobility(mode);\n}\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are transit modes\n */\n\n\nfunction hasTransit(modesStr) {\n  return modesStr.split(\",\").some(mode => isTransit(mode));\n}\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are car-based modes\n */\n\n\nfunction hasCar(modesStr) {\n  return modesStr.split(\",\").some(mode => isCar(mode));\n}\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are bicycle-based modes\n */\n\n\nfunction hasBike(modesStr) {\n  return modesStr.split(\",\").some(mode => isBicycle(mode) || isBicycleRent(mode));\n}\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are micromobility-based modes\n */\n\n\nfunction hasMicromobility(modesStr) {\n  return modesStr.split(\",\").some(mode => isMicromobility(mode));\n}\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes is a hailing mode\n */\n\n\nfunction hasHail(modesStr) {\n  return modesStr.split(\",\").some(mode => mode.indexOf(\"_HAIL\") > -1);\n}\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes is a rental mode\n */\n\n\nfunction hasRental(modesStr) {\n  return modesStr.split(\",\").some(mode => mode.indexOf(\"_RENT\") > -1);\n}\n\nfunction getMapColor(mode) {\n  mode = mode || this.get(\"mode\");\n  if (mode === \"WALK\") return \"#444\";\n  if (mode === \"BICYCLE\") return \"#0073e5\";\n  if (mode === \"SUBWAY\") return \"#f00\";\n  if (mode === \"RAIL\") return \"#b00\";\n  if (mode === \"BUS\") return \"#080\";\n  if (mode === \"TRAM\") return \"#800\";\n  if (mode === \"FERRY\") return \"#008\";\n  if (mode === \"CAR\") return \"#444\";\n  if (mode === \"MICROMOBILITY\") return \"#f5a729\";\n  return \"#aaa\";\n} // TODO: temporary code; handle via migrated OTP i18n language table\n\nfunction convertAbsoluteDirection(direction){\n    switch(direction){\n        case \"NORTH\":\n            return \"$_north_$\";\n        case \"SOUTH\":\n            return \"$_south_$\";\n        case \"EAST\":\n            return \"$_east_$\";\n        case \"WEST\":\n            return \"$_west_$\";\n        case \"NORTHWEST\":\n            return \"$_north_west_$\"\n        case \"NORTHEAST\":\n            return \"$_north_east_$\"\n        case \"SOUTHWEST\":\n            return \"$_south_west_$\";\n        case \"SOUTHEAST\":\n            return \"$_south_east_$\";\n        default:\n            return direction;\n    }\n}\n\nfunction getStepDirection(step) {\n  switch (step.relativeDirection) {\n    case \"DEPART\":\n      return `$_go_to_$ ${convertAbsoluteDirection(step.absoluteDirection).toLowerCase()}`;\n\n    case \"LEFT\":\n      return \"$_left_$\";\n\n    case \"HARD_LEFT\":\n      return \"$_hard_left_$ \";\n\n    case \"SLIGHTLY_LEFT\":\n      return \"$_slighly_left_$ \";\n\n    case \"CONTINUE\":\n      return \"$_continue_$\";\n\n    case \"SLIGHTLY_RIGHT\":\n      return \"$_slighly_right_$ \";\n\n    case \"RIGHT\":\n      return \"$_right_$\";\n\n    case \"HARD_RIGHT\":\n      return \"$_hard_right_$ \";\n\n    case \"CIRCLE_CLOCKWISE\":\n      return \"$_circle_clock_$\";\n\n    case \"CIRCLE_COUNTERCLOCKWISE\":\n      return \"$_circle_counterclock_$\";\n\n    case \"ELEVATOR\":\n      return \"$_elevator_$\";\n\n    case \"UTURN_LEFT\":\n      return \"$_left_uturn_$\";\n\n    case \"UTURN_RIGHT\":\n      return \"$_right_uturn_$\";\n\n    default:\n      return step.relativeDirection;\n  }\n}\n\nfunction getStepInstructions(step) {\n  const conjunction = step.relativeDirection === \"ELEVATOR\" ? \"su\" : \"su\";\n  return `${getStepDirection(step)} ${conjunction} ${step.streetName}`;\n}\n\nfunction getStepStreetName(step) {\n  if (step.streetName === \"road\") return \"$_road_$\";\n  if (step.streetName === \"path\") return \"$_path_$\";\n  if (step.streetName === \"sidewalk\") return \"$_sidewalk_$\";\n  if (step.streetName === \"steps\") return \"$_steps_$\";\n  if (step.streetName === \"bike path\") return \"$_bike_path_$\";\n  if (step.streetName === \"track\") return \"$_track_$\";\n  return step.streetName;\n}\n\nfunction toSentenceCase(str) {\n  if (str == null) {\n    return \"\";\n  }\n\n  str = String(str);\n  return str.charAt(0).toUpperCase() + str.substr(1).toLowerCase();\n}\n\nfunction getLegModeLabel(leg) {\n  switch (leg.mode) {\n      case \"BICYCLE_RENT\":\n        return \"$_ride_for_$\";\n      case \"WALK\":\n          return \"$_walk_for_$\";\n      case \"BICYCLE\":\n        return \"$_ride_for_$\";\n\n    case \"CAR\":\n      return leg.hailedCar ? \"$_drive_for_$\" : \"$_drive_$\";\n\n    case \"GONDOLA\":\n      return \"Aerial Tram\";\n\n    case \"TRAM\":\n      if (leg.routeLongName.toLowerCase().indexOf(\"streetcar\") !== -1) return \"Streetcar\";\n      return \"Light Rail\";\n\n    case \"MICROMOBILITY\":\n      return \"$_drive_for_$\";\n\n    default:\n      return toSentenceCase(leg.mode);\n  }\n}\n\nfunction getItineraryBounds(itinerary) {\n  let coords = [];\n  itinerary.legs.forEach(leg => {\n    const legCoords = _polyline.default.toGeoJSON(leg.legGeometry.points).coordinates.map(c => [c[1], c[0]]);\n\n    coords = [...coords, ...legCoords];\n  });\n  return coords;\n}\n/**\n * Return a coords object that encloses the given leg's geometry.\n */\n\n\nfunction getLegBounds(leg) {\n  const coords = _polyline.default.toGeoJSON(leg.legGeometry.points).coordinates.map(c => [c[1], c[0]]); // in certain cases, there might be zero-length coordinates in the leg\n  // geometry. In these cases, build us an array of coordinates using the from\n  // and to data of the leg.\n\n\n  if (coords.length === 0) {\n    coords.push([leg.from.lat, leg.from.lon], [leg.to.lat, leg.to.lon]);\n  }\n\n  return coords;\n}\n/* Returns an interpolated lat-lon at a specified distance along a leg */\n\n\nfunction legLocationAtDistance(leg, distance) {\n  if (!leg.legGeometry) return null;\n\n  try {\n    const line = _polyline.default.toGeoJSON(leg.legGeometry.points);\n\n    const pt = (0, _along.default)(line, distance, {\n      units: \"meters\"\n    });\n\n    if (pt && pt.geometry && pt.geometry.coordinates) {\n      return [pt.geometry.coordinates[1], pt.geometry.coordinates[0]];\n    }\n  } catch (e) {// FIXME handle error!\n  }\n\n  return null;\n}\n/* Returns an interpolated elevation at a specified distance along a leg */\n\n\nfunction legElevationAtDistance(points, distance) {\n  // Iterate through the combined elevation profile\n  let traversed = 0; // If first point distance is not zero, insert starting point at zero with\n  // null elevation. Encountering this value should trigger the warning below.\n\n  if (points[0][0] > 0) {\n    points.unshift([0, null]);\n  }\n\n  for (let i = 1; i < points.length; i++) {\n    const start = points[i - 1];\n    const elevDistanceSpan = points[i][0] - start[0];\n\n    if (distance >= traversed && distance <= traversed + elevDistanceSpan) {\n      // Distance falls within this point and the previous one;\n      // compute & return iterpolated elevation value\n      if (start[1] === null) {\n        console.warn(\"Elevation value does not exist for distance.\", distance, traversed);\n        return null;\n      }\n\n      const pct = (distance - traversed) / elevDistanceSpan;\n      const elevSpan = points[i][1] - start[1];\n      return start[1] + elevSpan * pct;\n    }\n\n    traversed += elevDistanceSpan;\n  }\n\n  console.warn(\"Elevation value does not exist for distance.\", distance, traversed);\n  return null;\n} // Iterate through the steps, building the array of elevation points and\n// keeping track of the minimum and maximum elevations reached\n\n\nfunction getElevationProfile(steps, unitConversion = 1) {\n  let minElev = 100000;\n  let maxElev = -100000;\n  let traversed = 0;\n  let gain = 0;\n  let loss = 0;\n  let previous = null;\n  const points = [];\n  steps.forEach(step => {\n    if (!step.elevation || step.elevation.length === 0) {\n      traversed += step.distance;\n      return;\n    }\n\n    for (let i = 0; i < step.elevation.length; i++) {\n      const elev = step.elevation[i];\n\n      if (previous) {\n        const diff = (elev.second - previous.second) * unitConversion;\n        if (diff > 0) gain += diff;else loss += diff;\n      }\n\n      if (i === 0 && elev.first !== 0) {// console.warn(`No elevation data available for step ${stepIndex}-${i} at beginning of segment`, elev)\n      }\n\n      const convertedElevation = elev.second * unitConversion;\n      if (convertedElevation < minElev) minElev = convertedElevation;\n      if (convertedElevation > maxElev) maxElev = convertedElevation;\n      points.push([traversed + elev.first, elev.second]); // Insert \"filler\" point if the last point in elevation profile does not\n      // reach the full distance of the step.\n\n      if (i === step.elevation.length - 1 && elev.first !== step.distance) {// points.push([traversed + step.distance, elev.second])\n      }\n\n      previous = elev;\n    }\n\n    traversed += step.distance;\n  });\n  return {\n    maxElev,\n    minElev,\n    points,\n    traversed,\n    gain,\n    loss\n  };\n}\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {string} text The text to be rendered.\n * @param {string} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\n\n\nfunction getTextWidth(text, font = \"22px Arial\") {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement(\"canvas\"));\n  const context = canvas.getContext(\"2d\");\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width;\n}\n/**\n * Get the configured company object for the given network string if the company\n * has been defined in the provided companies array config.\n */\n\n\nfunction getCompanyForNetwork(networkString, companies = []) {\n  const company = companies.find(co => co.id === networkString);\n\n  if (!company) {\n    console.warn(`No company found in config.yml that matches rented vehicle network: ${networkString}`, companies);\n  }\n\n  return company;\n}\n/**\n * Get a string label to display from a list of vehicle rental networks.\n *\n * @param  {Array<string>} networks  A list of network ids.\n * @param  {Array<object>}  [companies=[]] An optional list of the companies config.\n * @return {string}  A label for use in presentation on a website.\n */\n\n\nfunction getCompaniesLabelFromNetworks(networks, companies = []) {\n  return networks.map(network => getCompanyForNetwork(network, companies)).filter(co => !!co).map(co => co.label).join(\"/\");\n}\n/**\n * Returns mode name by checking the vertex type (VertexType class in OTP) for\n * the provided place. NOTE: this is currently only intended for vehicles at\n * the moment (not transit or walking).\n *\n * TODO: I18N\n * @param  {string} place place from itinerary leg\n */\n\n\nfunction getModeForPlace(place) {\n  switch (place.vertexType) {\n    case \"CARSHARE\":\n      return \"car\";\n\n    case \"VEHICLERENTAL\":\n      return \"E-scooter\";\n    // TODO: Should the type change depending on bike vertex type?\n\n    case \"BIKESHARE\":\n    case \"BIKEPARK\":\n      return \"bike\";\n    // If company offers more than one mode, default to `vehicle` string.\n\n    default:\n      return \"vehicle\";\n  }\n}\n\nfunction getPlaceName(place, companies) {\n  // If address is provided (i.e. for carshare station, use it)\n  if (place.address) return place.address.split(\",\")[0];\n\n  if (place.networks && place.vertexType === \"VEHICLERENTAL\") {\n    // For vehicle rental pick up, do not use the place name. Rather, use\n    // company name + vehicle type (e.g., SPIN E-scooter). Place name is often just\n    // a UUID that has no relevance to the actual vehicle. For bikeshare, however,\n    // there are often hubs or bikes that have relevant names to the user.\n    const company = getCompanyForNetwork(place.networks[0], companies);\n\n    if (company) {\n      return `${company.label} ${getModeForPlace(place)}`;\n    }\n  } // Default to place name\n\n\n  return place.name;\n}\n\nfunction getTNCLocation(leg, type) {\n  const location = leg[type];\n  return `${location.lat.toFixed(5)},${location.lon.toFixed(5)}`;\n}\n\nfunction calculatePhysicalActivity(itinerary) {\n  let walkDuration = 0;\n  let bikeDuration = 0;\n  itinerary.legs.forEach(leg => {\n    if (leg.mode.startsWith(\"WALK\")) walkDuration += leg.duration;\n    if (leg.mode.startsWith(\"BICYCLE\")) bikeDuration += leg.duration;\n  });\n  const caloriesBurned = walkDuration / 3600 * 280 + bikeDuration / 3600 * 290;\n  return {\n    bikeDuration,\n    caloriesBurned,\n    walkDuration\n  };\n}\n\nfunction calculateFares(itinerary) {\n  let transitFare = 0;\n  let symbol = \"$\"; // default to USD\n\n  let dollarsToString = dollars => `${symbol}${dollars.toFixed(2)}`;\n\n  let centsToString = cents => `${symbol}${(cents / 100).toFixed(2)}`;\n\n  if (itinerary.fare && itinerary.fare.fare && itinerary.fare.fare.regular) {\n    const reg = itinerary.fare.fare.regular;\n    symbol = reg.currency.symbol;\n    transitFare = reg.cents;\n\n    centsToString = cents => `${symbol}${(cents / 10 ** reg.currency.defaultFractionDigits).toFixed(reg.currency.defaultFractionDigits)}`;\n\n    dollarsToString = dollars => `${symbol}${dollars.toFixed(2)}`;\n  } // Process any TNC fares\n\n\n  let minTNCFare = 0;\n  let maxTNCFare = 0;\n  itinerary.legs.forEach(leg => {\n    if (leg.mode === \"CAR\" && leg.hailedCar && leg.tncData) {\n      const {\n        maxCost,\n        minCost\n      } = leg.tncData; // TODO: Support non-USD\n\n      minTNCFare += minCost;\n      maxTNCFare += maxCost;\n    }\n  });\n  return {\n    centsToString,\n    dollarsToString,\n    maxTNCFare,\n    minTNCFare,\n    transitFare\n  };\n}\n\nfunction getTimeZoneOffset(itinerary) {\n  if (!itinerary.legs || !itinerary.legs.length) return 0; // Determine if there is a DST offset between now and the itinerary start date\n\n  const dstOffset = new Date(itinerary.startTime).getTimezoneOffset() - new Date().getTimezoneOffset();\n  return itinerary.legs[0].agencyTimeZoneOffset + (new Date().getTimezoneOffset() + dstOffset) * 60000;\n}\n/**\n * The functions below are for enhanced route sorting functions for\n * the route viewer on OTP-react-redux.\n * They address route ordering issues discussed in\n * https://github.com/opentripplanner/otp-react-redux/pull/123 and\n * https://github.com/opentripplanner/otp-react-redux/pull/124.\n */\n\n/**\n * Gets the desired sort values according to an optional getter function. If the\n * getter function is not defined, the original sort values are returned.\n */\n\n\nfunction getSortValues(getterFn, a, b) {\n  let aVal;\n  let bVal;\n\n  if (typeof getterFn === \"function\") {\n    aVal = getterFn(a);\n    bVal = getterFn(b);\n  } else {\n    aVal = a;\n    bVal = b;\n  }\n\n  return {\n    aVal,\n    bVal\n  };\n} // Lookup for the sort values associated with various OTP modes.\n// Note: JSDoc format not used to avoid bug in documentationjs.\n// https://github.com/documentationjs/documentation/issues/372\n\n\nconst modeComparatorValue = {\n  SUBWAY: 1,\n  TRAM: 2,\n  RAIL: 3,\n  GONDOLA: 4,\n  FERRY: 5,\n  CABLE_CAR: 6,\n  FUNICULAR: 7,\n  BUS: 8\n}; // Lookup that maps route types to the OTP mode sort values.\n// Note: JSDoc format not used to avoid bug in documentationjs.\n// https://github.com/documentationjs/documentation/issues/372\n\nconst routeTypeComparatorValue = {\n  0: modeComparatorValue.TRAM,\n  // - Tram, Streetcar, Light rail.\n  1: modeComparatorValue.SUBWAY,\n  // - Subway, Metro.\n  2: modeComparatorValue.RAIL,\n  // - Rail. Used for intercity or long-distance travel.\n  3: modeComparatorValue.BUS,\n  // - Bus.\n  4: modeComparatorValue.FERRY,\n  // - Ferry.\n  5: modeComparatorValue.CABLE_CAR,\n  // - Cable tram.\n  6: modeComparatorValue.GONDOLA,\n  // - Gondola, etc.\n  7: modeComparatorValue.FUNICULAR,\n  // - Funicular.\n  // TODO: 11 and 12 are not a part of OTP as of 2019-02-14, but for now just\n  // associate them with bus/rail.\n  11: modeComparatorValue.BUS,\n  // - Trolleybus.\n  12: modeComparatorValue.RAIL // - Monorail.\n\n}; // Gets a comparator value for a given route's type (OTP mode).\n// Note: JSDoc format not used to avoid bug in documentationjs.\n// ttps://github.com/documentationjs/documentation/issues/372\n\nfunction getRouteTypeComparatorValue(route) {\n  // For some strange reason, the short route response in OTP returns the\n  // string-based modes, but the long route response returns the\n  // integer route type. This attempts to account for both of those cases.\n  if (!route) throw new Error(\"Route is undefined.\", route);\n\n  if (typeof modeComparatorValue[route.mode] !== \"undefined\") {\n    return modeComparatorValue[route.mode];\n  }\n\n  if (typeof routeTypeComparatorValue[route.type] !== \"undefined\") {\n    return routeTypeComparatorValue[route.type];\n  } // Default the comparator value to a large number (placing the route at the\n  // end of the list).\n\n\n  console.warn(\"no mode/route type found for route\", route);\n  return 9999;\n}\n/**\n * Calculates the sort comparator value given two routes based off of route type\n * (OTP mode).\n */\n\n\nfunction routeTypeComparator(a, b) {\n  return getRouteTypeComparatorValue(a) - getRouteTypeComparatorValue(b);\n}\n/**\n * Determines whether a value is a string that starts with an alphabetic\n * ascii character.\n */\n\n\nfunction startsWithAlphabeticCharacter(val) {\n  if (typeof val === \"string\" && val.length > 0) {\n    const firstCharCode = val.charCodeAt(0);\n    return firstCharCode >= 65 && firstCharCode <= 90 || firstCharCode >= 97 && firstCharCode <= 122;\n  }\n\n  return false;\n}\n/**\n * Sorts routes based off of whether the shortName begins with an alphabetic\n * character. Routes with shortn that do start with an alphabetic character will\n * be prioritized over those that don't.\n */\n\n\nfunction alphabeticShortNameComparator(a, b) {\n  const aStartsWithAlphabeticCharacter = startsWithAlphabeticCharacter(a.shortName);\n  const bStartsWithAlphabeticCharacter = startsWithAlphabeticCharacter(b.shortName);\n\n  if (aStartsWithAlphabeticCharacter && bStartsWithAlphabeticCharacter) {\n    // both start with an alphabetic character, return equivalence\n    return 0;\n  } // a does start with an alphabetic character, but b does not. Prioritize a\n\n\n  if (aStartsWithAlphabeticCharacter) return -1; // b does start with an alphabetic character, but a does not. Prioritize b\n\n  if (bStartsWithAlphabeticCharacter) return 1; // neither route has a shortName that starts with an alphabetic character.\n  // Return equivalence\n\n  return 0;\n}\n/**\n * Checks whether an appropriate comparison of numeric values can be made for\n * sorting purposes. If both values are not valid numbers according to the\n * isNaN check, then this function returns undefined which indicates that a\n * secondary sorting criteria should be used instead. If one value is valid and\n * the other is not, then the valid value will be given sorting priority. If\n * both values are valid numbers, the difference is obtained as the sort value.\n *\n * An optional argument can be provided which will be used to obtain the\n * comparison value from the comparison function arguments.\n *\n * IMPORTANT: the comparison values must be numeric values or at least be\n * attempted to be converted to numeric values! If one of the arguments is\n * something crazy like an empty string, unexpected behavior will occur because\n * JavaScript.\n *\n * @param  {function} [objGetterFn] An optional function to obtain the\n *  comparison value from the comparator function arguments\n */\n\n\nfunction makeNumericValueComparator(objGetterFn) {\n  /* Note: Using the global version of isNaN (the Number version behaves differently. */\n\n  /* eslint-disable no-restricted-globals */\n  return (a, b) => {\n    const {\n      aVal,\n      bVal\n    } = getSortValues(objGetterFn, a, b); // if both values aren't valid numbers, use the next sort criteria\n\n    if (isNaN(aVal) && isNaN(bVal)) return 0; // b is a valid number, b gets priority\n\n    if (isNaN(aVal)) return 1; // a is a valid number, a gets priority\n\n    if (isNaN(bVal)) return -1; // a and b are valid numbers, return the sort value\n\n    return aVal - bVal;\n  };\n}\n/**\n * Create a comparator function that compares string values. The comparison\n * values feed to the sort comparator function are assumed to be objects that\n * will have either undefined, null or string values at the given key. If one\n * object has undefined, null or an empty string, but the other does have a\n * string with length > 0, then that string will get priority.\n *\n * @param  {function} [objGetterFn] An optional function to obtain the\n *  comparison value from the comparator function arguments\n */\n\n\nfunction makeStringValueComparator(objGetterFn) {\n  return (a, b) => {\n    const {\n      aVal,\n      bVal\n    } = getSortValues(objGetterFn, a, b); // both a and b are uncomparable strings, return equivalent value\n\n    if (!aVal && !bVal) return 0; // a is not a comparable string, b gets priority\n\n    if (!aVal) return 1; // b is not a comparable string, a gets priority\n\n    if (!bVal) return -1; // a and b are comparable strings, return the sort value\n\n    if (aVal < bVal) return -1;\n    if (aVal > bVal) return 1;\n    return 0;\n  };\n}\n/**\n * OpenTripPlanner sets the routeSortOrder to -999 by default. So, if that value\n * is encountered, assume that it actually means that the routeSortOrder is not\n * set in the GTFS.\n *\n * See https://github.com/opentripplanner/OpenTripPlanner/issues/2938\n * Also see https://github.com/opentripplanner/otp-react-redux/issues/122\n */\n\n\nfunction getRouteSortOrderValue(val) {\n  return val === -999 ? undefined : val;\n}\n/**\n * Create a multi-criteria sort comparator function composed of other sort\n * comparator functions. Each comparator function will be ran in the order given\n * until a non-zero comparison value is obtained which is then immediately\n * returned. If all comparison functions return equivalance, then the values\n * are assumed to be equivalent.\n */\n\n\nfunction makeMultiCriteriaSort(...criteria) {\n  return (a, b) => {\n    for (let i = 0; i < criteria.length; i++) {\n      const curCriteriaComparatorValue = criteria[i](a, b); // if the comparison objects are not equivalent, return the value obtained\n      // in this current criteria comparison\n\n      if (curCriteriaComparatorValue !== 0) {\n        return curCriteriaComparatorValue;\n      }\n    }\n\n    return 0;\n  };\n}\n/**\n * Compares routes for the purposes of sorting and displaying in a user\n * interface. Due to GTFS feeds having varying levels of data quality, a multi-\n * criteria sort is needed to account for various differences. The criteria\n * included here are each applied to the routes in the order listed. If a given\n * sort criterion yields equivalence (e.g., two routes have the short name\n * \"20\"), the comparator falls back onto the next sort criterion (e.g., long\n * name). If desired, the criteria of sorting based off of integer shortName can\n * be disabled. The sort operates on the following values (in order):\n *\n *  1. sortOrder. Routes that do not have a valid sortOrder will be placed\n *    beneath those that do.\n *  2. route type (OTP mode). See routeTypeComparator code for prioritization of\n *    route types.\n *  3. shortNames that begin with alphabetic characters. shortNames that do not\n *    start with alphabetic characters will be place beneath those that do.\n *  4. shortName as integer. shortNames that cannot be parsed as integers will\n *    be placed beneath those that are valid.\n *  5. shortName as string. Routes without shortNames will be placed beneath\n *    those with shortNames.\n *  6. longName as string.\n */\n\n\nconst routeComparator = makeMultiCriteriaSort(makeNumericValueComparator(obj => getRouteSortOrderValue(obj.sortOrder)), routeTypeComparator, alphabeticShortNameComparator, makeNumericValueComparator(obj => parseInt(obj.shortName, 10)), makeStringValueComparator(obj => obj.shortName), makeStringValueComparator(obj => obj.longName));\nexports.routeComparator = routeComparator;\n"]}