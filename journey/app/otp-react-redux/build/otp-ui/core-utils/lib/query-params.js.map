{"version":3,"sources":["query-params.js"],"names":["Object","defineProperty","exports","value","formatPlace","default","_itinerary","require","_storage","_time","location","alternateName","name","lat","lon","storedSettings","getItem","queryParams","routingTypes","itineraryRewrite","fromPlace","profileRewrite","from","toPlace","to","getCurrentDate","getCurrentTime","arriveBy","accessModes","directModes","transitModes","length","split","forEach","m","isTransit","push","isAccessMode","isCar","applicable","query","mode","hasTransit","indexOf","selector","label","options","text","maxWalkDistance","maxBikeDistance","hasBike","opts","splice","optimize","hasMicromobility","maxEScooterDistance","watts","maximumMicromobilitySpeed","weight","TYPICAL_RIDER_WEIGHT","config","modes","configModes","concat","some","configMode","find","showWheelchairSetting","company","companies","includes","places","Array","isArray","intermediatePlaces","map","place","join","undefined","getUserLang","param","userDefaultOverride","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatPlace = formatPlace;\nexports.default = void 0;\n\nvar _itinerary = require(\"./itinerary\");\n\nvar _storage = require(\"./storage\");\n\nvar _time = require(\"./time\");\n\n/**\n * name: the default name of the parameter used for internal reference and API calls\n *\n * routingTypes: array of routing type(s) (ITINERARY, PROFILE, or both) this param applies to\n *\n * applicable: an optional function (accepting the current full query as a\n *   parameter) indicating whether this query parameter is applicable to the query.\n *   (Applicability is assumed if this function is not provided.)\n *\n * default: the default value for this parameter. The default can be also be a\n *  function that gets executed when accessing the default value.\n *\n * itineraryRewrite: an optional function for translating the key and/or value\n *   for ITINERARY mode only (e.g. 'to' is rewritten as 'toPlace'). Accepts the\n *   intial internal value as a function parameter.\n *\n * profileRewrite: an optional function for translating the value for PROFILE mode\n *\n * label: a text label for for onscreen display. May either be a text string or a\n *   function (accepting the current full query as a parameter) returning a string\n *\n * selector: the default type of UI selector to use in the form. Can be one of:\n *   - DROPDOWN: a standard drop-down menu selector\n *\n * options: an array of text/value pairs used with a dropdown selector\n *\n * TODO: validation system for rewrite functions and/or better user documentation\n * TODO: alphabetize below list\n */\n// FIXME: Use for parsing URL values?\n// const stringToLocation = string => {\n//   const split = string.split(',')\n//   return split.length === 2\n//     ? {lat: split[0], lon: split[1]}\n//     : {lat: null, lon: null}\n// }\n\n/**\n * Format location object as string for use in fromPlace or toPlace query param.\n */\nfunction formatPlace(location, alternateName = \"Place\") {\n  if (!location) return null;\n  const name = location.name || `${alternateName} (${location.lat},${location.lon})`;\n  return `${name}::${location.lat},${location.lon}`;\n} // Load stored default query settings from local storage\n\n\nconst storedSettings = (0, _storage.getItem)(\"defaultQuery\", {});\nconst queryParams = [{\n  /* from - the trip origin. stored internally as a location (lat/lon/name) object  */\n  name: \"from\",\n  routingTypes: [\"ITINERARY\", \"PROFILE\"],\n  default: null,\n  itineraryRewrite: value => ({\n    fromPlace: formatPlace(value, \"Origin\")\n  }),\n  profileRewrite: value => ({\n    from: {\n      lat: value.lat,\n      lon: value.lon\n    }\n  }) // FIXME: Use for parsing URL values?\n  // fromURL: stringToLocation\n\n}, {\n  /* to - the trip destination. stored internally as a location (lat/lon/name) object  */\n  name: \"to\",\n  routingTypes: [\"ITINERARY\", \"PROFILE\"],\n  default: null,\n  itineraryRewrite: value => ({\n    toPlace: formatPlace(value, \"Destination\")\n  }),\n  profileRewrite: value => ({\n    to: {\n      lat: value.lat,\n      lon: value.lon\n    }\n  }) // FIXME: Use for parsing URL values?\n  // fromURL: stringToLocation\n\n}, {\n  /* date - the date of travel, in MM-DD-YYYY format */\n  name: \"date\",\n  routingTypes: [\"ITINERARY\", \"PROFILE\"],\n  default: _time.getCurrentDate\n}, {\n  /* time - the arrival/departure time for an itinerary trip, in HH:mm format */\n  name: \"time\",\n  routingTypes: [\"ITINERARY\"],\n  default: _time.getCurrentTime\n}, {\n  /* departArrive - whether this is a depart-at, arrive-by, or leave-now trip */\n  name: \"departArrive\",\n  routingTypes: [\"ITINERARY\"],\n  default: \"NOW\",\n  itineraryRewrite: value => ({\n    arriveBy: value === \"ARRIVE\"\n  })\n}, {\n  /* startTime - the start time for a profile trip, in HH:mm format */\n  name: \"startTime\",\n  routingTypes: [\"PROFILE\"],\n  default: \"07:00\"\n}, {\n  /* endTime - the end time for a profile trip, in HH:mm format */\n  name: \"endTime\",\n  routingTypes: [\"PROFILE\"],\n  default: \"09:00\"\n}, {\n  /* mode - the allowed modes for a trip, as a comma-separated list */\n  name: \"mode\",\n  routingTypes: [\"ITINERARY\", \"PROFILE\"],\n  default: \"WALK,TRANSIT\",\n  // TODO: make this dependent on routingType?\n  profileRewrite: value => {\n    const accessModes = [];\n    const directModes = [];\n    const transitModes = [];\n\n    if (value && value.length > 0) {\n      value.split(\",\").forEach(m => {\n        if ((0, _itinerary.isTransit)(m)) transitModes.push(m);\n\n        if ((0, _itinerary.isAccessMode)(m)) {\n          accessModes.push(m); // TODO: make configurable whether direct-driving is considered\n\n          if (!(0, _itinerary.isCar)(m)) directModes.push(m);\n        }\n      });\n    }\n\n    return {\n      accessModes,\n      directModes,\n      transitModes\n    };\n  }\n}, {\n  /* showIntermediateStops - whether response should include intermediate stops for transit legs */\n  name: \"showIntermediateStops\",\n  routingTypes: [\"ITINERARY\"],\n  default: true\n}, {\n  /* maxWalkDistance - the maximum distance in meters the user will walk to transit. */\n  name: \"maxWalkDistance\",\n  routingTypes: [\"ITINERARY\"],\n  applicable: query => query.mode && (0, _itinerary.hasTransit)(query.mode) && query.mode.indexOf(\"WALK\") !== -1,\n  default: 1000,\n  // 1Km\n  selector: \"DROPDOWN\",\n  label: \"$_by_walk_$\",\n  options: [{\n    text: \"250 $_meter_$\",\n    value: 250\n  }, {\n    text: \"500 $_meter_$\",\n    value: 500\n  }, {\n    text: \"750 $_meter_$\",\n    value: 750\n  }, {\n    text: \"1 Km\",\n    value: 1000\n  }, {\n    text: \"1.5 Km\",\n    value: 1500\n  }, {\n    text: \"3 Km\",\n    value: 3000\n  }, {\n    text: \"10 Km\",\n    value: 10000\n  }]\n}, {\n  /* maxBikeDistance - the maximum distance in meters the user will bike. Not\n   * actually an OTP parameter (maxWalkDistance doubles for biking) but we\n   * store it separately internally in order to allow different default values,\n   * options, etc.  Translated to 'maxWalkDistance' via the rewrite function.\n   */\n  name: \"maxBikeDistance\",\n  routingTypes: [\"ITINERARY\"],\n  applicable: query => query.mode && (0, _itinerary.hasTransit)(query.mode) && query.mode.indexOf(\"BICYCLE\") !== -1,\n  default: 5000,\n  // 5Km\n  selector: \"DROPDOWN\",\n  label: \"$_by_bike_$\",\n  options: [{\n    text: \"500 $_meter_$\",\n    value: 500\n  }, {\n    text: \"750 $_meter_$\",\n    value: 750\n  }, {\n    text: \"1 Km\",\n    value: 1000\n  }, {\n    text: \"1.5 Km\",\n    value: 1500\n  }, {\n    text: \"3 Km\",\n    value: 3000\n  }, {\n    text: \"5 Km\",\n    value: 5000\n  }, {\n    text: \"7 Km\",\n    value: 7000\n  }, {\n    text: \"15 Km\",\n    value: 15000\n  }, {\n    text: \"30 Km\",\n    value: 30000\n  }, {\n    text: \"50 Km\",\n    value: 50000\n  }],\n  itineraryRewrite: value => ({\n    maxWalkDistance: value,\n    // ensures that the value is repopulated when loaded from URL params\n    maxBikeDistance: value\n  })\n}, {\n  /* optimize -- how to optimize a trip (non-bike, non-micromobility trips) */\n  name: \"optimize\",\n  applicable: query => (0, _itinerary.hasTransit)(query.mode) && !(0, _itinerary.hasBike)(query.mode),\n  routingTypes: [\"ITINERARY\"],\n  default: \"QUICK\",\n  selector: \"DROPDOWN\",\n  label: \"$_optimizer_$\",\n  options: [{\n    text: \"$_speed_$\",\n    value: \"QUICK\"\n  }, {\n    text: \"$_less_transfers_$\",\n    value: \"TRANSFERS\"\n  }]\n}, {\n  /* optimizeBike -- how to optimize an bike-based trip */\n  name: \"optimizeBike\",\n  applicable: query => (0, _itinerary.hasBike)(query.mode),\n  routingTypes: [\"ITINERARY\"],\n  default: \"SAFE\",\n  selector: \"DROPDOWN\",\n  label: \"$_optimizer_$\",\n  options: query => {\n    const opts = [{\n      text: \"$_speed_$\",\n      value: \"QUICK\"\n    }, {\n      text: \"$_security_$\",\n      value: \"SAFE\"\n    }, {\n      text: \"$_flat_$\",\n      value: \"FLAT\"\n    }]; // Include transit-specific option, if applicable\n\n    if ((0, _itinerary.hasTransit)(query.mode)) {\n      opts.splice(1, 0, {\n        text: \"$_less_transfers_$\",\n        value: \"TRANSFERS\"\n      });\n    }\n\n    return opts;\n  },\n  itineraryRewrite: value => ({\n    optimize: value\n  })\n}, {\n  /* maxWalkTime -- the maximum time the user will spend walking in minutes */\n  name: \"maxWalkTime\",\n  routingTypes: [\"PROFILE\"],\n  default: 15,\n  selector: \"DROPDOWN\",\n  label: \"Tempo massimo di cammino\",\n  applicable: query => query.mode && (0, _itinerary.hasTransit)(query.mode) && query.mode.indexOf(\"WALK\") !== -1,\n  options: [{\n    text: \"5 minuti\",\n    value: 5\n  }, {\n    text: \"10 minuti\",\n    value: 10\n  }, {\n    text: \"15 minuti\",\n    value: 15\n  }, {\n    text: \"20 minuti\",\n    value: 20\n  }, {\n    text: \"30 minuti\",\n    value: 30\n  }, {\n    text: \"45 minuti\",\n    value: 45\n  }, {\n    text: \"1 ora\",\n    value: 60\n  }]\n}, {\n  /* walkSpeed -- the user's walking speed in m/s */\n  name: \"walkSpeed\",\n  routingTypes: [\"ITINERARY\", \"PROFILE\"],\n  default: 1.11,\n  selector: \"DROPDOWN\",\n  label: \"$_walk_speed_$\",\n  applicable: query => query.mode && query.mode.indexOf(\"WALK\") !== -1,\n  options: [{\n    text: \"3 Km/h\",\n    value: 0.83\n  }, {\n    text: \"4 Km/h\",\n    value: 1.11\n  }, {\n    text: \"5 Km/h\",\n    value: 1.38\n  }]\n}, {\n  /* maxBikeTime -- the maximum time the user will spend biking in minutes */\n  name: \"maxBikeTime\",\n  routingTypes: [\"PROFILE\"],\n  default: 20,\n  selector: \"DROPDOWN\",\n  label: \"Tempo massimo in bici\",\n  applicable: query => query.mode && (0, _itinerary.hasTransit)(query.mode) && query.mode.indexOf(\"BICYCLE\") !== -1,\n  options: [{\n    text: \"5 minuti\",\n    value: 5\n  }, {\n    text: \"10 minuti\",\n    value: 10\n  }, {\n    text: \"15 minuti\",\n    value: 15\n  }, {\n    text: \"20 minuti\",\n    value: 20\n  }, {\n    text: \"30 minuti\",\n    value: 30\n  }, {\n    text: \"45 minuti\",\n    value: 45\n  }, {\n    text: \"1 ora\",\n    value: 60\n  }]\n}, {\n  /* bikeSpeed -- the user's bikeSpeed speed in m/s */\n  name: \"bikeSpeed\",\n  routingTypes: [\"ITINERARY\", \"PROFILE\"],\n  default: 3.33,\n  selector: \"DROPDOWN\",\n  label: \"$_ride_speed_$\",\n  applicable: query => query.mode && query.mode.indexOf(\"BICYCLE\") !== -1,\n  options: [{\n    text: \"10 Km/h\",\n    value: 2.77\n  }, {\n    text: \"12 Km/h\",\n    value: 3.33\n  }, {\n    text: \"16 Km/h\",\n    value: 4.47\n  }, {\n    text: \"20 Km/h\",\n    value: 5.55\n  }]\n}, {\n  /* maxEScooterDistance - the maximum distance in meters the user will ride\n   * an E-scooter. Not actually an OTP parameter (maxWalkDistance doubles for\n   * any non-transit mode except for car) but we store it separately\n   * internally in order to allow different default values, options, etc.\n   * Translated to 'maxWalkDistance' via the rewrite function.\n   */\n  name: \"maxEScooterDistance\",\n  routingTypes: [\"ITINERARY\"],\n  applicable: query => query.mode && (0, _itinerary.hasTransit)(query.mode) && (0, _itinerary.hasMicromobility)(query.mode),\n  default: 4828,\n  // 3 mi.\n  selector: \"DROPDOWN\",\n  label: \"Maximum E-scooter Distance\",\n  options: [{\n    text: \"1/4 mile\",\n    value: 402.3\n  }, {\n    text: \"1/2 mile\",\n    value: 804.7\n  }, {\n    text: \"3/4 mile\",\n    value: 1207\n  }, {\n    text: \"1 mile\",\n    value: 1609\n  }, {\n    text: \"2 miles\",\n    value: 3219\n  }, {\n    text: \"3 miles\",\n    value: 4828\n  }, {\n    text: \"5 miles\",\n    value: 8047\n  }, {\n    text: \"10 miles\",\n    value: 16093\n  }, {\n    text: \"20 miles\",\n    value: 32187\n  }, {\n    text: \"30 miles\",\n    value: 48280\n  }],\n  itineraryRewrite: value => ({\n    maxWalkDistance: value,\n    // ensures that the value is repopulated when loaded from URL params\n    maxEScooterDistance: value\n  })\n}, {\n  /* bikeSpeed -- the user's bikeSpeed speed in m/s */\n  name: \"watts\",\n  routingTypes: [\"ITINERARY\", \"PROFILE\"],\n  default: 250,\n  selector: \"DROPDOWN\",\n  label: \"E-scooter Power\",\n  // this configuration should only be allowed for personal E-scooters as these\n  // settings will be defined by the vehicle type of an E-scooter being rented\n  applicable: query => query.mode && query.mode.indexOf(\"MICROMOBILITY\") !== -1 && query.mode.indexOf(\"MICROMOBILITY_RENT\") === -1,\n  options: [{\n    text: \"Kid's hoverboard (6mph)\",\n    value: 125\n  }, {\n    text: \"Entry-level scooter (11mph)\",\n    value: 250\n  }, {\n    text: \"Robust E-scooter (18mph)\",\n    value: 500\n  }, {\n    text: \"Powerful E-scooter (24mph)\",\n    value: 1500\n  }],\n  // rewrite a few other values to add some baseline assumptions about the\n  // vehicle\n  itineraryRewrite: value => {\n    const watts = value; // the maximum cruising and downhill speed. Units in m/s\n\n    let maximumMicromobilitySpeed;\n    let weight; // see https://en.wikipedia.org/wiki/Human_body_weight#Average_weight_around_the_world\n    // estimate is for an average North American human with clothes and stuff\n    // units are in kg\n\n    const TYPICAL_RIDER_WEIGHT = 90;\n\n    switch (watts) {\n      case 125:\n        // exemplar: Swagtron Turbo 5 hoverboard (https://swagtron.com/product/recertified-swagtron-turbo-five-hoverboard-classic/)\n        maximumMicromobilitySpeed = 2.8; // ~= 6mph\n\n        weight = TYPICAL_RIDER_WEIGHT + 9;\n        break;\n\n      case 250:\n        // exemplar: Xiaomi M365 (https://www.gearbest.com/skateboard/pp_596618.html)\n        maximumMicromobilitySpeed = 5; // ~= 11.5mph\n\n        weight = TYPICAL_RIDER_WEIGHT + 12.5;\n        break;\n\n      case 500:\n        // exemplar: Razor EcoSmart Metro (https://www.amazon.com/Razor-EcoSmart-Metro-Electric-Scooter/dp/B002ZDAEIS?SubscriptionId=AKIAJMXJ2YFJTEDLQMUQ&tag=digitren08-20&linkCode=xm2&camp=2025&creative=165953&creativeASIN=B002ZDAEIS&ascsubtag=15599460143449ocb)\n        maximumMicromobilitySpeed = 8; // ~= 18mph\n\n        weight = TYPICAL_RIDER_WEIGHT + 30;\n        break;\n\n      case 1000:\n        // exemplar: Boosted Rev (https://boostedboards.com/vehicles/scooters/boosted-rev)\n        maximumMicromobilitySpeed = 11; // ~= 24mph\n\n        weight = TYPICAL_RIDER_WEIGHT + 21;\n        break;\n\n      default:\n        break;\n    }\n\n    return {\n      maximumMicromobilitySpeed,\n      watts,\n      weight\n    };\n  }\n}, {\n  /* ignoreRealtimeUpdates -- if true, do not use realtime updates in routing */\n  name: \"ignoreRealtimeUpdates\",\n  routingTypes: [\"ITINERARY\"],\n  default: false\n}, {\n  /* companies -- tnc companies to query */\n  name: \"companies\",\n  routingTypes: [\"ITINERARY\"],\n  default: null\n}, {\n  /* wheelchair -- whether the user requires a wheelchair-accessible trip */\n  name: \"wheelchair\",\n  routingTypes: [\"ITINERARY\"],\n  default: false,\n  selector: \"CHECKBOX\",\n  label: \"$_available_wheelchair_$\",\n  applicable: (query, config) => {\n    if (!query.mode || !config.modes) return false;\n    const configModes = (config.modes.accessModes || []).concat(config.modes.transitModes || []);\n    return query.mode.split(\",\").some(mode => {\n      const configMode = configModes.find(m => m.mode === mode);\n      if (!configMode || !configMode.showWheelchairSetting) return false;\n      if (configMode.company && (!query.companies || !query.companies.split(\",\").includes(configMode.company))) return false;\n      return true;\n    });\n  }\n}, {\n  name: \"bannedRoutes\",\n  routingTypes: [\"ITINERARY\"],\n  default: \"\"\n}, {\n  name: \"numItineraries\",\n  routingTypes: [\"ITINERARY\"],\n  default: 3\n}, {\n  name: \"intermediatePlaces\",\n  default: [],\n  routingTypes: [\"ITINERARY\"],\n  itineraryRewrite: places => Array.isArray(places) && places.length > 0 ? {\n    intermediatePlaces: places.map(place => formatPlace(place)).join(\",\")\n  } : undefined\n}, {\n  // Time penalty in seconds the requester is willing to accept in order to\n  // complete journey on preferred route. I.e., number of seconds that we are\n  // willing to wait for the preferred route.\n  name: \"otherThanPreferredRoutesPenalty\",\n  default: 15 * 60,\n  // 15 minutes\n  routingTypes: [\"ITINERARY\"]\n}, {\n  name: \"preferredRoutes\",\n  routingTypes: [\"ITINERARY\"],\n  default: \"\"\n},\n{\n    name: \"locale\",\n    routingTypes: [\"ITINERARY\"],\n    default: getUserLang(),\n}]; // Iterate over stored settings and update query param defaults.\n// FIXME: this does not get updated if the user defaults are cleared\n\nqueryParams.forEach(param => {\n  if (param.name in storedSettings) {\n    param.default = storedSettings[param.name];\n    param.userDefaultOverride = true;\n  }\n});\nvar _default = queryParams;\nexports.default = _default;\n"]}