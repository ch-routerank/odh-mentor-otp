{"version":3,"sources":["query.js"],"names":["Object","defineProperty","exports","value","getQueryParamProperty","ensureSingleAccessMode","getUrlParams","getOtpUrlParams","summarizeQuery","getTripOptionsFromQuery","isNotDefaultQuery","getDefaultQuery","parseLocationString","planParamsToQuery","planParamsToQueryAsync","getRoutingParams","defaultParams","_moment","_interopRequireDefault","require","_lib","_qs","_itinerary","_map","_queryParams","_time","obj","__esModule","default","TIME_FORMATS","OTP_API_TIME_FORMAT","paramInfo","property","query","queryModes","accessCount","filter","m","isAccessMode","length","firstAccess","find","push","parse","window","location","href","split","keys","key","startsWith","findLocationType","locations","types","match","l","matchLatLon","indexOf","type","from","name","to","mode","hasTransit","toSentenceCase","keepPlace","options","time","departArrive","date","getDefaultQueryParamValue","param","config","activeModes","defaultModes","getTransitModes","concat","queryIsDifferent","modesEqual","sort","every","index","forEach","qp","routingTypes","includes","routingType","applicable","defaultQuery","getFirstGeocodeResult","text","geocoderConfig","geocoder","search","then","result","firstResult","features","getLocationFromGeocodedFeature","parts","coordinates","stringToCoords","coordsToString","lat","lon","queryParamToLocation","params","fromPlace","toPlace","arriveBy","getCurrentDate","parsedTime","isValid","format","getCurrentTime","intermediatePlaces","map","maybeNumber","Number","isNaN","currentQuery","ignoreRealtimeUpdates","isItinerary","rewriteFunction","itineraryRewrite","profileRewrite","assign","dateValid","OTP_API_DATE_FORMAT","timeValid","minTransitDistance","searchTimeout","onlyTransitTrips","startTimeValid","startTime","endTimeValid","endTime","hasCar"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getQueryParamProperty = getQueryParamProperty;\nexports.ensureSingleAccessMode = ensureSingleAccessMode;\nexports.getUrlParams = getUrlParams;\nexports.getOtpUrlParams = getOtpUrlParams;\nexports.summarizeQuery = summarizeQuery;\nexports.getTripOptionsFromQuery = getTripOptionsFromQuery;\nexports.isNotDefaultQuery = isNotDefaultQuery;\nexports.getDefaultQuery = getDefaultQuery;\nexports.parseLocationString = parseLocationString;\nexports.planParamsToQuery = planParamsToQuery;\nexports.planParamsToQueryAsync = planParamsToQueryAsync;\nexports.getRoutingParams = getRoutingParams;\nexports.defaultParams = void 0;\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _lib = _interopRequireDefault(require(\"@opentripplanner/geocoder/lib\"));\n\nvar _qs = _interopRequireDefault(require(\"qs\"));\n\nvar _itinerary = require(\"./itinerary\");\n\nvar _map = require(\"./map\");\n\nvar _queryParams = _interopRequireDefault(require(\"./query-params\"));\n\nvar _time = require(\"./time\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* The list of default parameters considered in the settings panel */\nconst defaultParams = [\"wheelchair\", \"maxWalkDistance\", \"maxWalkTime\", \"walkSpeed\", \"maxBikeDistance\", \"maxBikeTime\", \"bikeSpeed\", \"optimize\", \"optimizeBike\", \"maxEScooterDistance\", \"watts\"];\n/**\n * List of time formats to parse when reading query params.\n */\n\nexports.defaultParams = defaultParams;\nconst TIME_FORMATS = [\"HH:mm:ss\", \"h:mm:ss a\", \"h:mm:ssa\", \"h:mm a\", \"h:mma\", \"h:mm\", \"HHmm\", \"hmm\", \"ha\", _time.OTP_API_TIME_FORMAT // 'HH:mm'\n];\n/* A function to retrieve a property value from an entry in the query-params\n * table, checking for either a static value or a function */\n\nfunction getQueryParamProperty(paramInfo, property, query) {\n  return typeof paramInfo[property] === \"function\" ? paramInfo[property](query) : paramInfo[property];\n}\n\nfunction ensureSingleAccessMode(queryModes) {\n  // Count the number of access modes\n  const accessCount = queryModes.filter(m => (0, _itinerary.isAccessMode)(m)).length; // If multiple access modes are specified, keep only the first one\n\n  if (accessCount > 1) {\n    const firstAccess = queryModes.find(m => (0, _itinerary.isAccessMode)(m));\n    queryModes = queryModes.filter(m => !(0, _itinerary.isAccessMode)(m) || m === firstAccess); // If no access modes are specified, add 'WALK' as the default\n  } else if (accessCount === 0) {\n    queryModes.push(\"WALK\");\n  }\n\n  return queryModes;\n}\n\nfunction getUrlParams() {\n  return _qs.default.parse(window.location.href.split(\"?\")[1]);\n}\n\nfunction getOtpUrlParams() {\n  return Object.keys(getUrlParams()).filter(key => !key.startsWith(\"ui_\"));\n}\n\nfunction findLocationType(location, locations = [], types = [\"home\", \"work\", \"suggested\"]) {\n  const match = locations.find(l => (0, _map.matchLatLon)(l, location));\n  return match && types.indexOf(match.type) !== -1 ? match.type : null;\n}\n\nfunction summarizeQuery(query, locations = []) {\n  const from = findLocationType(query.from, locations) || query.from.name.split(\",\")[0];\n  const to = findLocationType(query.to, locations) || query.to.name.split(\",\")[0];\n  const mode = (0, _itinerary.hasTransit)(query.mode) ? \"Transit\" : (0, _itinerary.toSentenceCase)(query.mode);\n  return `${mode} from ${from} to ${to}`;\n}\n\nfunction getTripOptionsFromQuery(query, keepPlace = false) {\n  const options = { ...query\n  }; // Delete time/date options and from/to\n\n  delete options.time;\n  delete options.departArrive;\n  delete options.date;\n\n  if (!keepPlace) {\n    delete options.from;\n    delete options.to;\n  }\n\n  return options;\n}\n/**\n * Gets the query param's default value that is either a constant or by\n * executing the default value function.\n */\n\n\nfunction getDefaultQueryParamValue(param) {\n  return typeof param.default === \"function\" ? param.default() : param.default;\n}\n/**\n * Determines whether the specified query differs from the default query, i.e.,\n * whether the user has modified any trip options (including mode) from their\n * default values.\n */\n\n\nfunction isNotDefaultQuery(query, config) {\n  const activeModes = query.mode.split(\",\");\n  const defaultModes = (0, _itinerary.getTransitModes)(config).concat([\"WALK\"]);\n  let queryIsDifferent = false;\n  const modesEqual = activeModes.length === defaultModes.length && activeModes.sort().every((value, index) => {\n    return value === defaultModes.sort()[index];\n  });\n\n  if (!modesEqual) {\n    queryIsDifferent = true;\n  } else {\n    defaultParams.forEach(param => {\n      const paramInfo = _queryParams.default.find(qp => qp.name === param); // Check that the parameter applies to the specified routingType\n\n\n      if (!paramInfo.routingTypes.includes(query.routingType)) return; // Check that the applicability test (if provided) is satisfied\n\n      if (typeof paramInfo.applicable === \"function\" && !paramInfo.applicable(query, config)) return;\n\n      if (query[param] !== getDefaultQueryParamValue(paramInfo)) {\n        queryIsDifferent = true;\n      }\n    });\n  }\n\n  return queryIsDifferent;\n}\n/**\n * Get the default query to OTP based on the given config.\n */\n\n\nfunction getDefaultQuery() {\n  const defaultQuery = {\n    routingType: \"ITINERARY\"\n  };\n\n  _queryParams.default.filter(qp => \"default\" in qp).forEach(qp => {\n    defaultQuery[qp.name] = getDefaultQueryParamValue(qp);\n  });\n\n  return defaultQuery;\n}\n/**\n * Geocode utility for returning the first result for the provided place name text.\n * @param  {string} text - text to search\n * @param  {Object} geocoderConfig\n * @return {Location}\n */\n\n\nasync function getFirstGeocodeResult(text, geocoderConfig) {\n  const geocoder = (0, _lib.default)(geocoderConfig); // Attempt to geocode search text and return first result if found.\n  // TODO: Import geocoder from @opentripplanner\n\n  return geocoder.search({\n    text\n  }).then(result => {\n    const firstResult = result.features && result.features[0];\n\n    if (firstResult) {\n      return geocoder.getLocationFromGeocodedFeature(firstResult);\n    }\n\n    return null;\n  });\n}\n/**\n * OTP allows passing a location in the form '123 Main St::lat,lon', so we check\n * for the double colon and parse the coordinates accordingly.\n * @param  {string} value - query param for place described above\n * @return {Location} - location or null if the value is falsey or the parsed\n *                      coordinates do not result in both a lat and lon\n */\n\n\nfunction parseLocationString(value) {\n  if (!value) return null;\n  const parts = value.split(\"::\");\n  const coordinates = parts[1] ? (0, _map.stringToCoords)(parts[1]) : (0, _map.stringToCoords)(parts[0]);\n  const name = parts[1] ? parts[0] : (0, _map.coordsToString)(coordinates);\n  return coordinates.length === 2 ? {\n    name: name || null,\n    lat: coordinates[0] || null,\n    lon: coordinates[1] || null\n  } : null;\n}\n/**\n * Convert a string query param for a from or to place into a location. If\n * coordinates not provided and geocoder config is present, use the first\n * geocoded result.\n * @param  {string} value\n * @param  {Object} [geocoderConfig=null]\n * @return {Location}\n */\n\n\nasync function queryParamToLocation(value, geocoderConfig) {\n  let location = parseLocationString(value);\n\n  if (!location && value && geocoderConfig) {\n    // If a valid location was not found, but the place name text exists,\n    // attempt to geocode the name.\n    location = await getFirstGeocodeResult(value, geocoderConfig);\n  }\n\n  return location;\n}\n/**\n * Create a otp query based on a the url params.\n *\n * @param  {Object} params An object representing the parsed querystring of url\n *    params.\n */\n\n\nfunction planParamsToQuery(params) {\n  const query = {};\n  Object.keys(params).forEach(key => {\n    switch (key) {\n      case \"fromPlace\":\n        query.from = parseLocationString(params.fromPlace);\n        break;\n\n      case \"toPlace\":\n        query.to = parseLocationString(params.toPlace);\n        break;\n\n      case \"arriveBy\":\n        query.departArrive = params.arriveBy === \"true\" ? \"ARRIVE\" : params.arriveBy === \"false\" ? \"DEPART\" : \"NOW\";\n        break;\n\n      case \"date\":\n        query.date = params.date || (0, _time.getCurrentDate)();\n        break;\n\n      case \"time\":\n        {\n          const parsedTime = (0, _moment.default)(params.time, TIME_FORMATS);\n          query.time = parsedTime.isValid() ? parsedTime.format(_time.OTP_API_TIME_FORMAT) : (0, _time.getCurrentTime)();\n        }\n        break;\n\n      case \"intermediatePlaces\":\n        // If query has intermediate places, ensure that they are parsed\n        // as locations.\n        query.intermediatePlaces = params.intermediatePlaces ? params.intermediatePlaces.split(\",\").map(parseLocationString) : [];\n        break;\n\n      default:\n        {\n          const maybeNumber = Number(params[key]); // If the param value is an empty string literal and is not a number,\n          // use string value. Else, use parsed number value.\n          // See https://github.com/opentripplanner/otp-ui/issues/50\n\n          query[key] = params[key] === \"\" || Number.isNaN(maybeNumber) ? params[key] : maybeNumber;\n          break;\n        }\n    }\n  });\n  return query;\n}\n/**\n * Async method to create a otp query based on a the url params. This provides\n * the same functionality as planParamsToQuery, except that it will also attempt\n * to geocode the input from and to strings if no lat/lng values were provided.\n *\n * @param  {Object} params An object representing the parsed querystring of url\n *    params.\n * @param config the config in the otp-rr store.\n */\n\n\nasync function planParamsToQueryAsync(params, config = {}) {\n  // Construct query from plan params.\n  const query = planParamsToQuery(params); // Attempt to geocode from and to params if the string parsing does not return\n  // valid locations.\n\n  if (!query.from) {\n    query.from = await queryParamToLocation(params.fromPlace, config.geocoder);\n  }\n\n  if (!query.to) {\n    query.to = await queryParamToLocation(params.toPlace, config.geocoder);\n  }\n\n  return query;\n}\n/**\n * Create an object that can be used as a querystring in making an OTP\n * PlannerResource request.\n *\n * See http://otp-docs.ibi-transit.com/api/resource_PlannerResource.html\n *\n * @param  {Object} config  The OTP application config. See types#configType\n * @param  {Object} currentQuery  The current query parameters as saved in the\n *   application state. This method does some extra logic on top of this data\n *   in order to create a request suitable for OTP. See __tests__/query.js#L14 for more.\n * @param  {boolean} ignoreRealtimeUpdates  If true, will create a request that\n *   does not use realtime data.\n */\n\n\nfunction getRoutingParams(config, currentQuery, ignoreRealtimeUpdates) {\n  const routingType = currentQuery.routingType;\n  const isItinerary = routingType === \"ITINERARY\";\n  let params = {}; // Start with the universe of OTP parameters defined in query-params.js:\n\n  _queryParams.default.filter(qp => {\n    // A given parameter is included in the request if all of the following:\n    // 1. Must apply to the active routing type (ITINERARY or PROFILE)\n    // 2. Must be included in the current user-defined query\n    // 3. Must pass the parameter's applicability test, if one is specified\n    return qp.routingTypes.indexOf(routingType) !== -1 && qp.name in currentQuery && (typeof qp.applicable !== \"function\" || qp.applicable(currentQuery, config));\n  }).forEach(qp => {\n    // Translate the applicable parameters according to their rewrite\n    // functions (if provided)\n    const rewriteFunction = isItinerary ? qp.itineraryRewrite : qp.profileRewrite;\n    params = Object.assign(params, rewriteFunction ? rewriteFunction(currentQuery[qp.name]) : {\n      [qp.name]: currentQuery[qp.name]\n    });\n  }); // Additional processing specific to ITINERARY mode\n\n\n  if (isItinerary) {\n    // override ignoreRealtimeUpdates if provided\n    if (typeof ignoreRealtimeUpdates === \"boolean\") {\n      params.ignoreRealtimeUpdates = ignoreRealtimeUpdates;\n    } // check date/time validity; ignore both if either is invalid\n\n\n    const dateValid = (0, _moment.default)(params.date, _time.OTP_API_DATE_FORMAT).isValid();\n    const timeValid = (0, _moment.default)(params.time, _time.OTP_API_TIME_FORMAT).isValid();\n\n    if (!dateValid || !timeValid) {\n      delete params.time;\n      delete params.date;\n    } // temp: set additional parameters for CAR_HAIL or CAR_RENT trips\n\n\n    if (params.mode && (params.mode.includes(\"CAR_HAIL\") || params.mode.includes(\"CAR_RENT\"))) {\n      params.minTransitDistance = \"50%\"; // increase search timeout because these queries can take a while\n\n      params.searchTimeout = 10000;\n    } // set onlyTransitTrips for car rental searches\n\n\n    if (params.mode && params.mode.includes(\"CAR_RENT\")) {\n      params.onlyTransitTrips = true;\n    } // Additional processing specific to PROFILE mode\n\n  } else {\n    // check start and end time validity; ignore both if either is invalid\n    const startTimeValid = (0, _moment.default)(params.startTime, _time.OTP_API_TIME_FORMAT).isValid();\n    const endTimeValid = (0, _moment.default)(params.endTime, _time.OTP_API_TIME_FORMAT).isValid();\n\n    if (!startTimeValid || !endTimeValid) {\n      delete params.startTimeValid;\n      delete params.endTimeValid;\n    }\n  } // TODO: check that valid from/to locations are provided\n  // hack to add walking to driving/TNC trips\n\n\n  if ((0, _itinerary.hasCar)(params.mode)) {\n    params.mode += \",WALK\";\n  }\n\n  return params;\n}"]}