{"version":3,"sources":["route.js"],"names":["Object","defineProperty","exports","value","getTransitOperatorFromId","getTransitOperatorFromOtpRoute","routeComparator","feedId","transitOperators","find","transitOperator","id","route","operatorId","split","toLowerCase","getSortValues","getterFn","a","b","aVal","bVal","modeComparatorValue","SUBWAY","TRAM","RAIL","GONDOLA","FERRY","CABLE_CAR","FUNICULAR","BUS","routeTypeComparatorValue","getRouteTypeComparatorValue","Error","mode","type","console","warn","routeTypeComparator","startsWithAlphabeticCharacter","val","length","firstCharCode","charCodeAt","alphabeticShortNameComparator","aStartsWithAlphabeticCharacter","shortName","bStartsWithAlphabeticCharacter","makeNumericValueComparator","objGetterFn","isNaN","makeStringValueComparator","getRouteSortOrderValue","undefined","makeMultiCriteriaSort","criteria","i","curCriteriaComparatorValue","obj","sortOrder","parseInt","longName"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTransitOperatorFromId = getTransitOperatorFromId;\nexports.getTransitOperatorFromOtpRoute = getTransitOperatorFromOtpRoute;\nexports.routeComparator = void 0;\n\n/**\n * Looks up an operator from the provided configuration.\n * @param  {string} feedId - the feed ID, which can be obtained by splitting the\n *                            OTP route or stop ID by `:`\n * @param  {object} transitOperators - transitOperators from config.\n * @return {object} the operator for the specified feedId\n */\nfunction getTransitOperatorFromId(feedId, transitOperators) {\n  return transitOperators.find(transitOperator => transitOperator.id === feedId) || null;\n}\n/** Looks up an operator from the provided configuration */\n\n\nfunction getTransitOperatorFromOtpRoute(route, transitOperators) {\n  if (!route.id) return null;\n  const operatorId = route.id.split(\":\")[0].toLowerCase();\n  return getTransitOperatorFromId(operatorId, transitOperators);\n}\n/**\n * The functions below are for enhanced route sorting functions for\n * the route viewer on OTP-react-redux.\n * They address route ordering issues discussed in\n * https://github.com/opentripplanner/otp-react-redux/pull/123 and\n * https://github.com/opentripplanner/otp-react-redux/pull/124.\n */\n\n/**\n * Gets the desired sort values according to an optional getter function. If the\n * getter function is not defined, the original sort values are returned.\n */\n\n\nfunction getSortValues(getterFn, a, b) {\n  let aVal;\n  let bVal;\n\n  if (typeof getterFn === \"function\") {\n    aVal = getterFn(a);\n    bVal = getterFn(b);\n  } else {\n    aVal = a;\n    bVal = b;\n  }\n\n  return {\n    aVal,\n    bVal\n  };\n} // Lookup for the sort values associated with various OTP modes.\n// Note: JSDoc format not used to avoid bug in documentationjs.\n// https://github.com/documentationjs/documentation/issues/372\n\n\nconst modeComparatorValue = {\n  SUBWAY: 1,\n  TRAM: 2,\n  RAIL: 3,\n  GONDOLA: 4,\n  FERRY: 5,\n  CABLE_CAR: 6,\n  FUNICULAR: 7,\n  BUS: 8\n}; // Lookup that maps route types to the OTP mode sort values.\n// Note: JSDoc format not used to avoid bug in documentationjs.\n// https://github.com/documentationjs/documentation/issues/372\n\nconst routeTypeComparatorValue = {\n  0: modeComparatorValue.TRAM,\n  // - Tram, Streetcar, Light rail.\n  1: modeComparatorValue.SUBWAY,\n  // - Subway, Metro.\n  2: modeComparatorValue.RAIL,\n  // - Rail. Used for intercity or long-distance travel.\n  3: modeComparatorValue.BUS,\n  // - Bus.\n  4: modeComparatorValue.FERRY,\n  // - Ferry.\n  5: modeComparatorValue.CABLE_CAR,\n  // - Cable tram.\n  6: modeComparatorValue.GONDOLA,\n  // - Gondola, etc.\n  7: modeComparatorValue.FUNICULAR,\n  // - Funicular.\n  // TODO: 11 and 12 are not a part of OTP as of 2019-02-14, but for now just\n  // associate them with bus/rail.\n  11: modeComparatorValue.BUS,\n  // - Trolleybus.\n  12: modeComparatorValue.RAIL // - Monorail.\n\n}; // Gets a comparator value for a given route's type (OTP mode).\n// Note: JSDoc format not used to avoid bug in documentationjs.\n// ttps://github.com/documentationjs/documentation/issues/372\n\nfunction getRouteTypeComparatorValue(route) {\n  // For some strange reason, the short route response in OTP returns the\n  // string-based modes, but the long route response returns the\n  // integer route type. This attempts to account for both of those cases.\n  if (!route) throw new Error(\"Route is undefined.\", route);\n\n  if (typeof modeComparatorValue[route.mode] !== \"undefined\") {\n    return modeComparatorValue[route.mode];\n  }\n\n  if (typeof routeTypeComparatorValue[route.type] !== \"undefined\") {\n    return routeTypeComparatorValue[route.type];\n  } // Default the comparator value to a large number (placing the route at the\n  // end of the list).\n\n\n  console.warn(\"no mode/route type found for route\", route);\n  return 9999;\n}\n/**\n * Calculates the sort comparator value given two routes based off of route type\n * (OTP mode).\n */\n\n\nfunction routeTypeComparator(a, b) {\n  return getRouteTypeComparatorValue(a) - getRouteTypeComparatorValue(b);\n}\n/**\n * Determines whether a value is a string that starts with an alphabetic\n * ascii character.\n */\n\n\nfunction startsWithAlphabeticCharacter(val) {\n  if (typeof val === \"string\" && val.length > 0) {\n    const firstCharCode = val.charCodeAt(0);\n    return firstCharCode >= 65 && firstCharCode <= 90 || firstCharCode >= 97 && firstCharCode <= 122;\n  }\n\n  return false;\n}\n/**\n * Sorts routes based off of whether the shortName begins with an alphabetic\n * character. Routes with shortn that do start with an alphabetic character will\n * be prioritized over those that don't.\n */\n\n\nfunction alphabeticShortNameComparator(a, b) {\n  const aStartsWithAlphabeticCharacter = startsWithAlphabeticCharacter(a.shortName);\n  const bStartsWithAlphabeticCharacter = startsWithAlphabeticCharacter(b.shortName);\n\n  if (aStartsWithAlphabeticCharacter && bStartsWithAlphabeticCharacter) {\n    // both start with an alphabetic character, return equivalence\n    return 0;\n  } // a does start with an alphabetic character, but b does not. Prioritize a\n\n\n  if (aStartsWithAlphabeticCharacter) return -1; // b does start with an alphabetic character, but a does not. Prioritize b\n\n  if (bStartsWithAlphabeticCharacter) return 1; // neither route has a shortName that starts with an alphabetic character.\n  // Return equivalence\n\n  return 0;\n}\n/**\n * Checks whether an appropriate comparison of numeric values can be made for\n * sorting purposes. If both values are not valid numbers according to the\n * isNaN check, then this function returns undefined which indicates that a\n * secondary sorting criteria should be used instead. If one value is valid and\n * the other is not, then the valid value will be given sorting priority. If\n * both values are valid numbers, the difference is obtained as the sort value.\n *\n * An optional argument can be provided which will be used to obtain the\n * comparison value from the comparison function arguments.\n *\n * IMPORTANT: the comparison values must be numeric values or at least be\n * attempted to be converted to numeric values! If one of the arguments is\n * something crazy like an empty string, unexpected behavior will occur because\n * JavaScript.\n *\n * @param  {function} [objGetterFn] An optional function to obtain the\n *  comparison value from the comparator function arguments\n */\n\n\nfunction makeNumericValueComparator(objGetterFn) {\n  /* Note: Using the global version of isNaN (the Number version behaves differently. */\n\n  /* eslint-disable no-restricted-globals */\n  return (a, b) => {\n    const {\n      aVal,\n      bVal\n    } = getSortValues(objGetterFn, a, b); // if both values aren't valid numbers, use the next sort criteria\n\n    if (isNaN(aVal) && isNaN(bVal)) return 0; // b is a valid number, b gets priority\n\n    if (isNaN(aVal)) return 1; // a is a valid number, a gets priority\n\n    if (isNaN(bVal)) return -1; // a and b are valid numbers, return the sort value\n\n    return aVal - bVal;\n  };\n}\n/**\n * Create a comparator function that compares string values. The comparison\n * values feed to the sort comparator function are assumed to be objects that\n * will have either undefined, null or string values at the given key. If one\n * object has undefined, null or an empty string, but the other does have a\n * string with length > 0, then that string will get priority.\n *\n * @param  {function} [objGetterFn] An optional function to obtain the\n *  comparison value from the comparator function arguments\n */\n\n\nfunction makeStringValueComparator(objGetterFn) {\n  return (a, b) => {\n    const {\n      aVal,\n      bVal\n    } = getSortValues(objGetterFn, a, b); // both a and b are uncomparable strings, return equivalent value\n\n    if (!aVal && !bVal) return 0; // a is not a comparable string, b gets priority\n\n    if (!aVal) return 1; // b is not a comparable string, a gets priority\n\n    if (!bVal) return -1; // a and b are comparable strings, return the sort value\n\n    if (aVal < bVal) return -1;\n    if (aVal > bVal) return 1;\n    return 0;\n  };\n}\n/**\n * OpenTripPlanner sets the routeSortOrder to -999 by default. So, if that value\n * is encountered, assume that it actually means that the routeSortOrder is not\n * set in the GTFS.\n *\n * See https://github.com/opentripplanner/OpenTripPlanner/issues/2938\n * Also see https://github.com/opentripplanner/otp-react-redux/issues/122\n */\n\n\nfunction getRouteSortOrderValue(val) {\n  return val === -999 ? undefined : val;\n}\n/**\n * Create a multi-criteria sort comparator function composed of other sort\n * comparator functions. Each comparator function will be ran in the order given\n * until a non-zero comparison value is obtained which is then immediately\n * returned. If all comparison functions return equivalance, then the values\n * are assumed to be equivalent.\n */\n\n\nfunction makeMultiCriteriaSort(...criteria) {\n  return (a, b) => {\n    for (let i = 0; i < criteria.length; i++) {\n      const curCriteriaComparatorValue = criteria[i](a, b); // if the comparison objects are not equivalent, return the value obtained\n      // in this current criteria comparison\n\n      if (curCriteriaComparatorValue !== 0) {\n        return curCriteriaComparatorValue;\n      }\n    }\n\n    return 0;\n  };\n}\n/**\n * Compares routes for the purposes of sorting and displaying in a user\n * interface. Due to GTFS feeds having varying levels of data quality, a multi-\n * criteria sort is needed to account for various differences. The criteria\n * included here are each applied to the routes in the order listed. If a given\n * sort criterion yields equivalence (e.g., two routes have the short name\n * \"20\"), the comparator falls back onto the next sort criterion (e.g., long\n * name). If desired, the criteria of sorting based off of integer shortName can\n * be disabled. The sort operates on the following values (in order):\n *\n *  1. sortOrder. Routes that do not have a valid sortOrder will be placed\n *    beneath those that do.\n *  2. route type (OTP mode). See routeTypeComparator code for prioritization of\n *    route types.\n *  3. shortNames that begin with alphabetic characters. shortNames that do not\n *    start with alphabetic characters will be place beneath those that do.\n *  4. shortName as integer. shortNames that cannot be parsed as integers will\n *    be placed beneath those that are valid.\n *  5. shortName as string. Routes without shortNames will be placed beneath\n *    those with shortNames.\n *  6. longName as string.\n */\n\n\nconst routeComparator = makeMultiCriteriaSort(makeNumericValueComparator(obj => getRouteSortOrderValue(obj.sortOrder)), routeTypeComparator, alphabeticShortNameComparator, makeNumericValueComparator(obj => parseInt(obj.shortName, 10)), makeStringValueComparator(obj => obj.shortName), makeStringValueComparator(obj => obj.longName));\nexports.routeComparator = routeComparator;"]}