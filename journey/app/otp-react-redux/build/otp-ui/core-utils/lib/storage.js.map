{"version":3,"sources":["storage.js"],"names":["Object","defineProperty","exports","value","storeItem","getItem","removeItem","randId","STORAGE_PREFIX","key","object","window","localStorage","setItem","JSON","stringify","notFoundValue","itemAsString","json","parse","e","console","warn","Math","random","toString","substr"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,SAAR,GAAoBA,SAApB;AACAF,OAAO,CAACG,OAAR,GAAkBA,OAAlB;AACAH,OAAO,CAACI,UAAR,GAAqBA,UAArB;AACAJ,OAAO,CAACK,MAAR,GAAiBA,MAAjB,C,CACA;;AACA,MAAMC,cAAc,GAAG,KAAvB;AACA;AACA;AACA;;AAEA,SAASJ,SAAT,CAAmBK,GAAnB,EAAwBC,MAAxB,EAAgC;AAC9BC,EAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA6B,GAAEL,cAAe,IAAGC,GAAI,EAArD,EAAwDK,IAAI,CAACC,SAAL,CAAeL,MAAf,CAAxD;AACD;AACD;AACA;AACA;AACA;;;AAGA,SAASL,OAAT,CAAiBI,GAAjB,EAAsBO,aAAa,GAAG,IAAtC,EAA4C;AAC1C,MAAIC,YAAJ;;AAEA,MAAI;AACFA,IAAAA,YAAY,GAAGN,MAAM,CAACC,YAAP,CAAoBP,OAApB,CAA6B,GAAEG,cAAe,IAAGC,GAAI,EAArD,CAAf;AACA,UAAMS,IAAI,GAAGJ,IAAI,CAACK,KAAL,CAAWF,YAAX,CAAb;AACA,QAAIC,IAAJ,EAAU,OAAOA,IAAP;AACV,WAAOF,aAAP;AACD,GALD,CAKE,OAAOI,CAAP,EAAU;AACV;AACAC,IAAAA,OAAO,CAACC,IAAR,CAAaF,CAAb,EAAgBH,YAAhB;AACA,WAAOD,aAAP;AACD;AACF;AACD;AACA;AACA;;;AAGA,SAASV,UAAT,CAAoBG,GAApB,EAAyB;AACvBE,EAAAA,MAAM,CAACC,YAAP,CAAoBN,UAApB,CAAgC,GAAEE,cAAe,IAAGC,GAAI,EAAxD;AACD;AACD;AACA;AACA;AACA;;;AAGA,SAASF,MAAT,GAAkB;AAChB,SAAOgB,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAlC,EAAqC,CAArC,CAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.storeItem = storeItem;\nexports.getItem = getItem;\nexports.removeItem = removeItem;\nexports.randId = randId;\n// Prefix to use with local storage keys.\nconst STORAGE_PREFIX = \"otp\";\n/**\n * Store a javascript object at the specified key.\n */\n\nfunction storeItem(key, object) {\n  window.localStorage.setItem(`${STORAGE_PREFIX}.${key}`, JSON.stringify(object));\n}\n/**\n * Retrieve a javascript object at the specified key. If not found, defaults to\n * null or, the optionally provided notFoundValue.\n */\n\n\nfunction getItem(key, notFoundValue = null) {\n  let itemAsString;\n\n  try {\n    itemAsString = window.localStorage.getItem(`${STORAGE_PREFIX}.${key}`);\n    const json = JSON.parse(itemAsString);\n    if (json) return json;\n    return notFoundValue;\n  } catch (e) {\n    // Catch any errors associated with parsing bad JSON.\n    console.warn(e, itemAsString);\n    return notFoundValue;\n  }\n}\n/**\n * Remove item at specified key.\n */\n\n\nfunction removeItem(key) {\n  window.localStorage.removeItem(`${STORAGE_PREFIX}.${key}`);\n}\n/**\n * Generate a random ID. This might not quite be a UUID, but it serves our\n * purposes for now.\n */\n\n\nfunction randId() {\n  return Math.random().toString(36).substr(2, 9);\n}"]}