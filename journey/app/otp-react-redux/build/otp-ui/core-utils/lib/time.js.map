{"version":3,"sources":["time.js"],"names":["Object","defineProperty","exports","value","getTimeFormat","getDateFormat","getLongDateFormat","formatDuration","formatDurationWithSeconds","formatTime","formatSecondsAfterMidnight","getUserTimezone","getCurrentTime","getCurrentDate","OTP_API_TIME_FORMAT","OTP_API_DATE_FORMAT","_momentTimezone","_interopRequireDefault","require","obj","__esModule","default","config","dateTime","timeFormat","dateFormat","longDateFormat","seconds","dur","duration","text","hours","minutes","ms","options","offset","format","startOf","process","env","NODE_ENV","TZ","tz","guess","console","warn","timezone"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTimeFormat = getTimeFormat;\nexports.getDateFormat = getDateFormat;\nexports.getLongDateFormat = getLongDateFormat;\nexports.formatDuration = formatDuration;\nexports.formatDurationWithSeconds = formatDurationWithSeconds;\nexports.formatTime = formatTime;\nexports.formatSecondsAfterMidnight = formatSecondsAfterMidnight;\nexports.getUserTimezone = getUserTimezone;\nexports.getCurrentTime = getCurrentTime;\nexports.getCurrentDate = getCurrentDate;\nexports.OTP_API_TIME_FORMAT = exports.OTP_API_DATE_FORMAT = void 0;\n\nvar _momentTimezone = _interopRequireDefault(require(\"moment-timezone\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// special constants for making sure the following date format is always sent to\n// OTP regardless of whatever the user has configured as the display format\nconst OTP_API_DATE_FORMAT = \"YYYY-MM-DD\";\nexports.OTP_API_DATE_FORMAT = OTP_API_DATE_FORMAT;\nconst OTP_API_TIME_FORMAT = \"HH:mm\";\n/**\n * @param  {[type]} config the OTP config object found in store\n * @return {string}        the config-defined time formatter or HH:mm (24-hr time)\n */\n\nexports.OTP_API_TIME_FORMAT = OTP_API_TIME_FORMAT;\n\nfunction getTimeFormat(config) {\n  return config.dateTime && config.dateTime.timeFormat ? config.dateTime.timeFormat : OTP_API_TIME_FORMAT;\n}\n\nfunction getDateFormat(config) {\n  return config.dateTime && config.dateTime.dateFormat ? config.dateTime.dateFormat : OTP_API_DATE_FORMAT;\n}\n\nfunction getLongDateFormat(config) {\n  return config.dateTime && config.dateTime.longDateFormat ? config.dateTime.longDateFormat : \"D MMMM YYYY\";\n}\n/**\n * Formats an elapsed time duration for display in narrative\n * TODO: internationalization\n * @param {number} seconds duration in seconds\n * @returns {string} formatted text representation\n */\n\n\nfunction formatDuration(seconds) {\n  const dur = _momentTimezone.default.duration(seconds, \"seconds\");\n\n  let text = \"\";\n  if (dur.hours() > 0) text += `${dur.hours()} hr, `;\n  text += `${dur.minutes()} min`;\n  return text;\n}\n/**\n * Formats an elapsed time in seconds, minutes, hours duration for display in narrative\n * TODO: internationalization\n * @param {number} seconds duration in seconds\n * @returns {string} formatted text representation\n */\n\n\nfunction formatDurationWithSeconds(seconds) {\n  const dur = _momentTimezone.default.duration(seconds, \"seconds\");\n\n  let text = \"\";\n  if (dur.hours() > 0) text += `${dur.hours()} hr, `;\n  if (dur.minutes() > 0) text += `${dur.minutes()} min, `;\n  text += `${dur.seconds()} sec`;\n  return text;\n}\n/**\n * Formats a time value for display in narrative\n * TODO: internationalization/timezone\n * @param {number} ms epoch time value in milliseconds\n * @returns {string} formatted text representation\n */\n\n\nfunction formatTime(ms, options) {\n  return (0, _momentTimezone.default)(ms + (options && options.offset ? options.offset : 0)).format(options && options.format ? options.format : OTP_API_TIME_FORMAT);\n}\n/**\n * Formats a seconds after midnight value for display in narrative\n * @param  {number} seconds  time since midnight in seconds\n * @param  {string} timeFormat  A valid moment.js time format\n * @return {string}                   formatted text representation\n */\n\n\nfunction formatSecondsAfterMidnight(seconds, timeFormat) {\n  return (0, _momentTimezone.default)().startOf(\"day\").seconds(seconds).format(timeFormat);\n}\n/**\n * Get the timezone name that is set for the user that is currently looking at\n * this website. Use a bit of hackery to force a specific timezone if in a\n * test environment.\n */\n\n\nfunction getUserTimezone() {\n  if (process.env.NODE_ENV === \"test\") return process.env.TZ; // FIXME There is an issue with tz.guess being undefined that has not yet been\n  // resolved. https://github.com/opentripplanner/otp-ui/issues/152\n\n  if (!_momentTimezone.default.tz || typeof _momentTimezone.default.tz.guess !== \"function\") {\n    // eslint-disable-next-line no-console\n    console.warn(\"Error guessing user's timezone (moment.tz or moment.tz.guess not defined). Defaulting to America/New_York.\");\n    return \"America/New_York\";\n  }\n\n  return _momentTimezone.default.tz.guess();\n}\n/**\n * Formats current time for use in OTP query\n * The conversion to the user's timezone is needed for testing purposes.\n */\n\n\nfunction getCurrentTime(timezone = getUserTimezone()) {\n  return (0, _momentTimezone.default)().tz(timezone).format(OTP_API_TIME_FORMAT);\n}\n/**\n * Formats current date for use in OTP query\n * The conversion to the user's timezone is needed for testing purposes.\n */\n\n\nfunction getCurrentDate(timezone = getUserTimezone()) {\n  return (0, _momentTimezone.default)().tz(timezone).format(OTP_API_DATE_FORMAT);\n}"]}