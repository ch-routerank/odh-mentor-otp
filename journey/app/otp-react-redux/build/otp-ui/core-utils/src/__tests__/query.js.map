{"version":3,"sources":["query.js"],"names":["describe","afterEach","restoreDateNowBehavior","it","expect","arriveBy","bannedRoutes","companies","date","fromPlace","ignoreRealtimeUpdates","maxWalkDistance","mode","optimize","showIntermediateStops","time","toPlace","ui_activeItinerary","ui_activeSearch","walkSpeed","toMatchSnapshot"],"mappings":";;AAAA;;AAKA;;AAMAA,QAAQ,CAAC,OAAD,EAAU,MAAM;AACtBC,EAAAA,SAAS,CAACC,4BAAD,CAAT;AAEAF,EAAAA,QAAQ,CAAC,mBAAD,EAAsB,MAAM;AAClCG,IAAAA,EAAE,CAAC,gCAAD,EAAmC,YAAY;AAC/CC,MAAAA,MAAM,CACJ,MAAM,8BAAkB;AACtBC,QAAAA,QAAQ,EAAE,OADY;AAEtBC,QAAAA,YAAY,EAAE,QAFQ;AAGtBC,QAAAA,SAAS,EAAE,EAHW;AAItBC,QAAAA,IAAI,EAAE,YAJgB;AAKtBC,QAAAA,SAAS,EACP,oEANoB;AAOtBC,QAAAA,qBAAqB,EAAE,MAPD;AAQtBC,QAAAA,eAAe,EAAE,MARK;AAStBC,QAAAA,IAAI,EAAE,4BATgB;AAUtBC,QAAAA,QAAQ,EAAE,OAVY;AAWtBC,QAAAA,qBAAqB,EAAE,MAXD;AAYtBC,QAAAA,IAAI,EAAE,OAZgB;AAatBC,QAAAA,OAAO,EAAE,2DAba;AActBC,QAAAA,kBAAkB,EAAE,GAdE;AAetBC,QAAAA,eAAe,EAAE,WAfK;AAgBtBC,QAAAA,SAAS,EAAE;AAhBW,OAAlB,CADF,CAAN,CAmBEC,eAnBF;AAoBD,KArBC,CAAF;AAsBD,GAvBO,CAAR;AAyBApB,EAAAA,QAAQ,CAAC,iBAAD,EAAoB,MAAM;AAChCG,IAAAA,EAAE,CAAC,6BAAD,EAAgC,MAAM;AACtC;AACAC,MAAAA,MAAM,CAAC,6BAAD,CAAN,CAA0BgB,eAA1B;AACD,KAHC,CAAF;AAID,GALO,CAAR;AAOApB,EAAAA,QAAQ,CAAC,qBAAD,EAAwB,MAAM;AACpCG,IAAAA,EAAE,CAAC,mCAAD,EAAsC,MAAM;AAC5CC,MAAAA,MAAM,CAAC,gCAAoB,IAApB,CAAD,CAAN,CAAkCgB,eAAlC;AACD,KAFC,CAAF;AAIAjB,IAAAA,EAAE,CAAC,wCAAD,EAA2C,MAAM;AACjDC,MAAAA,MAAM,CACJ,gCAAoB,0CAApB,CADI,CAAN,CAEEgB,eAFF;AAGD,KAJC,CAAF;AAMAjB,IAAAA,EAAE,CAAC,4EAAD,EAA+E,MAAM;AACrFC,MAAAA,MAAM,CACJ,gCAAoB,6BAApB,CADI,CAAN,CAEEgB,eAFF;AAGD,KAJC,CAAF;AAKD,GAhBO,CAAR;AAiBD,CApDO,CAAR","sourcesContent":["import {\n  restoreDateNowBehavior,\n  setDefaultTestTime\n} from \"../../../../test-utils/time\";\n\nimport {\n  getDefaultQuery,\n  parseLocationString,\n  planParamsToQuery\n} from \"../query\";\n\ndescribe(\"query\", () => {\n  afterEach(restoreDateNowBehavior);\n\n  describe(\"planParamsToQuery\", () => {\n    it(\"should parse a depart at query\", async () => {\n      expect(\n        await planParamsToQuery({\n          arriveBy: \"false\",\n          bannedRoutes: \"897ABC\",\n          companies: \"\",\n          date: \"2019-10-31\",\n          fromPlace:\n            \"Guide Dogs for the Blind, Portland, OR, USA::45.517373,-122.675601\",\n          ignoreRealtimeUpdates: \"true\",\n          maxWalkDistance: \"1207\",\n          mode: \"BUS,TRAM,RAIL,GONDOLA,WALK\",\n          optimize: \"QUICK\",\n          showIntermediateStops: \"true\",\n          time: \"17:45\",\n          toPlace: \"Weather Machine, Portland, OR, USA::45.519015,-122.679321\",\n          ui_activeItinerary: \"0\",\n          ui_activeSearch: \"irc7h4rb8\",\n          walkSpeed: \"1.34\"\n        })\n      ).toMatchSnapshot();\n    });\n  });\n\n  describe(\"getDefaultQuery\", () => {\n    it(\"should return default query\", () => {\n      setDefaultTestTime();\n      expect(getDefaultQuery()).toMatchSnapshot();\n    });\n  });\n\n  describe(\"parseLocationString\", () => {\n    it(\"should return null for null input\", () => {\n      expect(parseLocationString(null)).toMatchSnapshot();\n    });\n\n    it(\"should return location for valid input\", () => {\n      expect(\n        parseLocationString(\"123 Main St::33.983929829,-87.3892387982\")\n      ).toMatchSnapshot();\n    });\n\n    it(\"should return location with coordinates as name for coordinates-only input\", () => {\n      expect(\n        parseLocationString(\"33.983929829,-87.3892387982\")\n      ).toMatchSnapshot();\n    });\n  });\n});\n"]}