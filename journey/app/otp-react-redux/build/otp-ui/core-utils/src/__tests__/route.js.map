{"version":3,"sources":["route.js"],"names":["route1","route2","route3","route4","route5","route6","route7","route8","route9","route10","route11","route12","route13","route14","route15","require","sortRoutes","routes","sort","routeComparator","describe","it","expectedTransitOperator","id","expect","toBe","toBeNull","otpRoute","toMatchSnapshot"],"mappings":"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","sourcesContent":["import {\n  getTransitOperatorFromId,\n  getTransitOperatorFromOtpRoute,\n  routeComparator\n} from \"../route\";\n\nconst {\n  route1,\n  route2,\n  route3,\n  route4,\n  route5,\n  route6,\n  route7,\n  route8,\n  route9,\n  route10,\n  route11,\n  route12,\n  route13,\n  route14,\n  route15\n} = require(\"./__mocks__/itinerary.json\");\n\nfunction sortRoutes(...routes) {\n  routes.sort(routeComparator);\n  return routes;\n}\n\ndescribe(\"util > route\", () => {\n  describe(\"getTransitOperatorFromId\", () => {\n    it(\"should get a transit operator\", () => {\n      const expectedTransitOperator = { id: \"1\" };\n      expect(\n        getTransitOperatorFromId(\"1\", [{ id: \"2\" }, expectedTransitOperator])\n      ).toBe(expectedTransitOperator);\n    });\n\n    it(\"should return null if transit operator is not found\", () => {\n      expect(getTransitOperatorFromId(\"abc\", [])).toBeNull();\n    });\n  });\n\n  describe(\"getTransitOperatorFromOtpRoute\", () => {\n    const otpRoute = { id: \"1:abc\" };\n    it(\"should get a transit operator\", () => {\n      const expectedTransitOperator = { id: \"1\" };\n      expect(\n        getTransitOperatorFromOtpRoute(otpRoute, [\n          { id: \"2\" },\n          expectedTransitOperator\n        ])\n      ).toBe(expectedTransitOperator);\n    });\n\n    it(\"should return null if transit operator is not found\", () => {\n      expect(getTransitOperatorFromOtpRoute(otpRoute, [])).toBeNull();\n    });\n  });\n\n  describe(\"routeComparator\", () => {\n    it(\"should sort routes based off of sortOrder\", () => {\n      expect(sortRoutes(route1, route2)).toMatchSnapshot();\n    });\n\n    it(\"should prioritize routes with valid sortOrder\", () => {\n      expect(sortRoutes(route2, route3)).toMatchSnapshot();\n    });\n\n    it(\"should sort routes based off of integer shortName\", () => {\n      expect(sortRoutes(route3, route4)).toMatchSnapshot();\n    });\n\n    it(\"should prioritize routes with integer shortNames over alphabetic shortNames\", () => {\n      expect(sortRoutes(route4, route5)).toMatchSnapshot();\n    });\n\n    it(\"should sort routes based off of shortNames\", () => {\n      expect(sortRoutes(route5, route6)).toMatchSnapshot();\n    });\n\n    it(\"should sort routes with alphanumeric shortNames\", () => {\n      expect(sortRoutes(route14, route15)).toMatchSnapshot();\n    });\n\n    it(\"should prioritize routes with shortNames over those with just longNames\", () => {\n      expect(sortRoutes(route6, route7)).toMatchSnapshot();\n    });\n\n    it(\"should sort routes based off of longNames\", () => {\n      expect(sortRoutes(route9, route10)).toMatchSnapshot();\n    });\n\n    it(\"should sort routes on all of the criteria at once\", () => {\n      expect(\n        sortRoutes(\n          route1,\n          route2,\n          route3,\n          route4,\n          route5,\n          route6,\n          route7,\n          route8,\n          route9,\n          route10,\n          route11,\n          route12,\n          route13,\n          route14,\n          route15\n        )\n      ).toMatchSnapshot();\n    });\n\n    it(\"should sort based off of route type\", () => {\n      expect(sortRoutes(route12, route13)).toMatchSnapshot();\n    });\n  });\n});\n"]}