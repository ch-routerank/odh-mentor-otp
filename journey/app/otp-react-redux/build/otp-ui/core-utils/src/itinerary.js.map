{"version":3,"sources":["itinerary.js"],"names":["alert","transitModes","getTransitModes","config","modes","map","tm","mode","isTransit","includes","isWalk","isBicycle","isBicycleRent","isCar","startsWith","isMicromobility","isAccessMode","hasTransit","modesStr","split","some","hasCar","hasBike","hasMicromobility","hasHail","indexOf","hasRental","getMapColor","get","convertAbsoluteDirection","direction","getStepDirection","step","relativeDirection","absoluteDirection","toLowerCase","getStepInstructions","conjunction","streetName","getStepStreetName","toSentenceCase","str","String","charAt","toUpperCase","substr","getLegModeLabel","leg","hailedCar","routeLongName","getItineraryBounds","itinerary","coords","legs","forEach","legCoords","polyline","toGeoJSON","legGeometry","points","coordinates","c","getLegBounds","length","push","from","lat","lon","to","legLocationAtDistance","distance","line","pt","units","geometry","e","legElevationAtDistance","traversed","unshift","i","start","elevDistanceSpan","console","warn","pct","elevSpan","getElevationProfile","steps","unitConversion","minElev","maxElev","gain","loss","previous","elevation","elev","diff","second","first","convertedElevation","getTextWidth","text","font","canvas","document","createElement","context","getContext","metrics","measureText","width","getCompanyForNetwork","networkString","companies","company","find","co","id","getCompaniesLabelFromNetworks","networks","network","filter","label","join","getModeForPlace","place","vertexType","getPlaceName","address","name","getTNCLocation","type","location","toFixed","calculatePhysicalActivity","walkDuration","bikeDuration","duration","caloriesBurned","calculateFares","transitFare","symbol","dollarsToString","dollars","centsToString","cents","fare","regular","reg","currency","defaultFractionDigits","minTNCFare","maxTNCFare","tncData","maxCost","minCost","getTimeZoneOffset","dstOffset","Date","startTime","getTimezoneOffset","agencyTimeZoneOffset","getSortValues","getterFn","a","b","aVal","bVal","modeComparatorValue","SUBWAY","TRAM","RAIL","GONDOLA","FERRY","CABLE_CAR","FUNICULAR","BUS","routeTypeComparatorValue","getRouteTypeComparatorValue","route","Error","routeTypeComparator","startsWithAlphabeticCharacter","val","firstCharCode","charCodeAt","alphabeticShortNameComparator","aStartsWithAlphabeticCharacter","shortName","bStartsWithAlphabeticCharacter","makeNumericValueComparator","objGetterFn","isNaN","makeStringValueComparator","getRouteSortOrderValue","undefined","makeMultiCriteriaSort","criteria","curCriteriaComparatorValue","routeComparator","obj","sortOrder","parseInt","longName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;AAEAA,KAAK,CAAC,WAAD,CAAL,C,CAEA;;AACO,MAAMC,YAAY,GAAG,CAC1B,MAD0B,EAE1B,KAF0B,EAG1B,QAH0B,EAI1B,OAJ0B,EAK1B,MAL0B,EAM1B,SAN0B,CAArB;AASP;AACA;AACA;AACA;;;;AAEO,SAASC,eAAT,CAAyBC,MAAzB,EAAiC;AACtC,MAAI,CAACA,MAAD,IAAW,CAACA,MAAM,CAACC,KAAnB,IAA4B,CAACD,MAAM,CAACC,KAAP,CAAaH,YAA9C,EACE,OAAOA,YAAP;AACF,SAAOE,MAAM,CAACC,KAAP,CAAaH,YAAb,CAA0BI,GAA1B,CAA8BC,EAAE,IAAIA,EAAE,CAACC,IAAvC,CAAP;AACD;;AAEM,SAASC,SAAT,CAAmBD,IAAnB,EAAyB;AAC9B,SAAON,YAAY,CAACQ,QAAb,CAAsBF,IAAtB,KAA+BA,IAAI,KAAK,SAA/C;AACD;;AAEM,SAASG,MAAT,CAAgBH,IAAhB,EAAsB;AAC3B,MAAI,CAACA,IAAL,EAAW,OAAO,KAAP;AAEX,SAAOA,IAAI,KAAK,MAAhB;AACD;;AAEM,SAASI,SAAT,CAAmBJ,IAAnB,EAAyB;AAC9B,MAAI,CAACA,IAAL,EAAW,OAAO,KAAP;AAEX,SAAOA,IAAI,KAAK,SAAhB;AACD;;AAEM,SAASK,aAAT,CAAuBL,IAAvB,EAA6B;AAClC,MAAI,CAACA,IAAL,EAAW,OAAO,KAAP;AAEX,SAAOA,IAAI,KAAK,cAAhB;AACD;;AAEM,SAASM,KAAT,CAAeN,IAAf,EAAqB;AAC1B,MAAI,CAACA,IAAL,EAAW,OAAO,KAAP;AACX,SAAOA,IAAI,CAACO,UAAL,CAAgB,KAAhB,CAAP;AACD;;AAEM,SAASC,eAAT,CAAyBR,IAAzB,EAA+B;AACpC,MAAI,CAACA,IAAL,EAAW,OAAO,KAAP;AACX,SAAOA,IAAI,CAACO,UAAL,CAAgB,eAAhB,CAAP;AACD;;AAEM,SAASE,YAAT,CAAsBT,IAAtB,EAA4B;AACjC,SACEG,MAAM,CAACH,IAAD,CAAN,IACAI,SAAS,CAACJ,IAAD,CADT,IAEAK,aAAa,CAACL,IAAD,CAFb,IAGAM,KAAK,CAACN,IAAD,CAHL,IAIAQ,eAAe,CAACR,IAAD,CALjB;AAOD;AAED;AACA;AACA;AACA;;;AACO,SAASU,UAAT,CAAoBC,QAApB,EAA8B;AACnC,SAAOA,QAAQ,CAACC,KAAT,CAAe,GAAf,EAAoBC,IAApB,CAAyBb,IAAI,IAAIC,SAAS,CAACD,IAAD,CAA1C,CAAP;AACD;AAED;AACA;AACA;AACA;;;AACO,SAASc,MAAT,CAAgBH,QAAhB,EAA0B;AAC/B,SAAOA,QAAQ,CAACC,KAAT,CAAe,GAAf,EAAoBC,IAApB,CAAyBb,IAAI,IAAIM,KAAK,CAACN,IAAD,CAAtC,CAAP;AACD;AAED;AACA;AACA;AACA;;;AACO,SAASe,OAAT,CAAiBJ,QAAjB,EAA2B;AAChC,SAAOA,QAAQ,CACZC,KADI,CACE,GADF,EAEJC,IAFI,CAECb,IAAI,IAAII,SAAS,CAACJ,IAAD,CAAT,IAAmBK,aAAa,CAACL,IAAD,CAFzC,CAAP;AAGD;AAED;AACA;AACA;AACA;;;AACO,SAASgB,gBAAT,CAA0BL,QAA1B,EAAoC;AACzC,SAAOA,QAAQ,CAACC,KAAT,CAAe,GAAf,EAAoBC,IAApB,CAAyBb,IAAI,IAAIQ,eAAe,CAACR,IAAD,CAAhD,CAAP;AACD;AAED;AACA;AACA;AACA;;;AACO,SAASiB,OAAT,CAAiBN,QAAjB,EAA2B;AAChC,SAAOA,QAAQ,CAACC,KAAT,CAAe,GAAf,EAAoBC,IAApB,CAAyBb,IAAI,IAAIA,IAAI,CAACkB,OAAL,CAAa,OAAb,IAAwB,CAAC,CAA1D,CAAP;AACD;AAED;AACA;AACA;AACA;;;AACO,SAASC,SAAT,CAAmBR,QAAnB,EAA6B;AAClC,SAAOA,QAAQ,CAACC,KAAT,CAAe,GAAf,EAAoBC,IAApB,CAAyBb,IAAI,IAAIA,IAAI,CAACkB,OAAL,CAAa,OAAb,IAAwB,CAAC,CAA1D,CAAP;AACD;;AAEM,SAASE,WAAT,CAAqBpB,IAArB,EAA2B;AAChCA,EAAAA,IAAI,GAAGA,IAAI,IAAI,KAAKqB,GAAL,CAAS,MAAT,CAAf;AACA,MAAIrB,IAAI,KAAK,MAAb,EAAqB,OAAO,MAAP;AACrB,MAAIA,IAAI,KAAK,SAAb,EAAwB,OAAO,SAAP;AACxB,MAAIA,IAAI,KAAK,QAAb,EAAuB,OAAO,MAAP;AACvB,MAAIA,IAAI,KAAK,MAAb,EAAqB,OAAO,MAAP;AACrB,MAAIA,IAAI,KAAK,KAAb,EAAoB,OAAO,MAAP;AACpB,MAAIA,IAAI,KAAK,MAAb,EAAqB,OAAO,MAAP;AACrB,MAAIA,IAAI,KAAK,OAAb,EAAsB,OAAO,MAAP;AACtB,MAAIA,IAAI,KAAK,KAAb,EAAoB,OAAO,MAAP;AACpB,MAAIA,IAAI,KAAK,eAAb,EAA8B,OAAO,SAAP;AAC9B,SAAO,MAAP;AACD;;AAED,SAASsB,wBAAT,CAAkCC,SAAlC,EAA4C;AACxC,UAAOA,SAAP;AACI,SAAK,OAAL;AACI,aAAO,WAAP;;AACJ,SAAK,OAAL;AACI,aAAO,WAAP;;AACJ,SAAK,MAAL;AACI,aAAO,UAAP;;AACJ,SAAK,MAAL;AACI,aAAO,UAAP;;AACJ,SAAK,WAAL;AACI,aAAO,gBAAP;;AACJ,SAAK,WAAL;AACI,aAAO,gBAAP;;AACJ,SAAK,WAAL;AACI,aAAO,gBAAP;;AACJ,SAAK,WAAL;AACI,aAAO,gBAAP;;AACJ;AACI,aAAOA,SAAP;AAlBR;AAoBH;;AAED,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9B,UAAQA,IAAI,CAACC,iBAAb;AACE,SAAK,QAAL;AACE,aAAQ,aAAYJ,wBAAwB,CAACG,IAAI,CAACE,iBAAN,CAAxB,CAAiDC,WAAjD,EAA+D,EAAnF;;AAEF,SAAK,MAAL;AACE,aAAO,UAAP;;AAEF,SAAK,WAAL;AACE,aAAO,gBAAP;;AAEF,SAAK,eAAL;AACE,aAAO,mBAAP;;AAEF,SAAK,UAAL;AACE,aAAO,cAAP;;AAEF,SAAK,gBAAL;AACE,aAAO,oBAAP;;AAEF,SAAK,OAAL;AACE,aAAO,WAAP;;AAEF,SAAK,YAAL;AACE,aAAO,iBAAP;;AAEF,SAAK,kBAAL;AACE,aAAO,kBAAP;;AAEF,SAAK,yBAAL;AACE,aAAO,yBAAP;;AAEF,SAAK,UAAL;AACE,aAAO,cAAP;;AAEF,SAAK,YAAL;AACE,aAAO,gBAAP;;AAEF,SAAK,aAAL;AACE,aAAO,iBAAP;;AAEF;AACE,aAAOH,IAAI,CAACC,iBAAZ;AAzCJ;AA2CD;;AAED,SAASG,mBAAT,CAA6BJ,IAA7B,EAAmC;AACjC,QAAMK,WAAW,GAAGL,IAAI,CAACC,iBAAL,KAA2B,UAA3B,GAAwC,IAAxC,GAA+C,IAAnE;AACA,SAAQ,GAAEF,gBAAgB,CAACC,IAAD,CAAO,IAAGK,WAAY,IAAGL,IAAI,CAACM,UAAW,EAAnE;AACD;;AAED,SAASC,iBAAT,CAA2BP,IAA3B,EAAiC;AAC/B,MAAIA,IAAI,CAACM,UAAL,KAAoB,MAAxB,EAAgC,OAAO,UAAP;AAChC,MAAIN,IAAI,CAACM,UAAL,KAAoB,MAAxB,EAAgC,OAAO,UAAP;AAChC,MAAIN,IAAI,CAACM,UAAL,KAAoB,UAAxB,EAAoC,OAAO,cAAP;AACpC,MAAIN,IAAI,CAACM,UAAL,KAAoB,OAAxB,EAAiC,OAAO,WAAP;AACjC,MAAIN,IAAI,CAACM,UAAL,KAAoB,WAAxB,EAAqC,OAAO,eAAP;AACrC,MAAIN,IAAI,CAACM,UAAL,KAAoB,OAAxB,EAAiC,OAAO,WAAP;AACjC,SAAON,IAAI,CAACM,UAAZ;AACD;;AAED,SAASE,cAAT,CAAwBC,GAAxB,EAA6B;AAC3B,MAAIA,GAAG,IAAI,IAAX,EAAiB;AACf,WAAO,EAAP;AACD;;AAEDA,EAAAA,GAAG,GAAGC,MAAM,CAACD,GAAD,CAAZ;AACA,SAAOA,GAAG,CAACE,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BH,GAAG,CAACI,MAAJ,CAAW,CAAX,EAAcV,WAAd,EAArC;AACD;;AAED,SAASW,eAAT,CAAyBC,GAAzB,EAA8B;AAC5B,UAAQA,GAAG,CAACxC,IAAZ;AACI,SAAK,cAAL;AACE,aAAO,cAAP;;AACF,SAAK,MAAL;AACI,aAAO,cAAP;;AACJ,SAAK,SAAL;AACE,aAAO,cAAP;;AAEJ,SAAK,KAAL;AACE,aAAOwC,GAAG,CAACC,SAAJ,GAAgB,eAAhB,GAAkC,WAAzC;;AAEF,SAAK,SAAL;AACE,aAAO,aAAP;;AAEF,SAAK,MAAL;AACE,UAAID,GAAG,CAACE,aAAJ,CAAkBd,WAAlB,GAAgCV,OAAhC,CAAwC,WAAxC,MAAyD,CAAC,CAA9D,EAAiE,OAAO,WAAP;AACjE,aAAO,YAAP;;AAEF,SAAK,eAAL;AACE,aAAO,eAAP;;AAEF;AACE,aAAOe,cAAc,CAACO,GAAG,CAACxC,IAAL,CAArB;AAtBJ;AAwBD;;AACM,SAAS2C,kBAAT,CAA4BC,SAA5B,EAAuC;AAC5C,MAAIC,MAAM,GAAG,EAAb;AACAD,EAAAA,SAAS,CAACE,IAAV,CAAeC,OAAf,CAAuBP,GAAG,IAAI;AAC5B,UAAMQ,SAAS,GAAGC,kBACfC,SADe,CACLV,GAAG,CAACW,WAAJ,CAAgBC,MADX,EAEfC,WAFe,CAEHvD,GAFG,CAECwD,CAAC,IAAI,CAACA,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,CAFN,CAAlB;;AAGAT,IAAAA,MAAM,GAAG,CAAC,GAAGA,MAAJ,EAAY,GAAGG,SAAf,CAAT;AACD,GALD;AAMA,SAAOH,MAAP;AACD;AAED;AACA;AACA;;;AACO,SAASU,YAAT,CAAsBf,GAAtB,EAA2B;AAChC,QAAMK,MAAM,GAAGI,kBACZC,SADY,CACFV,GAAG,CAACW,WAAJ,CAAgBC,MADd,EAEZC,WAFY,CAEAvD,GAFA,CAEIwD,CAAC,IAAI,CAACA,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,CAFT,CAAf,CADgC,CAKhC;AACA;AACA;;;AACA,MAAIT,MAAM,CAACW,MAAP,KAAkB,CAAtB,EAAyB;AACvBX,IAAAA,MAAM,CAACY,IAAP,CAAY,CAACjB,GAAG,CAACkB,IAAJ,CAASC,GAAV,EAAenB,GAAG,CAACkB,IAAJ,CAASE,GAAxB,CAAZ,EAA0C,CAACpB,GAAG,CAACqB,EAAJ,CAAOF,GAAR,EAAanB,GAAG,CAACqB,EAAJ,CAAOD,GAApB,CAA1C;AACD;;AACD,SAAOf,MAAP;AACD;AAED;;;AAEO,SAASiB,qBAAT,CAA+BtB,GAA/B,EAAoCuB,QAApC,EAA8C;AACnD,MAAI,CAACvB,GAAG,CAACW,WAAT,EAAsB,OAAO,IAAP;;AAEtB,MAAI;AACF,UAAMa,IAAI,GAAGf,kBAASC,SAAT,CAAmBV,GAAG,CAACW,WAAJ,CAAgBC,MAAnC,CAAb;;AACA,UAAMa,EAAE,GAAG,oBAAUD,IAAV,EAAgBD,QAAhB,EAA0B;AAAEG,MAAAA,KAAK,EAAE;AAAT,KAA1B,CAAX;;AACA,QAAID,EAAE,IAAIA,EAAE,CAACE,QAAT,IAAqBF,EAAE,CAACE,QAAH,CAAYd,WAArC,EAAkD;AAChD,aAAO,CAACY,EAAE,CAACE,QAAH,CAAYd,WAAZ,CAAwB,CAAxB,CAAD,EAA6BY,EAAE,CAACE,QAAH,CAAYd,WAAZ,CAAwB,CAAxB,CAA7B,CAAP;AACD;AACF,GAND,CAME,OAAOe,CAAP,EAAU,CACV;AACD;;AAED,SAAO,IAAP;AACD;AAED;;;AAEO,SAASC,sBAAT,CAAgCjB,MAAhC,EAAwCW,QAAxC,EAAkD;AACvD;AACA,MAAIO,SAAS,GAAG,CAAhB,CAFuD,CAGvD;AACA;;AACA,MAAIlB,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,IAAe,CAAnB,EAAsB;AACpBA,IAAAA,MAAM,CAACmB,OAAP,CAAe,CAAC,CAAD,EAAI,IAAJ,CAAf;AACD;;AACD,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpB,MAAM,CAACI,MAA3B,EAAmCgB,CAAC,EAApC,EAAwC;AACtC,UAAMC,KAAK,GAAGrB,MAAM,CAACoB,CAAC,GAAG,CAAL,CAApB;AACA,UAAME,gBAAgB,GAAGtB,MAAM,CAACoB,CAAD,CAAN,CAAU,CAAV,IAAeC,KAAK,CAAC,CAAD,CAA7C;;AACA,QAAIV,QAAQ,IAAIO,SAAZ,IAAyBP,QAAQ,IAAIO,SAAS,GAAGI,gBAArD,EAAuE;AACrE;AACA;AACA,UAAID,KAAK,CAAC,CAAD,CAAL,KAAa,IAAjB,EAAuB;AACrBE,QAAAA,OAAO,CAACC,IAAR,CACE,8CADF,EAEEb,QAFF,EAGEO,SAHF;AAKA,eAAO,IAAP;AACD;;AACD,YAAMO,GAAG,GAAG,CAACd,QAAQ,GAAGO,SAAZ,IAAyBI,gBAArC;AACA,YAAMI,QAAQ,GAAG1B,MAAM,CAACoB,CAAD,CAAN,CAAU,CAAV,IAAeC,KAAK,CAAC,CAAD,CAArC;AACA,aAAOA,KAAK,CAAC,CAAD,CAAL,GAAWK,QAAQ,GAAGD,GAA7B;AACD;;AACDP,IAAAA,SAAS,IAAII,gBAAb;AACD;;AACDC,EAAAA,OAAO,CAACC,IAAR,CACE,8CADF,EAEEb,QAFF,EAGEO,SAHF;AAKA,SAAO,IAAP;AACD,C,CAED;AACA;;;AACO,SAASS,mBAAT,CAA6BC,KAA7B,EAAoCC,cAAc,GAAG,CAArD,EAAwD;AAC7D,MAAIC,OAAO,GAAG,MAAd;AACA,MAAIC,OAAO,GAAG,CAAC,MAAf;AACA,MAAIb,SAAS,GAAG,CAAhB;AACA,MAAIc,IAAI,GAAG,CAAX;AACA,MAAIC,IAAI,GAAG,CAAX;AACA,MAAIC,QAAQ,GAAG,IAAf;AACA,QAAMlC,MAAM,GAAG,EAAf;AACA4B,EAAAA,KAAK,CAACjC,OAAN,CAActB,IAAI,IAAI;AACpB,QAAI,CAACA,IAAI,CAAC8D,SAAN,IAAmB9D,IAAI,CAAC8D,SAAL,CAAe/B,MAAf,KAA0B,CAAjD,EAAoD;AAClDc,MAAAA,SAAS,IAAI7C,IAAI,CAACsC,QAAlB;AACA;AACD;;AACD,SAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG/C,IAAI,CAAC8D,SAAL,CAAe/B,MAAnC,EAA2CgB,CAAC,EAA5C,EAAgD;AAC9C,YAAMgB,IAAI,GAAG/D,IAAI,CAAC8D,SAAL,CAAef,CAAf,CAAb;;AACA,UAAIc,QAAJ,EAAc;AACZ,cAAMG,IAAI,GAAG,CAACD,IAAI,CAACE,MAAL,GAAcJ,QAAQ,CAACI,MAAxB,IAAkCT,cAA/C;AACA,YAAIQ,IAAI,GAAG,CAAX,EAAcL,IAAI,IAAIK,IAAR,CAAd,KACKJ,IAAI,IAAII,IAAR;AACN;;AACD,UAAIjB,CAAC,KAAK,CAAN,IAAWgB,IAAI,CAACG,KAAL,KAAe,CAA9B,EAAiC,CAC/B;AACD;;AACD,YAAMC,kBAAkB,GAAGJ,IAAI,CAACE,MAAL,GAAcT,cAAzC;AACA,UAAIW,kBAAkB,GAAGV,OAAzB,EAAkCA,OAAO,GAAGU,kBAAV;AAClC,UAAIA,kBAAkB,GAAGT,OAAzB,EAAkCA,OAAO,GAAGS,kBAAV;AAClCxC,MAAAA,MAAM,CAACK,IAAP,CAAY,CAACa,SAAS,GAAGkB,IAAI,CAACG,KAAlB,EAAyBH,IAAI,CAACE,MAA9B,CAAZ,EAb8C,CAc9C;AACA;;AACA,UAAIlB,CAAC,KAAK/C,IAAI,CAAC8D,SAAL,CAAe/B,MAAf,GAAwB,CAA9B,IAAmCgC,IAAI,CAACG,KAAL,KAAelE,IAAI,CAACsC,QAA3D,EAAqE,CACnE;AACD;;AACDuB,MAAAA,QAAQ,GAAGE,IAAX;AACD;;AACDlB,IAAAA,SAAS,IAAI7C,IAAI,CAACsC,QAAlB;AACD,GA3BD;AA4BA,SAAO;AAAEoB,IAAAA,OAAF;AAAWD,IAAAA,OAAX;AAAoB9B,IAAAA,MAApB;AAA4BkB,IAAAA,SAA5B;AAAuCc,IAAAA,IAAvC;AAA6CC,IAAAA;AAA7C,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASQ,YAAT,CAAsBC,IAAtB,EAA4BC,IAAI,GAAG,YAAnC,EAAiD;AACtD;AACA,QAAMC,MAAM,GACVH,YAAY,CAACG,MAAb,KACCH,YAAY,CAACG,MAAb,GAAsBC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CADvB,CADF;AAGA,QAAMC,OAAO,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAhB;AACAD,EAAAA,OAAO,CAACJ,IAAR,GAAeA,IAAf;AACA,QAAMM,OAAO,GAAGF,OAAO,CAACG,WAAR,CAAoBR,IAApB,CAAhB;AACA,SAAOO,OAAO,CAACE,KAAf;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASC,oBAAT,CAA8BC,aAA9B,EAA6CC,SAAS,GAAG,EAAzD,EAA6D;AAC3D,QAAMC,OAAO,GAAGD,SAAS,CAACE,IAAV,CAAeC,EAAE,IAAIA,EAAE,CAACC,EAAH,KAAUL,aAA/B,CAAhB;;AACA,MAAI,CAACE,OAAL,EAAc;AACZhC,IAAAA,OAAO,CAACC,IAAR,CACG,uEAAsE6B,aAAc,EADvF,EAEEC,SAFF;AAID;;AACD,SAAOC,OAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASI,6BAAT,CAAuCC,QAAvC,EAAiDN,SAAS,GAAG,EAA7D,EAAiE;AACtE,SAAOM,QAAQ,CACZlH,GADI,CACAmH,OAAO,IAAIT,oBAAoB,CAACS,OAAD,EAAUP,SAAV,CAD/B,EAEJQ,MAFI,CAEGL,EAAE,IAAI,CAAC,CAACA,EAFX,EAGJ/G,GAHI,CAGA+G,EAAE,IAAIA,EAAE,CAACM,KAHT,EAIJC,IAJI,CAIC,GAJD,CAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AACrC,UAAQA,KAAK,CAACC,UAAd;AACE,SAAK,UAAL;AACE,aAAO,KAAP;;AACF,SAAK,eAAL;AACE,aAAO,WAAP;AACF;;AACA,SAAK,WAAL;AACA,SAAK,UAAL;AACE,aAAO,MAAP;AACF;;AACA;AACE,aAAO,SAAP;AAXJ;AAaD;;AAEM,SAASC,YAAT,CAAsBF,KAAtB,EAA6BZ,SAA7B,EAAwC;AAC7C;AACA,MAAIY,KAAK,CAACG,OAAV,EAAmB,OAAOH,KAAK,CAACG,OAAN,CAAc7G,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAAP;;AACnB,MAAI0G,KAAK,CAACN,QAAN,IAAkBM,KAAK,CAACC,UAAN,KAAqB,eAA3C,EAA4D;AAC1D;AACA;AACA;AACA;AACA,UAAMZ,OAAO,GAAGH,oBAAoB,CAACc,KAAK,CAACN,QAAN,CAAe,CAAf,CAAD,EAAoBN,SAApB,CAApC;;AACA,QAAIC,OAAJ,EAAa;AACX,aAAQ,GAAEA,OAAO,CAACQ,KAAM,IAAGE,eAAe,CAACC,KAAD,CAAQ,EAAlD;AACD;AACF,GAZ4C,CAa7C;;;AACA,SAAOA,KAAK,CAACI,IAAb;AACD;;AAEM,SAASC,cAAT,CAAwBnF,GAAxB,EAA6BoF,IAA7B,EAAmC;AACxC,QAAMC,QAAQ,GAAGrF,GAAG,CAACoF,IAAD,CAApB;AACA,SAAQ,GAAEC,QAAQ,CAAClE,GAAT,CAAamE,OAAb,CAAqB,CAArB,CAAwB,IAAGD,QAAQ,CAACjE,GAAT,CAAakE,OAAb,CAAqB,CAArB,CAAwB,EAA7D;AACD;;AAEM,SAASC,yBAAT,CAAmCnF,SAAnC,EAA8C;AACnD,MAAIoF,YAAY,GAAG,CAAnB;AACA,MAAIC,YAAY,GAAG,CAAnB;AACArF,EAAAA,SAAS,CAACE,IAAV,CAAeC,OAAf,CAAuBP,GAAG,IAAI;AAC5B,QAAIA,GAAG,CAACxC,IAAJ,CAASO,UAAT,CAAoB,MAApB,CAAJ,EAAiCyH,YAAY,IAAIxF,GAAG,CAAC0F,QAApB;AACjC,QAAI1F,GAAG,CAACxC,IAAJ,CAASO,UAAT,CAAoB,SAApB,CAAJ,EAAoC0H,YAAY,IAAIzF,GAAG,CAAC0F,QAApB;AACrC,GAHD;AAIA,QAAMC,cAAc,GACjBH,YAAY,GAAG,IAAhB,GAAwB,GAAxB,GAA+BC,YAAY,GAAG,IAAhB,GAAwB,GADxD;AAEA,SAAO;AACLA,IAAAA,YADK;AAELE,IAAAA,cAFK;AAGLH,IAAAA;AAHK,GAAP;AAKD;;AAEM,SAASI,cAAT,CAAwBxF,SAAxB,EAAmC;AACxC,MAAIyF,WAAW,GAAG,CAAlB;AACA,MAAIC,MAAM,GAAG,GAAb,CAFwC,CAEtB;;AAClB,MAAIC,eAAe,GAAGC,OAAO,IAAK,GAAEF,MAAO,GAAEE,OAAO,CAACV,OAAR,CAAgB,CAAhB,CAAmB,EAAhE;;AACA,MAAIW,aAAa,GAAGC,KAAK,IAAK,GAAEJ,MAAO,GAAE,CAACI,KAAK,GAAG,GAAT,EAAcZ,OAAd,CAAsB,CAAtB,CAAyB,EAAlE;;AACA,MAAIlF,SAAS,CAAC+F,IAAV,IAAkB/F,SAAS,CAAC+F,IAAV,CAAeA,IAAjC,IAAyC/F,SAAS,CAAC+F,IAAV,CAAeA,IAAf,CAAoBC,OAAjE,EAA0E;AACxE,UAAMC,GAAG,GAAGjG,SAAS,CAAC+F,IAAV,CAAeA,IAAf,CAAoBC,OAAhC;AACAN,IAAAA,MAAM,GAAGO,GAAG,CAACC,QAAJ,CAAaR,MAAtB;AACAD,IAAAA,WAAW,GAAGQ,GAAG,CAACH,KAAlB;;AACAD,IAAAA,aAAa,GAAGC,KAAK,IAClB,GAAEJ,MAAO,GAAE,CAACI,KAAK,GAAG,MAAMG,GAAG,CAACC,QAAJ,CAAaC,qBAA5B,EAAmDjB,OAAnD,CACVe,GAAG,CAACC,QAAJ,CAAaC,qBADH,CAEV,EAHJ;;AAIAR,IAAAA,eAAe,GAAGC,OAAO,IAAK,GAAEF,MAAO,GAAEE,OAAO,CAACV,OAAR,CAAgB,CAAhB,CAAmB,EAA5D;AACD,GAduC,CAgBxC;;;AACA,MAAIkB,UAAU,GAAG,CAAjB;AACA,MAAIC,UAAU,GAAG,CAAjB;AACArG,EAAAA,SAAS,CAACE,IAAV,CAAeC,OAAf,CAAuBP,GAAG,IAAI;AAC5B,QAAIA,GAAG,CAACxC,IAAJ,KAAa,KAAb,IAAsBwC,GAAG,CAACC,SAA1B,IAAuCD,GAAG,CAAC0G,OAA/C,EAAwD;AACtD,YAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAAuB5G,GAAG,CAAC0G,OAAjC,CADsD,CAEtD;;AACAF,MAAAA,UAAU,IAAII,OAAd;AACAH,MAAAA,UAAU,IAAIE,OAAd;AACD;AACF,GAPD;AAQA,SAAO;AACLV,IAAAA,aADK;AAELF,IAAAA,eAFK;AAGLU,IAAAA,UAHK;AAILD,IAAAA,UAJK;AAKLX,IAAAA;AALK,GAAP;AAOD;;AAEM,SAASgB,iBAAT,CAA2BzG,SAA3B,EAAsC;AAC3C,MAAI,CAACA,SAAS,CAACE,IAAX,IAAmB,CAACF,SAAS,CAACE,IAAV,CAAeU,MAAvC,EAA+C,OAAO,CAAP,CADJ,CAG3C;;AACA,QAAM8F,SAAS,GACb,IAAIC,IAAJ,CAAS3G,SAAS,CAAC4G,SAAnB,EAA8BC,iBAA9B,KACA,IAAIF,IAAJ,GAAWE,iBAAX,EAFF;AAIA,SACE7G,SAAS,CAACE,IAAV,CAAe,CAAf,EAAkB4G,oBAAlB,GACA,CAAC,IAAIH,IAAJ,GAAWE,iBAAX,KAAiCH,SAAlC,IAA+C,KAFjD;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACA,SAASK,aAAT,CAAuBC,QAAvB,EAAiCC,CAAjC,EAAoCC,CAApC,EAAuC;AACrC,MAAIC,IAAJ;AACA,MAAIC,IAAJ;;AACA,MAAI,OAAOJ,QAAP,KAAoB,UAAxB,EAAoC;AAClCG,IAAAA,IAAI,GAAGH,QAAQ,CAACC,CAAD,CAAf;AACAG,IAAAA,IAAI,GAAGJ,QAAQ,CAACE,CAAD,CAAf;AACD,GAHD,MAGO;AACLC,IAAAA,IAAI,GAAGF,CAAP;AACAG,IAAAA,IAAI,GAAGF,CAAP;AACD;;AACD,SAAO;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAP;AACD,C,CAED;AACA;AACA;;;AACA,MAAMC,mBAAmB,GAAG;AAC1BC,EAAAA,MAAM,EAAE,CADkB;AAE1BC,EAAAA,IAAI,EAAE,CAFoB;AAG1BC,EAAAA,IAAI,EAAE,CAHoB;AAI1BC,EAAAA,OAAO,EAAE,CAJiB;AAK1BC,EAAAA,KAAK,EAAE,CALmB;AAM1BC,EAAAA,SAAS,EAAE,CANe;AAO1BC,EAAAA,SAAS,EAAE,CAPe;AAQ1BC,EAAAA,GAAG,EAAE;AARqB,CAA5B,C,CAWA;AACA;AACA;;AACA,MAAMC,wBAAwB,GAAG;AAC/B,KAAGT,mBAAmB,CAACE,IADQ;AACF;AAC7B,KAAGF,mBAAmB,CAACC,MAFQ;AAEA;AAC/B,KAAGD,mBAAmB,CAACG,IAHQ;AAGF;AAC7B,KAAGH,mBAAmB,CAACQ,GAJQ;AAIH;AAC5B,KAAGR,mBAAmB,CAACK,KALQ;AAKD;AAC9B,KAAGL,mBAAmB,CAACM,SANQ;AAMG;AAClC,KAAGN,mBAAmB,CAACI,OAPQ;AAOC;AAChC,KAAGJ,mBAAmB,CAACO,SARQ;AAQG;AAClC;AACA;AACA,MAAIP,mBAAmB,CAACQ,GAXO;AAWF;AAC7B,MAAIR,mBAAmB,CAACG,IAZO,CAYF;;AAZE,CAAjC,C,CAeA;AACA;AACA;;AACA,SAASO,2BAAT,CAAqCC,KAArC,EAA4C;AAC1C;AACA;AACA;AACA,MAAI,CAACA,KAAL,EAAY,MAAM,IAAIC,KAAJ,CAAU,qBAAV,EAAiCD,KAAjC,CAAN;;AACZ,MAAI,OAAOX,mBAAmB,CAACW,KAAK,CAAC5K,IAAP,CAA1B,KAA2C,WAA/C,EAA4D;AAC1D,WAAOiK,mBAAmB,CAACW,KAAK,CAAC5K,IAAP,CAA1B;AACD;;AACD,MAAI,OAAO0K,wBAAwB,CAACE,KAAK,CAAChD,IAAP,CAA/B,KAAgD,WAApD,EAAiE;AAC/D,WAAO8C,wBAAwB,CAACE,KAAK,CAAChD,IAAP,CAA/B;AACD,GAVyC,CAW1C;AACA;;;AACAjD,EAAAA,OAAO,CAACC,IAAR,CAAa,oCAAb,EAAmDgG,KAAnD;AACA,SAAO,IAAP;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASE,mBAAT,CAA6BjB,CAA7B,EAAgCC,CAAhC,EAAmC;AACjC,SAAOa,2BAA2B,CAACd,CAAD,CAA3B,GAAiCc,2BAA2B,CAACb,CAAD,CAAnE;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASiB,6BAAT,CAAuCC,GAAvC,EAA4C;AAC1C,MAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACxH,MAAJ,GAAa,CAA5C,EAA+C;AAC7C,UAAMyH,aAAa,GAAGD,GAAG,CAACE,UAAJ,CAAe,CAAf,CAAtB;AACA,WACGD,aAAa,IAAI,EAAjB,IAAuBA,aAAa,IAAI,EAAzC,IACCA,aAAa,IAAI,EAAjB,IAAuBA,aAAa,IAAI,GAF3C;AAID;;AACD,SAAO,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASE,6BAAT,CAAuCtB,CAAvC,EAA0CC,CAA1C,EAA6C;AAC3C,QAAMsB,8BAA8B,GAAGL,6BAA6B,CAClElB,CAAC,CAACwB,SADgE,CAApE;AAGA,QAAMC,8BAA8B,GAAGP,6BAA6B,CAClEjB,CAAC,CAACuB,SADgE,CAApE;;AAIA,MAAID,8BAA8B,IAAIE,8BAAtC,EAAsE;AACpE;AACA,WAAO,CAAP;AACD,GAX0C,CAY3C;;;AACA,MAAIF,8BAAJ,EAAoC,OAAO,CAAC,CAAR,CAbO,CAc3C;;AACA,MAAIE,8BAAJ,EAAoC,OAAO,CAAP,CAfO,CAgB3C;AACA;;AACA,SAAO,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,0BAAT,CAAoCC,WAApC,EAAiD;AAC/C;;AACA;AACA,SAAO,CAAC3B,CAAD,EAAIC,CAAJ,KAAU;AACf,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAiBL,aAAa,CAAC6B,WAAD,EAAc3B,CAAd,EAAiBC,CAAjB,CAApC,CADe,CAEf;;AACA,QAAI2B,KAAK,CAAC1B,IAAD,CAAL,IAAe0B,KAAK,CAACzB,IAAD,CAAxB,EAAgC,OAAO,CAAP,CAHjB,CAIf;;AACA,QAAIyB,KAAK,CAAC1B,IAAD,CAAT,EAAiB,OAAO,CAAP,CALF,CAMf;;AACA,QAAI0B,KAAK,CAACzB,IAAD,CAAT,EAAiB,OAAO,CAAC,CAAR,CAPF,CAQf;;AACA,WAAOD,IAAI,GAAGC,IAAd;AACD,GAVD;AAWD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS0B,yBAAT,CAAmCF,WAAnC,EAAgD;AAC9C,SAAO,CAAC3B,CAAD,EAAIC,CAAJ,KAAU;AACf,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAiBL,aAAa,CAAC6B,WAAD,EAAc3B,CAAd,EAAiBC,CAAjB,CAApC,CADe,CAEf;;AACA,QAAI,CAACC,IAAD,IAAS,CAACC,IAAd,EAAoB,OAAO,CAAP,CAHL,CAIf;;AACA,QAAI,CAACD,IAAL,EAAW,OAAO,CAAP,CALI,CAMf;;AACA,QAAI,CAACC,IAAL,EAAW,OAAO,CAAC,CAAR,CAPI,CAQf;;AACA,QAAID,IAAI,GAAGC,IAAX,EAAiB,OAAO,CAAC,CAAR;AACjB,QAAID,IAAI,GAAGC,IAAX,EAAiB,OAAO,CAAP;AACjB,WAAO,CAAP;AACD,GAZD;AAaD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS2B,sBAAT,CAAgCX,GAAhC,EAAqC;AACnC,SAAOA,GAAG,KAAK,CAAC,GAAT,GAAeY,SAAf,GAA2BZ,GAAlC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASa,qBAAT,CAA+B,GAAGC,QAAlC,EAA4C;AAC1C,SAAO,CAACjC,CAAD,EAAIC,CAAJ,KAAU;AACf,SAAK,IAAItF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsH,QAAQ,CAACtI,MAA7B,EAAqCgB,CAAC,EAAtC,EAA0C;AACxC,YAAMuH,0BAA0B,GAAGD,QAAQ,CAACtH,CAAD,CAAR,CAAYqF,CAAZ,EAAeC,CAAf,CAAnC,CADwC,CAExC;AACA;;AACA,UAAIiC,0BAA0B,KAAK,CAAnC,EAAsC;AACpC,eAAOA,0BAAP;AACD;AACF;;AACD,WAAO,CAAP;AACD,GAVD;AAWD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAMC,eAAe,GAAGH,qBAAqB,CAClDN,0BAA0B,CAACU,GAAG,IAAIN,sBAAsB,CAACM,GAAG,CAACC,SAAL,CAA9B,CADwB,EAElDpB,mBAFkD,EAGlDK,6BAHkD,EAIlDI,0BAA0B,CAACU,GAAG,IAAIE,QAAQ,CAACF,GAAG,CAACZ,SAAL,EAAgB,EAAhB,CAAhB,CAJwB,EAKlDK,yBAAyB,CAACO,GAAG,IAAIA,GAAG,CAACZ,SAAZ,CALyB,EAMlDK,yBAAyB,CAACO,GAAG,IAAIA,GAAG,CAACG,QAAZ,CANyB,CAA7C","sourcesContent":["import polyline from \"@mapbox/polyline\";\nimport turfAlong from \"@turf/along\";\n\nalert('itinerary')\n\n// All OTP transit modes\nexport const transitModes = [\n  \"TRAM\",\n  \"BUS\",\n  \"SUBWAY\",\n  \"FERRY\",\n  \"RAIL\",\n  \"GONDOLA\"\n];\n\n/**\n * @param  {config} config OTP-RR configuration object\n * @return {Array}  List of all transit modes defined in config; otherwise default mode list\n */\n\nexport function getTransitModes(config) {\n  if (!config || !config.modes || !config.modes.transitModes)\n    return transitModes;\n  return config.modes.transitModes.map(tm => tm.mode);\n}\n\nexport function isTransit(mode) {\n  return transitModes.includes(mode) || mode === \"TRANSIT\";\n}\n\nexport function isWalk(mode) {\n  if (!mode) return false;\n\n  return mode === \"WALK\";\n}\n\nexport function isBicycle(mode) {\n  if (!mode) return false;\n\n  return mode === \"BICYCLE\";\n}\n\nexport function isBicycleRent(mode) {\n  if (!mode) return false;\n\n  return mode === \"BICYCLE_RENT\";\n}\n\nexport function isCar(mode) {\n  if (!mode) return false;\n  return mode.startsWith(\"CAR\");\n}\n\nexport function isMicromobility(mode) {\n  if (!mode) return false;\n  return mode.startsWith(\"MICROMOBILITY\");\n}\n\nexport function isAccessMode(mode) {\n  return (\n    isWalk(mode) ||\n    isBicycle(mode) ||\n    isBicycleRent(mode) ||\n    isCar(mode) ||\n    isMicromobility(mode)\n  );\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are transit modes\n */\nexport function hasTransit(modesStr) {\n  return modesStr.split(\",\").some(mode => isTransit(mode));\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are car-based modes\n */\nexport function hasCar(modesStr) {\n  return modesStr.split(\",\").some(mode => isCar(mode));\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are bicycle-based modes\n */\nexport function hasBike(modesStr) {\n  return modesStr\n    .split(\",\")\n    .some(mode => isBicycle(mode) || isBicycleRent(mode));\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are micromobility-based modes\n */\nexport function hasMicromobility(modesStr) {\n  return modesStr.split(\",\").some(mode => isMicromobility(mode));\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes is a hailing mode\n */\nexport function hasHail(modesStr) {\n  return modesStr.split(\",\").some(mode => mode.indexOf(\"_HAIL\") > -1);\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes is a rental mode\n */\nexport function hasRental(modesStr) {\n  return modesStr.split(\",\").some(mode => mode.indexOf(\"_RENT\") > -1);\n}\n\nexport function getMapColor(mode) {\n  mode = mode || this.get(\"mode\");\n  if (mode === \"WALK\") return \"#444\";\n  if (mode === \"BICYCLE\") return \"#0073e5\";\n  if (mode === \"SUBWAY\") return \"#f00\";\n  if (mode === \"RAIL\") return \"#b00\";\n  if (mode === \"BUS\") return \"#080\";\n  if (mode === \"TRAM\") return \"#800\";\n  if (mode === \"FERRY\") return \"#008\";\n  if (mode === \"CAR\") return \"#444\";\n  if (mode === \"MICROMOBILITY\") return \"#f5a729\";\n  return \"#aaa\";\n}\n\nfunction convertAbsoluteDirection(direction){\n    switch(direction){\n        case \"NORTH\":\n            return \"$_north_$\";\n        case \"SOUTH\":\n            return \"$_south_$\";\n        case \"EAST\":\n            return \"$_east_$\";\n        case \"WEST\":\n            return \"$_west_$\";\n        case \"NORTHWEST\":\n            return \"$_north_west_$\"\n        case \"NORTHEAST\":\n            return \"$_north_east_$\"\n        case \"SOUTHWEST\":\n            return \"$_south_west_$\";\n        case \"SOUTHEAST\":\n            return \"$_south_east_$\";\n        default:\n            return direction;\n    }\n}\n\nfunction getStepDirection(step) {\n  switch (step.relativeDirection) {\n    case \"DEPART\":\n      return `$_go_to_$ ${convertAbsoluteDirection(step.absoluteDirection).toLowerCase()}`;\n\n    case \"LEFT\":\n      return \"$_left_$\";\n\n    case \"HARD_LEFT\":\n      return \"$_hard_left_$ \";\n\n    case \"SLIGHTLY_LEFT\":\n      return \"$_slighly_left_$ \";\n\n    case \"CONTINUE\":\n      return \"$_continue_$\";\n\n    case \"SLIGHTLY_RIGHT\":\n      return \"$_slighly_right_$ \";\n\n    case \"RIGHT\":\n      return \"$_right_$\";\n\n    case \"HARD_RIGHT\":\n      return \"$_hard_right_$ \";\n\n    case \"CIRCLE_CLOCKWISE\":\n      return \"$_circle_clock_$\";\n\n    case \"CIRCLE_COUNTERCLOCKWISE\":\n      return \"$_circle_counterclock_$\";\n\n    case \"ELEVATOR\":\n      return \"$_elevator_$\";\n\n    case \"UTURN_LEFT\":\n      return \"$_left_uturn_$\";\n\n    case \"UTURN_RIGHT\":\n      return \"$_right_uturn_$\";\n\n    default:\n      return step.relativeDirection;\n  }\n}\n\nfunction getStepInstructions(step) {\n  const conjunction = step.relativeDirection === \"ELEVATOR\" ? \"su\" : \"su\";\n  return `${getStepDirection(step)} ${conjunction} ${step.streetName}`;\n}\n\nfunction getStepStreetName(step) {\n  if (step.streetName === \"road\") return \"$_road_$\";\n  if (step.streetName === \"path\") return \"$_path_$\";\n  if (step.streetName === \"sidewalk\") return \"$_sidewalk_$\";\n  if (step.streetName === \"steps\") return \"$_steps_$\";\n  if (step.streetName === \"bike path\") return \"$_bike_path_$\";\n  if (step.streetName === \"track\") return \"$_track_$\";\n  return step.streetName;\n}\n\nfunction toSentenceCase(str) {\n  if (str == null) {\n    return \"\";\n  }\n\n  str = String(str);\n  return str.charAt(0).toUpperCase() + str.substr(1).toLowerCase();\n}\n\nfunction getLegModeLabel(leg) {\n  switch (leg.mode) {\n      case \"BICYCLE_RENT\":\n        return \"$_ride_for_$\";\n      case \"WALK\":\n          return \"$_walk_for_$\";\n      case \"BICYCLE\":\n        return \"$_ride_for_$\";\n\n    case \"CAR\":\n      return leg.hailedCar ? \"$_drive_for_$\" : \"$_drive_$\";\n\n    case \"GONDOLA\":\n      return \"Aerial Tram\";\n\n    case \"TRAM\":\n      if (leg.routeLongName.toLowerCase().indexOf(\"streetcar\") !== -1) return \"Streetcar\";\n      return \"Light Rail\";\n\n    case \"MICROMOBILITY\":\n      return \"$_drive_for_$\";\n\n    default:\n      return toSentenceCase(leg.mode);\n  }\n}\nexport function getItineraryBounds(itinerary) {\n  let coords = [];\n  itinerary.legs.forEach(leg => {\n    const legCoords = polyline\n      .toGeoJSON(leg.legGeometry.points)\n      .coordinates.map(c => [c[1], c[0]]);\n    coords = [...coords, ...legCoords];\n  });\n  return coords;\n}\n\n/**\n * Return a coords object that encloses the given leg's geometry.\n */\nexport function getLegBounds(leg) {\n  const coords = polyline\n    .toGeoJSON(leg.legGeometry.points)\n    .coordinates.map(c => [c[1], c[0]]);\n\n  // in certain cases, there might be zero-length coordinates in the leg\n  // geometry. In these cases, build us an array of coordinates using the from\n  // and to data of the leg.\n  if (coords.length === 0) {\n    coords.push([leg.from.lat, leg.from.lon], [leg.to.lat, leg.to.lon]);\n  }\n  return coords;\n}\n\n/* Returns an interpolated lat-lon at a specified distance along a leg */\n\nexport function legLocationAtDistance(leg, distance) {\n  if (!leg.legGeometry) return null;\n\n  try {\n    const line = polyline.toGeoJSON(leg.legGeometry.points);\n    const pt = turfAlong(line, distance, { units: \"meters\" });\n    if (pt && pt.geometry && pt.geometry.coordinates) {\n      return [pt.geometry.coordinates[1], pt.geometry.coordinates[0]];\n    }\n  } catch (e) {\n    // FIXME handle error!\n  }\n\n  return null;\n}\n\n/* Returns an interpolated elevation at a specified distance along a leg */\n\nexport function legElevationAtDistance(points, distance) {\n  // Iterate through the combined elevation profile\n  let traversed = 0;\n  // If first point distance is not zero, insert starting point at zero with\n  // null elevation. Encountering this value should trigger the warning below.\n  if (points[0][0] > 0) {\n    points.unshift([0, null]);\n  }\n  for (let i = 1; i < points.length; i++) {\n    const start = points[i - 1];\n    const elevDistanceSpan = points[i][0] - start[0];\n    if (distance >= traversed && distance <= traversed + elevDistanceSpan) {\n      // Distance falls within this point and the previous one;\n      // compute & return iterpolated elevation value\n      if (start[1] === null) {\n        console.warn(\n          \"Elevation value does not exist for distance.\",\n          distance,\n          traversed\n        );\n        return null;\n      }\n      const pct = (distance - traversed) / elevDistanceSpan;\n      const elevSpan = points[i][1] - start[1];\n      return start[1] + elevSpan * pct;\n    }\n    traversed += elevDistanceSpan;\n  }\n  console.warn(\n    \"Elevation value does not exist for distance.\",\n    distance,\n    traversed\n  );\n  return null;\n}\n\n// Iterate through the steps, building the array of elevation points and\n// keeping track of the minimum and maximum elevations reached\nexport function getElevationProfile(steps, unitConversion = 1) {\n  let minElev = 100000;\n  let maxElev = -100000;\n  let traversed = 0;\n  let gain = 0;\n  let loss = 0;\n  let previous = null;\n  const points = [];\n  steps.forEach(step => {\n    if (!step.elevation || step.elevation.length === 0) {\n      traversed += step.distance;\n      return;\n    }\n    for (let i = 0; i < step.elevation.length; i++) {\n      const elev = step.elevation[i];\n      if (previous) {\n        const diff = (elev.second - previous.second) * unitConversion;\n        if (diff > 0) gain += diff;\n        else loss += diff;\n      }\n      if (i === 0 && elev.first !== 0) {\n        // console.warn(`No elevation data available for step ${stepIndex}-${i} at beginning of segment`, elev)\n      }\n      const convertedElevation = elev.second * unitConversion;\n      if (convertedElevation < minElev) minElev = convertedElevation;\n      if (convertedElevation > maxElev) maxElev = convertedElevation;\n      points.push([traversed + elev.first, elev.second]);\n      // Insert \"filler\" point if the last point in elevation profile does not\n      // reach the full distance of the step.\n      if (i === step.elevation.length - 1 && elev.first !== step.distance) {\n        // points.push([traversed + step.distance, elev.second])\n      }\n      previous = elev;\n    }\n    traversed += step.distance;\n  });\n  return { maxElev, minElev, points, traversed, gain, loss };\n}\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {string} text The text to be rendered.\n * @param {string} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nexport function getTextWidth(text, font = \"22px Arial\") {\n  // re-use canvas object for better performance\n  const canvas =\n    getTextWidth.canvas ||\n    (getTextWidth.canvas = document.createElement(\"canvas\"));\n  const context = canvas.getContext(\"2d\");\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width;\n}\n\n/**\n * Get the configured company object for the given network string if the company\n * has been defined in the provided companies array config.\n */\nfunction getCompanyForNetwork(networkString, companies = []) {\n  const company = companies.find(co => co.id === networkString);\n  if (!company) {\n    console.warn(\n      `No company found in config.yml that matches rented vehicle network: ${networkString}`,\n      companies\n    );\n  }\n  return company;\n}\n\n/**\n * Get a string label to display from a list of vehicle rental networks.\n *\n * @param  {Array<string>} networks  A list of network ids.\n * @param  {Array<object>}  [companies=[]] An optional list of the companies config.\n * @return {string}  A label for use in presentation on a website.\n */\nexport function getCompaniesLabelFromNetworks(networks, companies = []) {\n  return networks\n    .map(network => getCompanyForNetwork(network, companies))\n    .filter(co => !!co)\n    .map(co => co.label)\n    .join(\"/\");\n}\n\n/**\n * Returns mode name by checking the vertex type (VertexType class in OTP) for\n * the provided place. NOTE: this is currently only intended for vehicles at\n * the moment (not transit or walking).\n *\n * TODO: I18N\n * @param  {string} place place from itinerary leg\n */\nexport function getModeForPlace(place) {\n  switch (place.vertexType) {\n    case \"CARSHARE\":\n      return \"car\";\n    case \"VEHICLERENTAL\":\n      return \"E-scooter\";\n    // TODO: Should the type change depending on bike vertex type?\n    case \"BIKESHARE\":\n    case \"BIKEPARK\":\n      return \"bike\";\n    // If company offers more than one mode, default to `vehicle` string.\n    default:\n      return \"vehicle\";\n  }\n}\n\nexport function getPlaceName(place, companies) {\n  // If address is provided (i.e. for carshare station, use it)\n  if (place.address) return place.address.split(\",\")[0];\n  if (place.networks && place.vertexType === \"VEHICLERENTAL\") {\n    // For vehicle rental pick up, do not use the place name. Rather, use\n    // company name + vehicle type (e.g., SPIN E-scooter). Place name is often just\n    // a UUID that has no relevance to the actual vehicle. For bikeshare, however,\n    // there are often hubs or bikes that have relevant names to the user.\n    const company = getCompanyForNetwork(place.networks[0], companies);\n    if (company) {\n      return `${company.label} ${getModeForPlace(place)}`;\n    }\n  }\n  // Default to place name\n  return place.name;\n}\n\nexport function getTNCLocation(leg, type) {\n  const location = leg[type];\n  return `${location.lat.toFixed(5)},${location.lon.toFixed(5)}`;\n}\n\nexport function calculatePhysicalActivity(itinerary) {\n  let walkDuration = 0;\n  let bikeDuration = 0;\n  itinerary.legs.forEach(leg => {\n    if (leg.mode.startsWith(\"WALK\")) walkDuration += leg.duration;\n    if (leg.mode.startsWith(\"BICYCLE\")) bikeDuration += leg.duration;\n  });\n  const caloriesBurned =\n    (walkDuration / 3600) * 280 + (bikeDuration / 3600) * 290;\n  return {\n    bikeDuration,\n    caloriesBurned,\n    walkDuration\n  };\n}\n\nexport function calculateFares(itinerary) {\n  let transitFare = 0;\n  let symbol = \"$\"; // default to USD\n  let dollarsToString = dollars => `${symbol}${dollars.toFixed(2)}`;\n  let centsToString = cents => `${symbol}${(cents / 100).toFixed(2)}`;\n  if (itinerary.fare && itinerary.fare.fare && itinerary.fare.fare.regular) {\n    const reg = itinerary.fare.fare.regular;\n    symbol = reg.currency.symbol;\n    transitFare = reg.cents;\n    centsToString = cents =>\n      `${symbol}${(cents / 10 ** reg.currency.defaultFractionDigits).toFixed(\n        reg.currency.defaultFractionDigits\n      )}`;\n    dollarsToString = dollars => `${symbol}${dollars.toFixed(2)}`;\n  }\n\n  // Process any TNC fares\n  let minTNCFare = 0;\n  let maxTNCFare = 0;\n  itinerary.legs.forEach(leg => {\n    if (leg.mode === \"CAR\" && leg.hailedCar && leg.tncData) {\n      const { maxCost, minCost } = leg.tncData;\n      // TODO: Support non-USD\n      minTNCFare += minCost;\n      maxTNCFare += maxCost;\n    }\n  });\n  return {\n    centsToString,\n    dollarsToString,\n    maxTNCFare,\n    minTNCFare,\n    transitFare\n  };\n}\n\nexport function getTimeZoneOffset(itinerary) {\n  if (!itinerary.legs || !itinerary.legs.length) return 0;\n\n  // Determine if there is a DST offset between now and the itinerary start date\n  const dstOffset =\n    new Date(itinerary.startTime).getTimezoneOffset() -\n    new Date().getTimezoneOffset();\n\n  return (\n    itinerary.legs[0].agencyTimeZoneOffset +\n    (new Date().getTimezoneOffset() + dstOffset) * 60000\n  );\n}\n\n/**\n * The functions below are for enhanced route sorting functions for\n * the route viewer on OTP-react-redux.\n * They address route ordering issues discussed in\n * https://github.com/opentripplanner/otp-react-redux/pull/123 and\n * https://github.com/opentripplanner/otp-react-redux/pull/124.\n */\n\n/**\n * Gets the desired sort values according to an optional getter function. If the\n * getter function is not defined, the original sort values are returned.\n */\nfunction getSortValues(getterFn, a, b) {\n  let aVal;\n  let bVal;\n  if (typeof getterFn === \"function\") {\n    aVal = getterFn(a);\n    bVal = getterFn(b);\n  } else {\n    aVal = a;\n    bVal = b;\n  }\n  return { aVal, bVal };\n}\n\n// Lookup for the sort values associated with various OTP modes.\n// Note: JSDoc format not used to avoid bug in documentationjs.\n// https://github.com/documentationjs/documentation/issues/372\nconst modeComparatorValue = {\n  SUBWAY: 1,\n  TRAM: 2,\n  RAIL: 3,\n  GONDOLA: 4,\n  FERRY: 5,\n  CABLE_CAR: 6,\n  FUNICULAR: 7,\n  BUS: 8\n};\n\n// Lookup that maps route types to the OTP mode sort values.\n// Note: JSDoc format not used to avoid bug in documentationjs.\n// https://github.com/documentationjs/documentation/issues/372\nconst routeTypeComparatorValue = {\n  0: modeComparatorValue.TRAM, // - Tram, Streetcar, Light rail.\n  1: modeComparatorValue.SUBWAY, // - Subway, Metro.\n  2: modeComparatorValue.RAIL, // - Rail. Used for intercity or long-distance travel.\n  3: modeComparatorValue.BUS, // - Bus.\n  4: modeComparatorValue.FERRY, // - Ferry.\n  5: modeComparatorValue.CABLE_CAR, // - Cable tram.\n  6: modeComparatorValue.GONDOLA, // - Gondola, etc.\n  7: modeComparatorValue.FUNICULAR, // - Funicular.\n  // TODO: 11 and 12 are not a part of OTP as of 2019-02-14, but for now just\n  // associate them with bus/rail.\n  11: modeComparatorValue.BUS, // - Trolleybus.\n  12: modeComparatorValue.RAIL // - Monorail.\n};\n\n// Gets a comparator value for a given route's type (OTP mode).\n// Note: JSDoc format not used to avoid bug in documentationjs.\n// ttps://github.com/documentationjs/documentation/issues/372\nfunction getRouteTypeComparatorValue(route) {\n  // For some strange reason, the short route response in OTP returns the\n  // string-based modes, but the long route response returns the\n  // integer route type. This attempts to account for both of those cases.\n  if (!route) throw new Error(\"Route is undefined.\", route);\n  if (typeof modeComparatorValue[route.mode] !== \"undefined\") {\n    return modeComparatorValue[route.mode];\n  }\n  if (typeof routeTypeComparatorValue[route.type] !== \"undefined\") {\n    return routeTypeComparatorValue[route.type];\n  }\n  // Default the comparator value to a large number (placing the route at the\n  // end of the list).\n  console.warn(\"no mode/route type found for route\", route);\n  return 9999;\n}\n\n/**\n * Calculates the sort comparator value given two routes based off of route type\n * (OTP mode).\n */\nfunction routeTypeComparator(a, b) {\n  return getRouteTypeComparatorValue(a) - getRouteTypeComparatorValue(b);\n}\n\n/**\n * Determines whether a value is a string that starts with an alphabetic\n * ascii character.\n */\nfunction startsWithAlphabeticCharacter(val) {\n  if (typeof val === \"string\" && val.length > 0) {\n    const firstCharCode = val.charCodeAt(0);\n    return (\n      (firstCharCode >= 65 && firstCharCode <= 90) ||\n      (firstCharCode >= 97 && firstCharCode <= 122)\n    );\n  }\n  return false;\n}\n\n/**\n * Sorts routes based off of whether the shortName begins with an alphabetic\n * character. Routes with shortn that do start with an alphabetic character will\n * be prioritized over those that don't.\n */\nfunction alphabeticShortNameComparator(a, b) {\n  const aStartsWithAlphabeticCharacter = startsWithAlphabeticCharacter(\n    a.shortName\n  );\n  const bStartsWithAlphabeticCharacter = startsWithAlphabeticCharacter(\n    b.shortName\n  );\n\n  if (aStartsWithAlphabeticCharacter && bStartsWithAlphabeticCharacter) {\n    // both start with an alphabetic character, return equivalence\n    return 0;\n  }\n  // a does start with an alphabetic character, but b does not. Prioritize a\n  if (aStartsWithAlphabeticCharacter) return -1;\n  // b does start with an alphabetic character, but a does not. Prioritize b\n  if (bStartsWithAlphabeticCharacter) return 1;\n  // neither route has a shortName that starts with an alphabetic character.\n  // Return equivalence\n  return 0;\n}\n\n/**\n * Checks whether an appropriate comparison of numeric values can be made for\n * sorting purposes. If both values are not valid numbers according to the\n * isNaN check, then this function returns undefined which indicates that a\n * secondary sorting criteria should be used instead. If one value is valid and\n * the other is not, then the valid value will be given sorting priority. If\n * both values are valid numbers, the difference is obtained as the sort value.\n *\n * An optional argument can be provided which will be used to obtain the\n * comparison value from the comparison function arguments.\n *\n * IMPORTANT: the comparison values must be numeric values or at least be\n * attempted to be converted to numeric values! If one of the arguments is\n * something crazy like an empty string, unexpected behavior will occur because\n * JavaScript.\n *\n * @param  {function} [objGetterFn] An optional function to obtain the\n *  comparison value from the comparator function arguments\n */\nfunction makeNumericValueComparator(objGetterFn) {\n  /* Note: Using the global version of isNaN (the Number version behaves differently. */\n  /* eslint-disable no-restricted-globals */\n  return (a, b) => {\n    const { aVal, bVal } = getSortValues(objGetterFn, a, b);\n    // if both values aren't valid numbers, use the next sort criteria\n    if (isNaN(aVal) && isNaN(bVal)) return 0;\n    // b is a valid number, b gets priority\n    if (isNaN(aVal)) return 1;\n    // a is a valid number, a gets priority\n    if (isNaN(bVal)) return -1;\n    // a and b are valid numbers, return the sort value\n    return aVal - bVal;\n  };\n}\n\n/**\n * Create a comparator function that compares string values. The comparison\n * values feed to the sort comparator function are assumed to be objects that\n * will have either undefined, null or string values at the given key. If one\n * object has undefined, null or an empty string, but the other does have a\n * string with length > 0, then that string will get priority.\n *\n * @param  {function} [objGetterFn] An optional function to obtain the\n *  comparison value from the comparator function arguments\n */\nfunction makeStringValueComparator(objGetterFn) {\n  return (a, b) => {\n    const { aVal, bVal } = getSortValues(objGetterFn, a, b);\n    // both a and b are uncomparable strings, return equivalent value\n    if (!aVal && !bVal) return 0;\n    // a is not a comparable string, b gets priority\n    if (!aVal) return 1;\n    // b is not a comparable string, a gets priority\n    if (!bVal) return -1;\n    // a and b are comparable strings, return the sort value\n    if (aVal < bVal) return -1;\n    if (aVal > bVal) return 1;\n    return 0;\n  };\n}\n\n/**\n * OpenTripPlanner sets the routeSortOrder to -999 by default. So, if that value\n * is encountered, assume that it actually means that the routeSortOrder is not\n * set in the GTFS.\n *\n * See https://github.com/opentripplanner/OpenTripPlanner/issues/2938\n * Also see https://github.com/opentripplanner/otp-react-redux/issues/122\n */\nfunction getRouteSortOrderValue(val) {\n  return val === -999 ? undefined : val;\n}\n\n/**\n * Create a multi-criteria sort comparator function composed of other sort\n * comparator functions. Each comparator function will be ran in the order given\n * until a non-zero comparison value is obtained which is then immediately\n * returned. If all comparison functions return equivalance, then the values\n * are assumed to be equivalent.\n */\nfunction makeMultiCriteriaSort(...criteria) {\n  return (a, b) => {\n    for (let i = 0; i < criteria.length; i++) {\n      const curCriteriaComparatorValue = criteria[i](a, b);\n      // if the comparison objects are not equivalent, return the value obtained\n      // in this current criteria comparison\n      if (curCriteriaComparatorValue !== 0) {\n        return curCriteriaComparatorValue;\n      }\n    }\n    return 0;\n  };\n}\n\n/**\n * Compares routes for the purposes of sorting and displaying in a user\n * interface. Due to GTFS feeds having varying levels of data quality, a multi-\n * criteria sort is needed to account for various differences. The criteria\n * included here are each applied to the routes in the order listed. If a given\n * sort criterion yields equivalence (e.g., two routes have the short name\n * \"20\"), the comparator falls back onto the next sort criterion (e.g., long\n * name). If desired, the criteria of sorting based off of integer shortName can\n * be disabled. The sort operates on the following values (in order):\n *\n *  1. sortOrder. Routes that do not have a valid sortOrder will be placed\n *    beneath those that do.\n *  2. route type (OTP mode). See routeTypeComparator code for prioritization of\n *    route types.\n *  3. shortNames that begin with alphabetic characters. shortNames that do not\n *    start with alphabetic characters will be place beneath those that do.\n *  4. shortName as integer. shortNames that cannot be parsed as integers will\n *    be placed beneath those that are valid.\n *  5. shortName as string. Routes without shortNames will be placed beneath\n *    those with shortNames.\n *  6. longName as string.\n */\nexport const routeComparator = makeMultiCriteriaSort(\n  makeNumericValueComparator(obj => getRouteSortOrderValue(obj.sortOrder)),\n  routeTypeComparator,\n  alphabeticShortNameComparator,\n  makeNumericValueComparator(obj => parseInt(obj.shortName, 10)),\n  makeStringValueComparator(obj => obj.shortName),\n  makeStringValueComparator(obj => obj.longName)\n);\n"]}