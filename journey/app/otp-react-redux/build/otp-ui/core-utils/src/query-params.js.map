{"version":3,"sources":["query-params.js"],"names":["formatPlace","location","alternateName","name","lat","lon","storedSettings","queryParams","routingTypes","default","itineraryRewrite","value","fromPlace","profileRewrite","from","toPlace","to","getCurrentDate","getCurrentTime","arriveBy","accessModes","directModes","transitModes","length","split","forEach","m","push","applicable","query","mode","hasTransit","indexOf","selector","label","options","text","maxWalkDistance","maxBikeDistance","hasBike","opts","splice","optimize","maxEScooterDistance","watts","maximumMicromobilitySpeed","weight","TYPICAL_RIDER_WEIGHT","config","modes","configModes","concat","some","configMode","find","showWheelchairSetting","company","companies","includes","places","Array","isArray","intermediatePlaces","map","place","join","undefined","getUserLang","param","userDefaultOverride"],"mappings":"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","sourcesContent":["import {\n  isTransit,\n  isAccessMode,\n  isCar,\n  hasTransit,\n  hasBike,\n  hasMicromobility\n} from \"./itinerary\";\nimport { getItem } from \"./storage\";\nimport { getCurrentDate, getCurrentTime } from \"./time\";\n\n/**\n * name: the default name of the parameter used for internal reference and API calls\n *\n * routingTypes: array of routing type(s) (ITINERARY, PROFILE, or both) this param applies to\n *\n * applicable: an optional function (accepting the current full query as a\n *   parameter) indicating whether this query parameter is applicable to the query.\n *   (Applicability is assumed if this function is not provided.)\n *\n * default: the default value for this parameter. The default can be also be a\n *  function that gets executed when accessing the default value.\n *\n * itineraryRewrite: an optional function for translating the key and/or value\n *   for ITINERARY mode only (e.g. 'to' is rewritten as 'toPlace'). Accepts the\n *   intial internal value as a function parameter.\n *\n * profileRewrite: an optional function for translating the value for PROFILE mode\n *\n * label: a text label for for onscreen display. May either be a text string or a\n *   function (accepting the current full query as a parameter) returning a string\n *\n * selector: the default type of UI selector to use in the form. Can be one of:\n *   - DROPDOWN: a standard drop-down menu selector\n *\n * options: an array of text/value pairs used with a dropdown selector\n *\n * TODO: validation system for rewrite functions and/or better user documentation\n * TODO: alphabetize below list\n */\n\n// FIXME: Use for parsing URL values?\n// const stringToLocation = string => {\n//   const split = string.split(',')\n//   return split.length === 2\n//     ? {lat: split[0], lon: split[1]}\n//     : {lat: null, lon: null}\n// }\n\n/**\n * Format location object as string for use in fromPlace or toPlace query param.\n */\nexport function formatPlace(location, alternateName = \"Place\") {\n  if (!location) return null;\n  const name =\n    location.name || `${alternateName} (${location.lat},${location.lon})`;\n  return `${name}::${location.lat},${location.lon}`;\n}\n\n// Load stored default query settings from local storage\nconst storedSettings = getItem(\"defaultQuery\", {});\n\nconst queryParams = [\n  {\n    /* from - the trip origin. stored internally as a location (lat/lon/name) object  */\n    name: \"from\",\n    routingTypes: [\"ITINERARY\", \"PROFILE\"],\n    default: null,\n    itineraryRewrite: value => ({ fromPlace: formatPlace(value, \"Origin\") }),\n    profileRewrite: value => ({ from: { lat: value.lat, lon: value.lon } })\n    // FIXME: Use for parsing URL values?\n    // fromURL: stringToLocation\n  },\n\n  {\n    /* to - the trip destination. stored internally as a location (lat/lon/name) object  */\n    name: \"to\",\n    routingTypes: [\"ITINERARY\", \"PROFILE\"],\n    default: null,\n    itineraryRewrite: value => ({ toPlace: formatPlace(value, \"Destination\") }),\n    profileRewrite: value => ({ to: { lat: value.lat, lon: value.lon } })\n    // FIXME: Use for parsing URL values?\n    // fromURL: stringToLocation\n  },\n\n  {\n    /* date - the date of travel, in MM-DD-YYYY format */\n    name: \"date\",\n    routingTypes: [\"ITINERARY\", \"PROFILE\"],\n    default: getCurrentDate\n  },\n\n  {\n    /* time - the arrival/departure time for an itinerary trip, in HH:mm format */\n    name: \"time\",\n    routingTypes: [\"ITINERARY\"],\n    default: getCurrentTime\n  },\n\n  {\n    /* departArrive - whether this is a depart-at, arrive-by, or leave-now trip */\n    name: \"departArrive\",\n    routingTypes: [\"ITINERARY\"],\n    default: \"NOW\",\n    itineraryRewrite: value => ({ arriveBy: value === \"ARRIVE\" })\n  },\n\n  {\n    /* startTime - the start time for a profile trip, in HH:mm format */\n    name: \"startTime\",\n    routingTypes: [\"PROFILE\"],\n    default: \"07:00\"\n  },\n\n  {\n    /* endTime - the end time for a profile trip, in HH:mm format */\n    name: \"endTime\",\n    routingTypes: [\"PROFILE\"],\n    default: \"09:00\"\n  },\n\n  {\n    /* mode - the allowed modes for a trip, as a comma-separated list */\n    name: \"mode\",\n    routingTypes: [\"ITINERARY\", \"PROFILE\"],\n    default: \"WALK,TRANSIT\", // TODO: make this dependent on routingType?\n    profileRewrite: value => {\n      const accessModes = [];\n      const directModes = [];\n      const transitModes = [];\n\n      if (value && value.length > 0) {\n        value.split(\",\").forEach(m => {\n          if (isTransit(m)) transitModes.push(m);\n          if (isAccessMode(m)) {\n            accessModes.push(m);\n            // TODO: make configurable whether direct-driving is considered\n            if (!isCar(m)) directModes.push(m);\n          }\n        });\n      }\n\n      return { accessModes, directModes, transitModes };\n    }\n  },\n\n  {\n    /* showIntermediateStops - whether response should include intermediate stops for transit legs */\n    name: \"showIntermediateStops\",\n    routingTypes: [\"ITINERARY\"],\n    default: true\n  },\n\n  {\n      /* maxWalkDistance - the maximum distance in meters the user will walk to transit. */\n      name: \"maxWalkDistance\",\n      routingTypes: [\"ITINERARY\"],\n      applicable: query => query.mode && (0, hasTransit)(query.mode) && query.mode.indexOf(\"WALK\") !== -1,\n      default: 1000,\n      // 1Km\n      selector: \"DROPDOWN\",\n      label: \"$_by_walk_$\",\n      options: [{\n        text: \"250 $_meter_$\",\n        value: 250\n      }, {\n        text: \"500 $_meter_$\",\n        value: 500\n      }, {\n        text: \"750 $_meter_$\",\n        value: 750\n      }, {\n        text: \"1 Km\",\n        value: 1000\n      }, {\n        text: \"1.5 Km\",\n        value: 1500\n      }, {\n        text: \"3 Km\",\n        value: 3000\n      }, {\n        text: \"10 Km\",\n        value: 10000\n      }]\n    }, {\n      /* maxBikeDistance - the maximum distance in meters the user will bike. Not\n       * actually an OTP parameter (maxWalkDistance doubles for biking) but we\n       * store it separately internally in order to allow different default values,\n       * options, etc.  Translated to 'maxWalkDistance' via the rewrite function.\n       */\n      name: \"maxBikeDistance\",\n      routingTypes: [\"ITINERARY\"],\n      applicable: query => query.mode && (0, hasTransit)(query.mode) && query.mode.indexOf(\"BICYCLE\") !== -1,\n      default: 5000,\n      // 5Km\n      selector: \"DROPDOWN\",\n      label: \"$_by_bike_$\",\n      options: [{\n        text: \"500 $_meter_$\",\n        value: 500\n      }, {\n        text: \"750 $_meter_$\",\n        value: 750\n      }, {\n        text: \"1 Km\",\n        value: 1000\n      }, {\n        text: \"1.5 Km\",\n        value: 1500\n      }, {\n        text: \"3 Km\",\n        value: 3000\n      }, {\n        text: \"5 Km\",\n        value: 5000\n      }, {\n        text: \"7 Km\",\n        value: 7000\n      }, {\n        text: \"15 Km\",\n        value: 15000\n      }, {\n        text: \"30 Km\",\n        value: 30000\n      }, {\n        text: \"50 Km\",\n        value: 50000\n      }],\n      itineraryRewrite: value => ({\n        maxWalkDistance: value,\n        // ensures that the value is repopulated when loaded from URL params\n        maxBikeDistance: value\n      })\n    }, {\n      /* optimize -- how to optimize a trip (non-bike, non-micromobility trips) */\n      name: \"optimize\",\n      applicable: query => (0, hasTransit)(query.mode) && !(0, hasBike)(query.mode),\n      routingTypes: [\"ITINERARY\"],\n      default: \"QUICK\",\n      selector: \"DROPDOWN\",\n      label: \"$_optimizer_$\",\n      options: [{\n        text: \"$_speed_$\",\n        value: \"QUICK\"\n      }, {\n        text: \"$_less_transfers_$\",\n        value: \"TRANSFERS\"\n      }]\n    }, {\n      /* optimizeBike -- how to optimize an bike-based trip */\n      name: \"optimizeBike\",\n      applicable: query => (0, hasBike)(query.mode),\n      routingTypes: [\"ITINERARY\"],\n      default: \"SAFE\",\n      selector: \"DROPDOWN\",\n      label: \"$_optimizer_$\",\n      options: query => {\n        const opts = [{\n          text: \"$_speed_$\",\n          value: \"QUICK\"\n        }, {\n          text: \"$_security_$\",\n          value: \"SAFE\"\n        }, {\n          text: \"$_flat_$\",\n          value: \"FLAT\"\n        }]; // Include transit-specific option, if applicable\n\n        if ((0, hasTransit)(query.mode)) {\n          opts.splice(1, 0, {\n            text: \"$_less_transfers_$\",\n            value: \"TRANSFERS\"\n          });\n        }\n\n        return opts;\n      },\n      itineraryRewrite: value => ({\n        optimize: value\n      })\n    }, {\n      /* maxWalkTime -- the maximum time the user will spend walking in minutes */\n      name: \"maxWalkTime\",\n      routingTypes: [\"PROFILE\"],\n      default: 15,\n      selector: \"DROPDOWN\",\n      label: \"Tempo massimo di cammino\",\n      applicable: query => query.mode && (0, hasTransit)(query.mode) && query.mode.indexOf(\"WALK\") !== -1,\n      options: [{\n        text: \"5 minuti\",\n        value: 5\n      }, {\n        text: \"10 minuti\",\n        value: 10\n      }, {\n        text: \"15 minuti\",\n        value: 15\n      }, {\n        text: \"20 minuti\",\n        value: 20\n      }, {\n        text: \"30 minuti\",\n        value: 30\n      }, {\n        text: \"45 minuti\",\n        value: 45\n      }, {\n        text: \"1 ora\",\n        value: 60\n      }]\n    }, {\n      /* walkSpeed -- the user's walking speed in m/s */\n      name: \"walkSpeed\",\n      routingTypes: [\"ITINERARY\", \"PROFILE\"],\n      default: 1.11,\n      selector: \"DROPDOWN\",\n      label: \"$_walk_speed_$\",\n      applicable: query => query.mode && query.mode.indexOf(\"WALK\") !== -1,\n      options: [{\n        text: \"3 Km/h\",\n        value: 0.83\n      }, {\n        text: \"4 Km/h\",\n        value: 1.11\n      }, {\n        text: \"5 Km/h\",\n        value: 1.38\n      }]\n    }, {\n      /* maxBikeTime -- the maximum time the user will spend biking in minutes */\n      name: \"maxBikeTime\",\n      routingTypes: [\"PROFILE\"],\n      default: 20,\n      selector: \"DROPDOWN\",\n      label: \"Tempo massimo in bici\",\n      applicable: query => query.mode && (0, hasTransit)(query.mode) && query.mode.indexOf(\"BICYCLE\") !== -1,\n      options: [{\n        text: \"5 minuti\",\n        value: 5\n      }, {\n        text: \"10 minuti\",\n        value: 10\n      }, {\n        text: \"15 minuti\",\n        value: 15\n      }, {\n        text: \"20 minuti\",\n        value: 20\n      }, {\n        text: \"30 minuti\",\n        value: 30\n      }, {\n        text: \"45 minuti\",\n        value: 45\n      }, {\n        text: \"1 ora\",\n        value: 60\n      }]\n    }, {\n      /* bikeSpeed -- the user's bikeSpeed speed in m/s */\n      name: \"bikeSpeed\",\n      routingTypes: [\"ITINERARY\", \"PROFILE\"],\n      default: 3.33,\n      selector: \"DROPDOWN\",\n      label: \"$_ride_speed_$\",\n      applicable: query => query.mode && query.mode.indexOf(\"BICYCLE\") !== -1,\n      options: [{\n        text: \"10 Km/h\",\n        value: 2.77\n      }, {\n        text: \"12 Km/h\",\n        value: 3.33\n      }, {\n        text: \"16 Km/h\",\n        value: 4.47\n      }, {\n        text: \"20 Km/h\",\n        value: 5.55\n      }\n    ]\n  },\n\n  {\n    /* maxEScooterDistance - the maximum distance in meters the user will ride\n     * an E-scooter. Not actually an OTP parameter (maxWalkDistance doubles for\n     * any non-transit mode except for car) but we store it separately\n     * internally in order to allow different default values, options, etc.\n     * Translated to 'maxWalkDistance' via the rewrite function.\n     */\n    name: \"maxEScooterDistance\",\n    routingTypes: [\"ITINERARY\"],\n    applicable: query =>\n      query.mode && hasTransit(query.mode) && hasMicromobility(query.mode),\n    default: 4828, // 3 mi.\n    selector: \"DROPDOWN\",\n    label: \"Maximum E-scooter Distance\",\n    options: [\n      {\n        text: \"1/4 mile\",\n        value: 402.3\n      },\n      {\n        text: \"1/2 mile\",\n        value: 804.7\n      },\n      {\n        text: \"3/4 mile\",\n        value: 1207\n      },\n      {\n        text: \"1 mile\",\n        value: 1609\n      },\n      {\n        text: \"2 miles\",\n        value: 3219\n      },\n      {\n        text: \"3 miles\",\n        value: 4828\n      },\n      {\n        text: \"5 miles\",\n        value: 8047\n      },\n      {\n        text: \"10 miles\",\n        value: 16093\n      },\n      {\n        text: \"20 miles\",\n        value: 32187\n      },\n      {\n        text: \"30 miles\",\n        value: 48280\n      }\n    ],\n    itineraryRewrite: value => ({\n      maxWalkDistance: value,\n      // ensures that the value is repopulated when loaded from URL params\n      maxEScooterDistance: value\n    })\n  },\n\n  {\n    /* bikeSpeed -- the user's bikeSpeed speed in m/s */\n    name: \"watts\",\n    routingTypes: [\"ITINERARY\", \"PROFILE\"],\n    default: 250,\n    selector: \"DROPDOWN\",\n    label: \"E-scooter Power\",\n    // this configuration should only be allowed for personal E-scooters as these\n    // settings will be defined by the vehicle type of an E-scooter being rented\n    applicable: query =>\n      query.mode &&\n      query.mode.indexOf(\"MICROMOBILITY\") !== -1 &&\n      query.mode.indexOf(\"MICROMOBILITY_RENT\") === -1,\n    options: [\n      {\n        text: \"Kid's hoverboard (6mph)\",\n        value: 125\n      },\n      {\n        text: \"Entry-level scooter (11mph)\",\n        value: 250\n      },\n      {\n        text: \"Robust E-scooter (18mph)\",\n        value: 500\n      },\n      {\n        text: \"Powerful E-scooter (24mph)\",\n        value: 1500\n      }\n    ],\n    // rewrite a few other values to add some baseline assumptions about the\n    // vehicle\n    itineraryRewrite: value => {\n      const watts = value;\n      // the maximum cruising and downhill speed. Units in m/s\n      let maximumMicromobilitySpeed;\n      let weight;\n      // see https://en.wikipedia.org/wiki/Human_body_weight#Average_weight_around_the_world\n      // estimate is for an average North American human with clothes and stuff\n      // units are in kg\n      const TYPICAL_RIDER_WEIGHT = 90;\n      switch (watts) {\n        case 125:\n          // exemplar: Swagtron Turbo 5 hoverboard (https://swagtron.com/product/recertified-swagtron-turbo-five-hoverboard-classic/)\n          maximumMicromobilitySpeed = 2.8; // ~= 6mph\n          weight = TYPICAL_RIDER_WEIGHT + 9;\n          break;\n        case 250:\n          // exemplar: Xiaomi M365 (https://www.gearbest.com/skateboard/pp_596618.html)\n          maximumMicromobilitySpeed = 5; // ~= 11.5mph\n          weight = TYPICAL_RIDER_WEIGHT + 12.5;\n          break;\n        case 500:\n          // exemplar: Razor EcoSmart Metro (https://www.amazon.com/Razor-EcoSmart-Metro-Electric-Scooter/dp/B002ZDAEIS?SubscriptionId=AKIAJMXJ2YFJTEDLQMUQ&tag=digitren08-20&linkCode=xm2&camp=2025&creative=165953&creativeASIN=B002ZDAEIS&ascsubtag=15599460143449ocb)\n          maximumMicromobilitySpeed = 8; // ~= 18mph\n          weight = TYPICAL_RIDER_WEIGHT + 30;\n          break;\n        case 1000:\n          // exemplar: Boosted Rev (https://boostedboards.com/vehicles/scooters/boosted-rev)\n          maximumMicromobilitySpeed = 11; // ~= 24mph\n          weight = TYPICAL_RIDER_WEIGHT + 21;\n          break;\n        default:\n          break;\n      }\n      return { maximumMicromobilitySpeed, watts, weight };\n    }\n  },\n\n  {\n    /* ignoreRealtimeUpdates -- if true, do not use realtime updates in routing */\n    name: \"ignoreRealtimeUpdates\",\n    routingTypes: [\"ITINERARY\"],\n    default: false\n  },\n\n  {\n    /* companies -- tnc companies to query */\n    name: \"companies\",\n    routingTypes: [\"ITINERARY\"],\n    default: null\n  },\n\n  {\n    /* wheelchair -- whether the user requires a wheelchair-accessible trip */\n    name: \"wheelchair\",\n    routingTypes: [\"ITINERARY\"],\n    default: false,\n    selector: \"CHECKBOX\",\n    label: \"$_available_wheelchair_$\",\n    applicable: (query, config) => {\n      if (!query.mode || !config.modes) return false;\n      const configModes = (config.modes.accessModes || []).concat(\n        config.modes.transitModes || []\n      );\n      return query.mode.split(\",\").some(mode => {\n        const configMode = configModes.find(m => m.mode === mode);\n        if (!configMode || !configMode.showWheelchairSetting) return false;\n        if (\n          configMode.company &&\n          (!query.companies ||\n            !query.companies.split(\",\").includes(configMode.company))\n        )\n          return false;\n        return true;\n      });\n    }\n  },\n\n  {\n    name: \"bannedRoutes\",\n    routingTypes: [\"ITINERARY\"],\n    default: \"\"\n  },\n  {\n    name: \"numItineraries\",\n    routingTypes: [\"ITINERARY\"],\n    default: 3\n  },\n  {\n    name: \"intermediatePlaces\",\n    default: [],\n    routingTypes: [\"ITINERARY\"],\n    itineraryRewrite: places =>\n      Array.isArray(places) && places.length > 0\n        ? {\n            intermediatePlaces: places\n              .map(place => formatPlace(place))\n              .join(\",\")\n          }\n        : undefined\n  },\n  {\n    // Time penalty in seconds the requester is willing to accept in order to\n    // complete journey on preferred route. I.e., number of seconds that we are\n    // willing to wait for the preferred route.\n    name: \"otherThanPreferredRoutesPenalty\",\n    default: 15 * 60, // 15 minutes\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"preferredRoutes\",\n    routingTypes: [\"ITINERARY\"],\n    default: \"\"\n}\n,\n{\n    name: \"locale\",\n    routingTypes: [\"ITINERARY\"],\n    default: getUserLang(),\n}\n];\n// Iterate over stored settings and update query param defaults.\n// FIXME: this does not get updated if the user defaults are cleared\nqueryParams.forEach(param => {\n  if (param.name in storedSettings) {\n    param.default = storedSettings[param.name];\n    param.userDefaultOverride = true;\n  }\n});\n\nexport default queryParams;\n"]}