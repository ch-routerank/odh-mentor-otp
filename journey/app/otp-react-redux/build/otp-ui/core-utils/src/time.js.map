{"version":3,"sources":["time.js"],"names":["OTP_API_DATE_FORMAT","OTP_API_TIME_FORMAT","getTimeFormat","config","dateTime","timeFormat","getDateFormat","dateFormat","getLongDateFormat","longDateFormat","formatDuration","seconds","dur","moment","duration","text","hours","minutes","formatDurationWithSeconds","formatTime","ms","options","offset","format","formatSecondsAfterMidnight","startOf","getUserTimezone","process","env","NODE_ENV","TZ","tz","guess","console","warn","getCurrentTime","timezone","getCurrentDate"],"mappings":"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","sourcesContent":["import moment from \"moment-timezone\";\n\n// special constants for making sure the following date format is always sent to\n// OTP regardless of whatever the user has configured as the display format\nexport const OTP_API_DATE_FORMAT = \"YYYY-MM-DD\";\nexport const OTP_API_TIME_FORMAT = \"HH:mm\";\n\n/**\n * @param  {[type]} config the OTP config object found in store\n * @return {string}        the config-defined time formatter or HH:mm (24-hr time)\n */\nexport function getTimeFormat(config) {\n  return config.dateTime && config.dateTime.timeFormat\n    ? config.dateTime.timeFormat\n    : OTP_API_TIME_FORMAT;\n}\n\nexport function getDateFormat(config) {\n  return config.dateTime && config.dateTime.dateFormat\n    ? config.dateTime.dateFormat\n    : OTP_API_DATE_FORMAT;\n}\n\nexport function getLongDateFormat(config) {\n  return config.dateTime && config.dateTime.longDateFormat\n    ? config.dateTime.longDateFormat\n    : \"D MMMM YYYY\";\n}\n\n/**\n * Formats an elapsed time duration for display in narrative\n * TODO: internationalization\n * @param {number} seconds duration in seconds\n * @returns {string} formatted text representation\n */\nexport function formatDuration(seconds) {\n  const dur = moment.duration(seconds, \"seconds\");\n  let text = \"\";\n  if (dur.hours() > 0) text += `${dur.hours()} hr, `;\n  text += `${dur.minutes()} min`;\n  return text;\n}\n\n/**\n * Formats an elapsed time in seconds, minutes, hours duration for display in narrative\n * TODO: internationalization\n * @param {number} seconds duration in seconds\n * @returns {string} formatted text representation\n */\nexport function formatDurationWithSeconds(seconds) {\n  const dur = moment.duration(seconds, \"seconds\");\n  let text = \"\";\n  if (dur.hours() > 0) text += `${dur.hours()} hr, `;\n  if (dur.minutes() > 0) text += `${dur.minutes()} min, `;\n  text += `${dur.seconds()} sec`;\n  return text;\n}\n\n/**\n * Formats a time value for display in narrative\n * TODO: internationalization/timezone\n * @param {number} ms epoch time value in milliseconds\n * @returns {string} formatted text representation\n */\nexport function formatTime(ms, options) {\n  return moment(ms + (options && options.offset ? options.offset : 0)).format(\n    options && options.format ? options.format : OTP_API_TIME_FORMAT\n  );\n}\n\n/**\n * Formats a seconds after midnight value for display in narrative\n * @param  {number} seconds  time since midnight in seconds\n * @param  {string} timeFormat  A valid moment.js time format\n * @return {string}                   formatted text representation\n */\nexport function formatSecondsAfterMidnight(seconds, timeFormat) {\n  return moment()\n    .startOf(\"day\")\n    .seconds(seconds)\n    .format(timeFormat);\n}\n\n/**\n * Get the timezone name that is set for the user that is currently looking at\n * this website. Use a bit of hackery to force a specific timezone if in a\n * test environment.\n */\nexport function getUserTimezone() {\n  if (process.env.NODE_ENV === \"test\") return process.env.TZ;\n  // FIXME There is an issue with tz.guess being undefined that has not yet been\n  // resolved. https://github.com/opentripplanner/otp-ui/issues/152\n  if (!moment.tz || typeof moment.tz.guess !== \"function\") {\n    // eslint-disable-next-line no-console\n    console.warn(\n      \"Error guessing user's timezone (moment.tz or moment.tz.guess not defined). Defaulting to America/New_York.\"\n    );\n    return \"America/New_York\";\n  }\n  return moment.tz.guess();\n}\n\n/**\n * Formats current time for use in OTP query\n * The conversion to the user's timezone is needed for testing purposes.\n */\nexport function getCurrentTime(timezone = getUserTimezone()) {\n  return moment()\n    .tz(timezone)\n    .format(OTP_API_TIME_FORMAT);\n}\n\n/**\n * Formats current date for use in OTP query\n * The conversion to the user's timezone is needed for testing purposes.\n */\nexport function getCurrentDate(timezone = getUserTimezone()) {\n  return moment()\n    .tz(timezone)\n    .format(OTP_API_DATE_FORMAT);\n}\n"]}