{"version":3,"sources":["types.js"],"names":["companyType","PropTypes","shape","id","string","isRequired","label","modes","leafletPathType","bubblingMouseEvents","bool","color","className","dashArray","dashOffset","fill","fillColor","fillOpacity","number","fillRule","lineCap","lineJoin","opacity","renderer","func","stroke","weight","transitOperatorType","defaultRouteColor","defaultRouteTextColor","logo","longNameSplitter","name","order","languageConfigType","stopViewer","transitVehicleType","routeShortName","routeLongName","routeType","status","reportDate","seconds","stopSequence","stopId","vehicleId","tripId","blockId","lat","lon","heading","vehicleRentalMapOverlaySymbolsType","arrayOf","dockStrokeColor","maxZoom","minZoom","pixels","type","configType","companies","dateTime","timeFormat","dateFormat","longDateFormat","map","overlays","mapSymbols","maxTransitDistance","transitOperators","feedScopedIdType","agencyId","encodedPolylineType","length","points","elevationData","first","second","alertType","alertHeaderText","alertDescriptionText","alertUrl","effectiveStartDate","stepsType","absoluteDirection","alerts","area","bogusName","distance","elevation","relativeDirection","stayOn","streetName","placeType","arrival","departure","networks","stopCode","stopIndex","vertexType","zoneId","legType","agencyName","agencyTimeZoneOffset","agencyUrl","arrivalDelay","departureDelay","duration","endTime","from","hailedCar","headsign","interlineWithPreviousLeg","intermediateStops","interStopGeometry","legGeometry","mode","pathway","realTime","rentedBike","rentedCar","rentedVehicle","route","routeId","serviceDate","startTime","steps","tncData","company","currency","displayName","estimatedArrival","maxCost","minCost","productId","travelDuration","to","transitLeg","tripBlockId","moneyType","cents","defaultFractionDigits","currencyCode","symbol","fareType","details","objectOf","fareId","oneOfType","price","routes","fare","itineraryType","elevationGained","elevationLost","legs","tooSloped","transfers","transitTime","waitingTime","walkDistance","walkLimitExceeded","walkTime","locationType","timeOptionsType","format","offset","transitIndexStopWithRoutes","code","dist","longName","shortName","stopLayerStopType","transitivePlaceType","place_id","transitiveDataType","journeys","journey_id","journey_name","segments","arc","patterns","pattern_id","from_stop_index","to_stop_index","streetEdges","pattern_name","route_id","stops","geometry","stop_id","places","place_lat","place_lon","place_name","agency_id","route_short_name","route_long_name","route_type","route_color","stop_name","stop_lat","stop_lon","edge_id","stationType","bikesAvailable","isFloatingBike","isFloatingCar","isFloatingVehicle","spacesAvailable","x","y","createChainableTypeChecker","validator","checkType","props","propName","componentName","location","locationName","ReactPropTypeLocationNames","Error","chainedCheckType","bind","latlngType","modeOptionType","selected","showTitle","text","node","title","modeSelectorOptionsType","primary","secondary","tertiary","configuredModeType","configuredModesType","transitModes","accessModes","exclusiveModes","bicycleModes","micromobilityModes","configuredCompanyType","geocodedFeatureType","coordinates","properties","userLocationType","icon","timestamp"],"mappings":"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","sourcesContent":["import PropTypes from \"prop-types\";\nimport { ReactPropTypeLocationNames } from \"react\";\nimport { isValidLatLng } from \"./map\";\n\nexport const companyType = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  /* a comma-separated string listing the modes that this company has */\n  modes: PropTypes.string.isRequired\n});\n\n/**\n * Leaflet path properties to use to style a CircleMarker, Marker or Polyline.\n *\n * See https://leafletjs.com/reference-1.6.0.html#path\n */\nexport const leafletPathType = PropTypes.shape({\n  bubblingMouseEvents: PropTypes.bool,\n  color: PropTypes.string,\n  className: PropTypes.string,\n  dashArray: PropTypes.string,\n  dashOffset: PropTypes.string,\n  fill: PropTypes.bool,\n  fillColor: PropTypes.string,\n  fillOpacity: PropTypes.number,\n  fillRule: PropTypes.string,\n  lineCap: PropTypes.string,\n  lineJoin: PropTypes.string,\n  opacity: PropTypes.number,\n  renderer: PropTypes.func,\n  stroke: PropTypes.bool,\n  weight: PropTypes.number\n});\n\n/**\n * Describes some options to help display data about a transit agency that is\n * configured in an opentripplanner instance.\n */\nexport const transitOperatorType = PropTypes.shape({\n  defaultRouteColor: PropTypes.string,\n  defaultRouteTextColor: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  logo: PropTypes.string.isRequired,\n  longNameSplitter: PropTypes.string,\n  name: PropTypes.string,\n  order: PropTypes.number\n});\n\nexport const languageConfigType = PropTypes.shape({\n  stopViewer: PropTypes.string\n});\n\n/** describes the objects from the real-time vehicle service */\nexport const transitVehicleType = PropTypes.shape({\n  routeShortName: PropTypes.string,\n  routeLongName: PropTypes.string,\n  routeType: PropTypes.string,\n\n  status: PropTypes.string,\n  reportDate: PropTypes.string,\n  seconds: PropTypes.number,\n\n  stopSequence: PropTypes.number,\n  stopId: PropTypes.string,\n  vehicleId: PropTypes.string,\n  tripId: PropTypes.string,\n  blockId: PropTypes.string,\n\n  lat: PropTypes.number,\n  lon: PropTypes.number,\n  heading: PropTypes.number\n});\n\nexport const vehicleRentalMapOverlaySymbolsType = PropTypes.arrayOf(\n  PropTypes.shape({\n    dockStrokeColor: PropTypes.string,\n    fillColor: PropTypes.string,\n    maxZoom: PropTypes.number.isRequired,\n    minZoom: PropTypes.number.isRequired,\n    pixels: PropTypes.number,\n    type: PropTypes.string.isRequired\n  }).isRequired\n);\n\n/**\n * Represents the expected configuration of the webapp.\n *\n * Note: this is an incomplete type mapping.\n */\nexport const configType = PropTypes.shape({\n  companies: PropTypes.arrayOf(companyType.isRequired),\n  dateTime: PropTypes.shape({\n    timeFormat: PropTypes.string,\n    dateFormat: PropTypes.string,\n    longDateFormat: PropTypes.string\n  }),\n  // TODO: add full typing\n  map: PropTypes.shape({\n    overlays: PropTypes.arrayOf(\n      PropTypes.shape({\n        /**\n         * The applicable companies this overlay covers. Only applicable in\n         * certain vehicle rental overlays.\n         */\n        companies: PropTypes.arrayOf(PropTypes.string.isRequired),\n        name: PropTypes.string.isRequired,\n        /**\n         * The applicable map symbols. Only applicable in vehicle rental\n         * overlays.\n         */\n        mapSymbols: vehicleRentalMapOverlaySymbolsType,\n        /**\n         * Only used during park and ride queries. This will filter out P&Rs\n         * that are futher than the specified number of meters from a transit\n         * stop.\n         */\n        maxTransitDistance: PropTypes.number,\n        /**\n         * The applicable modes this overlay covers. Only applicable in certain\n         * vehicle rental overlays.\n         */\n        modes: PropTypes.arrayOf(PropTypes.string.isRequired),\n        /**\n         * The type of overlay. Currently valid values include:\n         *\n         * \"bike-rental\", \"car-rental\", \"micromobility-rental\", \"park-and-ride\",\n         * \"stops\", \"tile\"\n         */\n        type: PropTypes.string.isRequired\n      })\n    )\n  }),\n  transitOperators: PropTypes.arrayOf(transitOperatorType)\n});\n\nconst feedScopedIdType = PropTypes.shape({\n  agencyId: PropTypes.string,\n  id: PropTypes.string\n});\n\nexport const encodedPolylineType = PropTypes.shape({\n  length: PropTypes.number.isRequired,\n  points: PropTypes.string.isRequired\n});\n\nconst elevationData = PropTypes.arrayOf(\n  PropTypes.shape({\n    first: PropTypes.number.isRequired,\n    second: PropTypes.number.isRequired\n  }).isRequired\n);\n\nconst alertType = PropTypes.shape({\n  alertHeaderText: PropTypes.string,\n  alertDescriptionText: PropTypes.string,\n  alertUrl: PropTypes.string,\n  effectiveStartDate: PropTypes.number\n});\n\n/**\n * Represents steps in a leg in an itinerary of an OTP plan response. These are\n * only for non-transit modes.\n * See documentation here: http://otp-docs.ibi-transit.com/api/json_WalkStep.html\n */\nexport const stepsType = PropTypes.arrayOf(\n  PropTypes.shape({\n    absoluteDirection: PropTypes.string.isRequired,\n    alerts: PropTypes.arrayOf(alertType),\n    area: PropTypes.bool.isRequired,\n    bogusName: PropTypes.bool.isRequired,\n    distance: PropTypes.number.isRequired,\n    elevation: elevationData.isRequired,\n    lat: PropTypes.number.isRequired,\n    lon: PropTypes.number.isRequired,\n    relativeDirection: PropTypes.string.isRequired,\n    stayOn: PropTypes.bool.isRequired,\n    streetName: PropTypes.string.isRequired\n  })\n);\n\nexport const placeType = PropTypes.shape({\n  arrival: PropTypes.number,\n  departure: PropTypes.number,\n  lat: PropTypes.number.isRequired,\n  lon: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  networks: PropTypes.arrayOf(PropTypes.string.isRequired),\n  stopCode: PropTypes.string,\n  stopId: PropTypes.string,\n  stopIndex: PropTypes.number,\n  stopSequence: PropTypes.number,\n  vertexType: PropTypes.string.isRequired,\n  zoneId: PropTypes.string\n});\n\n/**\n * Represents a leg in an itinerary of an OTP plan response. Each leg represents\n * a portion of the overall itinerary that is done until either reaching the\n * destination or transitioning to another mode of travel. See OTP webservice\n * documentation here:\n * http://otp-docs.ibi-transit.com/api/json_Leg.html\n */\nexport const legType = PropTypes.shape({\n  agencyId: PropTypes.string,\n  agencyName: PropTypes.string,\n  agencyTimeZoneOffset: PropTypes.number.isRequired,\n  agencyUrl: PropTypes.string,\n  alerts: PropTypes.arrayOf(alertType),\n  arrivalDelay: PropTypes.number.isRequired,\n  departureDelay: PropTypes.number.isRequired,\n  distance: PropTypes.number.isRequired,\n  duration: PropTypes.number.isRequired,\n  endTime: PropTypes.number.isRequired,\n  from: placeType.isRequired,\n  hailedCar: PropTypes.bool.isRequired,\n  headsign: PropTypes.string,\n  interlineWithPreviousLeg: PropTypes.bool.isRequired,\n  intermediateStops: PropTypes.arrayOf(placeType).isRequired,\n  interStopGeometry: PropTypes.arrayOf(encodedPolylineType),\n  legGeometry: encodedPolylineType.isRequired,\n  mode: PropTypes.string.isRequired,\n  pathway: PropTypes.bool.isRequired,\n  realTime: PropTypes.bool.isRequired,\n  rentedBike: PropTypes.bool.isRequired,\n  rentedCar: PropTypes.bool.isRequired,\n  rentedVehicle: PropTypes.bool.isRequired,\n  route: PropTypes.string,\n  routeId: PropTypes.string,\n  routeType: PropTypes.number,\n  serviceDate: PropTypes.string,\n  startTime: PropTypes.number.isRequired,\n  steps: stepsType.isRequired,\n  tncData: PropTypes.shape({\n    company: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired,\n    displayName: PropTypes.string.isRequired,\n    estimatedArrival: PropTypes.number.isRequired,\n    maxCost: PropTypes.number.isRequired,\n    minCost: PropTypes.number.isRequired,\n    productId: PropTypes.string.isRequired,\n    travelDuration: PropTypes.number.isRequired\n  }),\n  to: placeType.isRequired,\n  transitLeg: PropTypes.bool.isRequired,\n  tripBlockId: PropTypes.string,\n  tripId: PropTypes.string\n});\n\nconst moneyType = PropTypes.shape({\n  cents: PropTypes.number.isRequired,\n  currency: PropTypes.shape({\n    defaultFractionDigits: PropTypes.number.isRequired,\n    currencyCode: PropTypes.string.isRequired,\n    symbol: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired\n  }).isRequired\n});\n\n/**\n * Represents the fare component of an itinerary of an OTP plan response. See\n * detailed documentation in OTP webservice documentation here:\n * http://otp-docs.ibi-transit.com/api/json_Fare.html\n *\n * NOTE: so far the fare includes ONLY a fare encountered on public transit and\n * not any bike rental or TNC rental fees.\n */\nexport const fareType = PropTypes.shape({\n  details: PropTypes.objectOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        fareId: PropTypes.oneOfType([PropTypes.string, feedScopedIdType])\n          .isRequired,\n        price: moneyType.isRequired,\n        routes: PropTypes.arrayOf(\n          PropTypes.oneOfType([PropTypes.string, feedScopedIdType])\n        ).isRequired\n      })\n    ).isRequired\n  ),\n  fare: PropTypes.objectOf(moneyType)\n});\n\n/**\n * Represents an itinerary of an OTP plan response. See detailed documentation\n * in OTP webservice documentation here:\n * http://otp-docs.ibi-transit.com/api/json_Itinerary.html\n */\nexport const itineraryType = PropTypes.shape({\n  duration: PropTypes.number.isRequired,\n  elevationGained: PropTypes.number.isRequired,\n  elevationLost: PropTypes.number.isRequired,\n  endTime: PropTypes.number.isRequired,\n  fare: fareType,\n  legs: PropTypes.arrayOf(legType).isRequired,\n  startTime: PropTypes.number.isRequired,\n  tooSloped: PropTypes.bool,\n  transfers: PropTypes.number.isRequired,\n  transitTime: PropTypes.number.isRequired,\n  waitingTime: PropTypes.number.isRequired,\n  walkDistance: PropTypes.number.isRequired,\n  walkLimitExceeded: PropTypes.bool.isRequired,\n  walkTime: PropTypes.number.isRequired\n});\n\n/**\n * Used to model a location that is used in planning a trip.\n */\nexport const locationType = PropTypes.shape({\n  lat: PropTypes.number.isRequired,\n  lon: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  /**\n   * This is only used location that a user has saved. Can be either:\n   * \"home\" or \"work\"\n   */\n  type: PropTypes.string\n});\n\n/**\n * Used to help display the time of day within the context of a particular itinerary.\n */\nexport const timeOptionsType = PropTypes.shape({\n  /**\n   * A format string template to be used to display a date using moment.js\n   */\n  format: PropTypes.string,\n  /*\n   * The timezone offset in milliseconds if any should be added. This is\n   * typically calculated using the itinerary.js#getTimeZoneOffset function.\n   */\n  offset: PropTypes.number\n});\n\n/**\n * This models data about a stop and it's associated routes that is obtained\n * from a transit index API.\n */\nexport const transitIndexStopWithRoutes = PropTypes.shape({\n  /**\n   * The stop code if the stop has one\n   */\n  code: PropTypes.string,\n  /**\n   * The distance from the user to the stop in meters\n   */\n  dist: PropTypes.number,\n  lat: PropTypes.number,\n  lon: PropTypes.number,\n  name: PropTypes.string,\n  routes: PropTypes.arrayOf(\n    PropTypes.shape({\n      longName: PropTypes.string,\n      shortName: PropTypes.string\n    })\n  )\n});\n\nexport const stopLayerStopType = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  lat: PropTypes.number.isRequired,\n  lon: PropTypes.number.isRequired\n});\n\nconst transitivePlaceType = PropTypes.shape({\n  place_id: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired\n});\n\nexport const transitiveDataType = PropTypes.shape({\n  journeys: PropTypes.arrayOf(\n    PropTypes.shape({\n      journey_id: PropTypes.string.isRequired,\n      journey_name: PropTypes.string.isRequired,\n      segments: PropTypes.arrayOf(\n        PropTypes.shape({\n          arc: PropTypes.bool,\n          from: transitivePlaceType,\n          patterns: PropTypes.arrayOf(\n            PropTypes.shape({\n              pattern_id: PropTypes.string.isRequired,\n              from_stop_index: PropTypes.number.isRequired,\n              to_stop_index: PropTypes.number.isRequired\n            })\n          ),\n          streetEdges: PropTypes.arrayOf(PropTypes.number),\n          to: transitivePlaceType,\n          type: PropTypes.string.isRequired\n        })\n      ).isRequired\n    })\n  ).isRequired,\n  patterns: PropTypes.arrayOf(\n    PropTypes.shape({\n      pattern_id: PropTypes.string.isRequired,\n      pattern_name: PropTypes.string.isRequired,\n      route_id: PropTypes.string.isRequired,\n      stops: PropTypes.arrayOf(\n        PropTypes.shape({\n          geometry: PropTypes.string,\n          stop_id: PropTypes.string.isRequired\n        })\n      ).isRequired\n    })\n  ).isRequired,\n  places: PropTypes.arrayOf(\n    PropTypes.shape({\n      place_id: PropTypes.string.isRequired,\n      place_lat: PropTypes.number.isRequired,\n      place_lon: PropTypes.number.isRequired,\n      place_name: PropTypes.string\n    })\n  ).isRequired,\n  routes: PropTypes.arrayOf(\n    PropTypes.shape({\n      agency_id: PropTypes.string.isRequired,\n      route_id: PropTypes.string.isRequired,\n      route_short_name: PropTypes.string.isRequired,\n      route_long_name: PropTypes.string.isRequired,\n      route_type: PropTypes.number.isRequired,\n      route_color: PropTypes.string\n    })\n  ).isRequired,\n  stops: PropTypes.arrayOf(\n    PropTypes.shape({\n      stop_id: PropTypes.string.isRequired,\n      stop_name: PropTypes.string.isRequired,\n      stop_lat: PropTypes.number.isRequired,\n      stop_lon: PropTypes.number.isRequired\n    })\n  ).isRequired,\n  streetEdges: PropTypes.arrayOf(\n    PropTypes.shape({\n      edge_id: PropTypes.number.isRequired,\n      geometry: encodedPolylineType\n    })\n  ).isRequired\n});\n\n/**\n * This models data about a vehicle rental station as obtained from various\n * vehicle rental API endpoints from OTP.\n */\nexport const stationType = PropTypes.shape({\n  bikesAvailable: PropTypes.number,\n  id: PropTypes.string.isRequired,\n  isFloatingBike: PropTypes.bool,\n  isFloatingCar: PropTypes.bool,\n  isFloatingVehicle: PropTypes.bool,\n  name: PropTypes.string,\n  networks: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  spacesAvailable: PropTypes.number,\n  x: PropTypes.number.isRequired,\n  y: PropTypes.number.isRequired\n});\n\n/**\n * Utility function to help create chained validators\n * per https://www.ian-thomas.net/custom-proptype-validation-with-react/\n * @param {*} validator The validator to use.\n */\nexport function createChainableTypeChecker(validator) {\n  function checkType(isRequired, props, propName, componentName, location) {\n    componentName = componentName || \"ANONYMOUS\";\n    if (props[propName] == null) {\n      if (isRequired) {\n        const locationName = ReactPropTypeLocationNames[location];\n        return new Error(\n          `Required '${locationName}/${propName}' was not specified in '${componentName}'.`\n        );\n      }\n      return null;\n    }\n    return validator(props, propName, componentName, location);\n  }\n\n  const chainedCheckType = checkType.bind(null, false);\n  chainedCheckType.isRequired = checkType.bind(null, true);\n\n  return chainedCheckType;\n}\n\nexport const latlngType = createChainableTypeChecker((props, propName) => {\n  // Source: https://reactjs.org/docs/typechecking-with-proptypes.html#react.proptypes\n  if (!isValidLatLng(props[propName])) {\n    return new Error(`${propName} needs to be a [lat, lng] array`);\n  }\n  return null;\n});\n\nexport const modeOptionType = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  selected: PropTypes.bool,\n  showTitle: PropTypes.bool,\n  text: PropTypes.node.isRequired,\n  title: PropTypes.string\n});\n\nexport const modeSelectorOptionsType = PropTypes.shape({\n  primary: modeOptionType,\n  secondary: PropTypes.arrayOf(modeOptionType),\n  tertiary: PropTypes.arrayOf(modeOptionType)\n});\n\nexport const configuredModeType = PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.shape({\n    mode: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    company: PropTypes.string\n  })\n]);\n\nexport const configuredModesType = PropTypes.shape({\n  transitModes: PropTypes.arrayOf(configuredModeType),\n  accessModes: PropTypes.arrayOf(configuredModeType),\n  exclusiveModes: PropTypes.arrayOf(configuredModeType),\n  bicycleModes: PropTypes.arrayOf(configuredModeType),\n  micromobilityModes: PropTypes.arrayOf(configuredModeType)\n});\n\nexport const configuredCompanyType = PropTypes.shape({\n  /**\n   * The id of the company. This is typically in all-caps.\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * A human readable text value that can be displayed to users.\n   */\n  label: PropTypes.string.isRequired,\n  /**\n   * A comma-separated list of applicable modes of travel that the company\n   * offers.\n   */\n  modes: PropTypes.string.isRequired\n});\n\n/**\n * Depending on the geocoder that is used, more properties than just the `label`\n * property might be provided by the geocoder. For example, with the Pelias\n * geocoder, properties such as `id`, `layer`, `source` are also included.\n */\nexport const geocodedFeatureType = PropTypes.shape({\n  geometry: PropTypes.shape({\n    coordinates: PropTypes.arrayOf(PropTypes.number.isRequired).isRequired,\n    type: PropTypes.string.isRequired\n  }).isRequired,\n  properties: PropTypes.shape({\n    label: PropTypes.string.isRequired\n  }).isRequired\n});\n\nexport const userLocationType = PropTypes.shape({\n  id: PropTypes.string,\n  /**\n   * Can be either 'home', 'work', or null\n   */\n  icon: PropTypes.string,\n  lat: PropTypes.number.isRequired,\n  lon: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  /**\n   * This represents the last time that this location was selected in a\n   * search\n   */\n  timestamp: PropTypes.number,\n  /**\n   * One of: 'home', 'work', 'stop' or 'recent'\n   */\n  type: PropTypes.string.isRequired\n});\n"]}