{"version":3,"sources":["index.js"],"names":["iconSize","FromToLocationPicker","Component","location","onFromClick","setLocation","props","locationType","reverseGeocode","onToClick","render","fromText","showIcons","toText","propTypes","PropTypes","string","func","bool","defaultProps"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;AAEA,MAAMA,QAAQ,GAAG,OAAjB;;AAEA,MAAMC,oBAAN,SAAmCC,gBAAnC,CAA6C;AAAA;AAAA;;AAAA,yCAC7B,MAAM;AAClB,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA,WAAZ;AAAyBC,QAAAA;AAAzB,UAAyC,KAAKC,KAApD;;AACA,UAAIF,WAAJ,EAAiB;AACfA,QAAAA,WAAW;AACX;AACD;;AACDC,MAAAA,WAAW,CAAC;AACVF,QAAAA,QADU;AAEVI,QAAAA,YAAY,EAAE,MAFJ;AAGVC,QAAAA,cAAc,EAAE;AAHN,OAAD,CAAX;AAKD,KAZ0C;;AAAA,uCAc/B,MAAM;AAChB,YAAM;AAAEL,QAAAA,QAAF;AAAYM,QAAAA,SAAZ;AAAuBJ,QAAAA;AAAvB,UAAuC,KAAKC,KAAlD;;AACA,UAAIG,SAAJ,EAAe;AACbA,QAAAA,SAAS;AACT;AACD;;AACDJ,MAAAA,WAAW,CAAC;AACVF,QAAAA,QADU;AAEVI,QAAAA,YAAY,EAAE,IAFJ;AAGVC,QAAAA,cAAc,EAAE;AAHN,OAAD,CAAX;AAKD,KAzB0C;AAAA;;AA2B3CE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,SAAZ;AAAuBC,MAAAA;AAAvB,QAAkC,KAAKP,KAA7C;AACA,wBACE,6BAAC,wBAAD,qBACE,6BAAC,0BAAD,QACGM,SAAS,iBAAI,6BAAC,qBAAD;AAAc,MAAA,IAAI,EAAC,MAAnB;AAA0B,MAAA,IAAI,EAAEZ;AAAhC,MADhB,eAEE,6BAAC,cAAD;AAAQ,MAAA,OAAO,EAAE,KAAKI;AAAtB,OAAoCO,QAApC,CAFF,CADF,eAKE,6BAAC,0BAAD,QACGC,SAAS,iBAAI,6BAAC,qBAAD;AAAc,MAAA,IAAI,EAAC,IAAnB;AAAwB,MAAA,IAAI,EAAEZ;AAA9B,MADhB,eAEE,6BAAC,cAAD;AAAQ,MAAA,OAAO,EAAE,KAAKS;AAAtB,OAAkCI,MAAlC,CAFF,CALF,CADF;AAYD;;AAzC0C;;AA4C7CZ,oBAAoB,CAACa,SAArB,GAAiC;AAC/B;AACF;AACA;AACEH,EAAAA,QAAQ,EAAEI,mBAAUC,MAJW;;AAK/B;AACF;AACA;AACA;AACEb,EAAAA,QAAQ,EAAEI,mBATqB;;AAU/B;AACF;AACA;AACEH,EAAAA,WAAW,EAAEW,mBAAUE,IAbQ;;AAc/B;AACF;AACA;AACER,EAAAA,SAAS,EAAEM,mBAAUE,IAjBU;;AAkB/B;AACF;AACA;AACEJ,EAAAA,MAAM,EAAEE,mBAAUC,MArBa;;AAsB/B;AACF;AACA;AACA;AACA;AACA;AACA;AACEX,EAAAA,WAAW,EAAEU,mBAAUE,IA7BQ;;AA8B/B;AACF;AACA;AACEL,EAAAA,SAAS,EAAEG,mBAAUG;AAjCU,CAAjC;AAoCAjB,oBAAoB,CAACkB,YAArB,GAAoC;AAClCR,EAAAA,QAAQ,EAAE,eADwB;AAElCR,EAAAA,QAAQ,EAAE,IAFwB;AAGlCC,EAAAA,WAAW,EAAE,IAHqB;AAIlCK,EAAAA,SAAS,EAAE,IAJuB;AAKlCJ,EAAAA,WAAW,EAAE,IALqB;AAMlCO,EAAAA,SAAS,EAAE,IANuB;AAOlCC,EAAAA,MAAM,EAAE;AAP0B,CAApC;eAUeZ,oB","sourcesContent":["import { locationType } from \"@opentripplanner/core-utils/lib/types\";\nimport LocationIcon from \"@opentripplanner/location-icon\";\nimport PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\n\nimport { LocationPickerSpan, Button, FromToPickerSpan } from \"./styled\";\n\nconst iconSize = \"0.9em\";\n\nclass FromToLocationPicker extends Component {\n  onFromClick = () => {\n    const { location, onFromClick, setLocation } = this.props;\n    if (onFromClick) {\n      onFromClick();\n      return;\n    }\n    setLocation({\n      location,\n      locationType: \"from\",\n      reverseGeocode: false\n    });\n  };\n\n  onToClick = () => {\n    const { location, onToClick, setLocation } = this.props;\n    if (onToClick) {\n      onToClick();\n      return;\n    }\n    setLocation({\n      location,\n      locationType: \"to\",\n      reverseGeocode: false\n    });\n  };\n\n  render() {\n    const { fromText, showIcons, toText } = this.props;\n    return (\n      <FromToPickerSpan>\n        <LocationPickerSpan>\n          {showIcons && <LocationIcon type=\"from\" size={iconSize} />}\n          <Button onClick={this.onFromClick}>{fromText}</Button>\n        </LocationPickerSpan>\n        <LocationPickerSpan>\n          {showIcons && <LocationIcon type=\"to\" size={iconSize} />}\n          <Button onClick={this.onToClick}>{toText}</Button>\n        </LocationPickerSpan>\n      </FromToPickerSpan>\n    );\n  }\n}\n\nFromToLocationPicker.propTypes = {\n  /**\n   * The text to display on the \"from\" button for setting the origin of a trip.\n   */\n  fromText: PropTypes.string,\n  /**\n   * A specific location to associate with this. This is only used when combined\n   * with the setLocation prop.\n   */\n  location: locationType,\n  /**\n   * Triggered when the user clicks on the \"from\" button.\n   */\n  onFromClick: PropTypes.func,\n  /**\n   * Triggered when the user clicks on the \"to\" button.\n   */\n  onToClick: PropTypes.func,\n  /**\n   * The text to display on the \"to\" button for setting the destination of a trip.\n   */\n  toText: PropTypes.string,\n  /**\n   * Triggered when the user clicks either the \"from\" or \"to\" button and there\n   * are no from/to specific handler functions defined as props.\n   *\n   * Passes an argument as follows:\n   * { locationType: \"from/to\", location, reverseGeocode: false }\n   */\n  setLocation: PropTypes.func,\n  /**\n   * Determines whether icons are shown on the \"from\" and \"to\" buttons.\n   */\n  showIcons: PropTypes.bool\n};\n\nFromToLocationPicker.defaultProps = {\n  fromText: \"$_from_here_$\",\n  location: null,\n  onFromClick: null,\n  onToClick: null,\n  setLocation: null,\n  showIcons: true,\n  toText: \"$_to_here_$\"\n};\n\nexport default FromToLocationPicker;\n"]}