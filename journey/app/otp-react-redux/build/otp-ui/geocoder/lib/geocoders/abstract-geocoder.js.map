{"version":3,"sources":["abstract-geocoder.js"],"names":["Object","defineProperty","exports","value","default","_lonlat","_interopRequireDefault","require","obj","__esModule","Geocoder","constructor","geocoderApi","geocoderConfig","api","autocomplete","query","getAutocompleteQuery","then","rewriteAutocompleteResponse","getLocationFromGeocodedFeature","feature","location","fromCoordinates","geometry","coordinates","name","properties","label","rawGeocodedFeature","Promise","resolve","reverse","getReverseQuery","rewriteReverseResponse","search","getSearchQuery","rewriteSearchResponse","apiKey","baseUrl","boundary","focusPoint","options","url","undefined","format","response"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,OAAO,GAAGC,sBAAsB,CAACC,OAAO,CAAC,kBAAD,CAAR,CAApC;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEJ,IAAAA,OAAO,EAAEI;AAAX,GAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,QAAN,CAAe;AACbC,EAAAA,WAAW,CAACC,WAAD,EAAcC,cAAd,EAA8B;AACvC,SAAKC,GAAL,GAAWF,WAAX;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACD;AACD;AACF;AACA;AACA;;;AAGEE,EAAAA,YAAY,CAACC,KAAD,EAAQ;AAClB,WAAO,KAAKF,GAAL,CAASC,YAAT,CAAsB,KAAKE,oBAAL,CAA0BD,KAA1B,CAAtB,EAAwDE,IAAxD,CAA6D,KAAKC,2BAAlE,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGEC,EAAAA,8BAA8B,CAACC,OAAD,EAAU;AACtC,UAAMC,QAAQ,GAAGjB,OAAO,CAACD,OAAR,CAAgBmB,eAAhB,CAAgCF,OAAO,CAACG,QAAR,CAAiBC,WAAjD,CAAjB;;AAEAH,IAAAA,QAAQ,CAACI,IAAT,GAAgBL,OAAO,CAACM,UAAR,CAAmBC,KAAnC;AACAN,IAAAA,QAAQ,CAACO,kBAAT,GAA8BR,OAA9B;AACA,WAAOS,OAAO,CAACC,OAAR,CAAgBT,QAAhB,CAAP;AACD;AACD;AACF;AACA;AACA;;;AAGEU,EAAAA,OAAO,CAAChB,KAAD,EAAQ;AACb,WAAO,KAAKF,GAAL,CAASkB,OAAT,CAAiB,KAAKC,eAAL,CAAqBjB,KAArB,CAAjB,EAA8CE,IAA9C,CAAmD,KAAKgB,sBAAxD,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;;;AAGEC,EAAAA,MAAM,CAACnB,KAAD,EAAQ;AACZ,WAAO,KAAKF,GAAL,CAASqB,MAAT,CAAgB,KAAKC,cAAL,CAAoBpB,KAApB,CAAhB,EAA4CE,IAA5C,CAAiD,KAAKmB,qBAAtD,CAAP;AACD;AACD;AACF;AACA;;;AAGEpB,EAAAA,oBAAoB,CAACD,KAAD,EAAQ;AAC1B,UAAM;AACJsB,MAAAA,MADI;AAEJC,MAAAA,OAFI;AAGJC,MAAAA,QAHI;AAIJC,MAAAA,UAJI;AAKJC,MAAAA;AALI,QAMF,KAAK7B,cANT;AAOA,WAAO;AACLyB,MAAAA,MADK;AAELE,MAAAA,QAFK;AAGLC,MAAAA,UAHK;AAILC,MAAAA,OAJK;AAKLC,MAAAA,GAAG,EAAEJ,OAAO,GAAI,GAAEA,OAAQ,eAAd,GAA+BK,SALtC;AAML,SAAG5B;AANE,KAAP;AAQD;AACD;AACF;AACA;;;AAGEiB,EAAAA,eAAe,CAACjB,KAAD,EAAQ;AACrB,UAAM;AACJsB,MAAAA,MADI;AAEJC,MAAAA,OAFI;AAGJG,MAAAA;AAHI,QAIF,KAAK7B,cAJT;AAKA,WAAO;AACLyB,MAAAA,MADK;AAELO,MAAAA,MAAM,EAAE,IAFH;AAGLH,MAAAA,OAHK;AAILC,MAAAA,GAAG,EAAEJ,OAAO,GAAI,GAAEA,OAAQ,UAAd,GAA0BK,SAJjC;AAKL,SAAG5B;AALE,KAAP;AAOD;AACD;AACF;AACA;;;AAGEoB,EAAAA,cAAc,CAACpB,KAAD,EAAQ;AACpB,UAAM;AACJsB,MAAAA,MADI;AAEJC,MAAAA,OAFI;AAGJC,MAAAA,QAHI;AAIJC,MAAAA,UAJI;AAKJC,MAAAA;AALI,QAMF,KAAK7B,cANT;AAOA,WAAO;AACLyB,MAAAA,MADK;AAELE,MAAAA,QAFK;AAGLC,MAAAA,UAHK;AAILC,MAAAA,OAJK;AAKLC,MAAAA,GAAG,EAAEJ,OAAO,GAAI,GAAEA,OAAQ,SAAd,GAAyBK,SALhC;AAMLC,MAAAA,MAAM,EAAE,KANH;AAOL;AACA,SAAG7B;AARE,KAAP;AAUD;AACD;AACF;AACA;;;AAGEG,EAAAA,2BAA2B,CAAC2B,QAAD,EAAW;AACpC,WAAOA,QAAP;AACD;AACD;AACF;AACA;;;AAGEZ,EAAAA,sBAAsB,CAACY,QAAD,EAAW;AAC/B,WAAOA,QAAP;AACD;AACD;AACF;AACA;;;AAGET,EAAAA,qBAAqB,CAACS,QAAD,EAAW;AAC9B,WAAOA,QAAP;AACD;;AA3IY;;AA+If5C,OAAO,CAACE,OAAR,GAAkBM,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lonlat = _interopRequireDefault(require(\"@conveyal/lonlat\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Create customized geocoder functions given a certain geocoding API, the\n * config for the geocoder and response rewrite functions specific to this\n * application. Any geocoder api that is added is expected to have an API that\n * behaves very closely to https://github.com/conveyal/isomorphic-mapzen-search\n */\nclass Geocoder {\n  constructor(geocoderApi, geocoderConfig) {\n    this.api = geocoderApi;\n    this.geocoderConfig = geocoderConfig;\n  }\n  /**\n   * Perform an autocomplete query. Eg, using partial text of a possible\n   * address or POI, attempt to find possible matches.\n   */\n\n\n  autocomplete(query) {\n    return this.api.autocomplete(this.getAutocompleteQuery(query)).then(this.rewriteAutocompleteResponse);\n  }\n  /**\n   * Get an application-specific data structure from a given feature. The\n   * feature is either the result of an autocomplete or a search query. This\n   * function returns a Promise because sometimes an asynchronous action\n   * needs to be taken to translate a feature into a location. For example,\n   * the ArcGIS autocomplete service returns results that lack full address\n   * data and GPS and it is expected that an extra call to the `search` API is\n   * done to obtain that detailed data.\n   */\n\n\n  getLocationFromGeocodedFeature(feature) {\n    const location = _lonlat.default.fromCoordinates(feature.geometry.coordinates);\n\n    location.name = feature.properties.label;\n    location.rawGeocodedFeature = feature;\n    return Promise.resolve(location);\n  }\n  /**\n   * Do a reverse-geocode. ie get address information and attributes given a\n   * GPS coordiante.\n   */\n\n\n  reverse(query) {\n    return this.api.reverse(this.getReverseQuery(query)).then(this.rewriteReverseResponse);\n  }\n  /**\n   * Perform a search query. A search query is different from autocomplete in\n   * that it is assumed that the text provided is more or less a complete\n   * well-fromatted address.\n   */\n\n\n  search(query) {\n    return this.api.search(this.getSearchQuery(query)).then(this.rewriteSearchResponse);\n  }\n  /**\n   * Default autocomplete query generator\n   */\n\n\n  getAutocompleteQuery(query) {\n    const {\n      apiKey,\n      baseUrl,\n      boundary,\n      focusPoint,\n      options\n    } = this.geocoderConfig;\n    return {\n      apiKey,\n      boundary,\n      focusPoint,\n      options,\n      url: baseUrl ? `${baseUrl}/autocomplete` : undefined,\n      ...query\n    };\n  }\n  /**\n   * Default reverse query generator\n   */\n\n\n  getReverseQuery(query) {\n    const {\n      apiKey,\n      baseUrl,\n      options\n    } = this.geocoderConfig;\n    return {\n      apiKey,\n      format: true,\n      options,\n      url: baseUrl ? `${baseUrl}/reverse` : undefined,\n      ...query\n    };\n  }\n  /**\n   * Default search query generator.\n   */\n\n\n  getSearchQuery(query) {\n    const {\n      apiKey,\n      baseUrl,\n      boundary,\n      focusPoint,\n      options\n    } = this.geocoderConfig;\n    return {\n      apiKey,\n      boundary,\n      focusPoint,\n      options,\n      url: baseUrl ? `${baseUrl}/search` : undefined,\n      format: false,\n      // keep as returned GeoJSON,\n      ...query\n    };\n  }\n  /**\n   * Default rewriter for autocomplete responses\n   */\n\n\n  rewriteAutocompleteResponse(response) {\n    return response;\n  }\n  /**\n   * Default rewriter for reverse responses\n   */\n\n\n  rewriteReverseResponse(response) {\n    return response;\n  }\n  /**\n   * Default rewriter for search responses\n   */\n\n\n  rewriteSearchResponse(response) {\n    return response;\n  }\n\n}\n\nexports.default = Geocoder;"]}