{"version":3,"sources":["pelias.js"],"names":["Object","defineProperty","exports","value","default","_abstractGeocoder","_interopRequireDefault","require","obj","__esModule","PeliasGeocoder","getAutocompleteQuery","query","apiKey","baseUrl","boundary","focusPoint","options","sources","geocoderConfig","url","undefined","getSearchQuery","format","rewriteReverseResponse","response","lat","lon","isomorphicMapzenSearchQuery","firstFeature","name","label","rawGeocodedFeature"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,iBAAiB,GAAGC,sBAAsB,CAACC,OAAO,CAAC,qBAAD,CAAR,CAA9C;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEJ,IAAAA,OAAO,EAAEI;AAAX,GAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,cAAN,SAA6BL,iBAAiB,CAACD,OAA/C,CAAuD;AACrD;AACF;AACA;AACA;AACEO,EAAAA,oBAAoB,CAACC,KAAD,EAAQ;AAC1B,UAAM;AACJC,MAAAA,MADI;AAEJC,MAAAA,OAFI;AAGJC,MAAAA,QAHI;AAIJC,MAAAA,UAJI;AAKJC,MAAAA,OALI;AAMJC,MAAAA;AANI,QAOF,KAAKC,cAPT;AAQA,WAAO;AACLN,MAAAA,MADK;AAELE,MAAAA,QAFK;AAGLC,MAAAA,UAHK;AAILC,MAAAA,OAJK;AAKL;AACA;AACA;AACAC,MAAAA,OAAO,EAAEA,OAAO,IAAI,IARf;AASLE,MAAAA,GAAG,EAAEN,OAAO,GAAI,GAAEA,OAAQ,eAAd,GAA+BO,SATtC;AAUL,SAAGT;AAVE,KAAP;AAYD;AACD;AACF;AACA;AACA;;;AAGEU,EAAAA,cAAc,CAACV,KAAD,EAAQ;AACpB,UAAM;AACJC,MAAAA,MADI;AAEJC,MAAAA,OAFI;AAGJC,MAAAA,QAHI;AAIJC,MAAAA,UAJI;AAKJC,MAAAA,OALI;AAMJC,MAAAA;AANI,QAOF,KAAKC,cAPT;AAQA,WAAO;AACLN,MAAAA,MADK;AAELE,MAAAA,QAFK;AAGLC,MAAAA,UAHK;AAILC,MAAAA,OAJK;AAKL;AACA;AACA;AACAC,MAAAA,OAAO,EAAEA,OAAO,IAAI,IARf;AASLE,MAAAA,GAAG,EAAEN,OAAO,GAAI,GAAEA,OAAQ,SAAd,GAAyBO,SAThC;AAULE,MAAAA,MAAM,EAAE,KAVH;AAWL;AACA,SAAGX;AAZE,KAAP;AAcD;AACD;AACF;AACA;AACA;;;AAGEY,EAAAA,sBAAsB,CAACC,QAAD,EAAW;AAC/B,UAAM;AACJ,mBAAaC,GADT;AAEJ,mBAAaC;AAFT,QAGFF,QAAQ,CAACG,2BAHb;AAIA,UAAMC,YAAY,GAAGJ,QAAQ,CAAC,CAAD,CAA7B;AACA,WAAO;AACLC,MAAAA,GADK;AAELC,MAAAA,GAFK;AAGLG,MAAAA,IAAI,EAAED,YAAY,CAACE,KAHd;AAILC,MAAAA,kBAAkB,EAAEH;AAJf,KAAP;AAMD;;AA3EoD;;AA+EvD3B,OAAO,CAACE,OAAR,GAAkBM,cAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _abstractGeocoder = _interopRequireDefault(require(\"./abstract-geocoder\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Geocoder implementation for the Pelias geocoder.\n * See https://pelias.io\n *\n * @extends Geocoder\n */\nclass PeliasGeocoder extends _abstractGeocoder.default {\n  /**\n   * Generate an autocomplete query specifically for the Pelias API. The\n   * `sources` parameter is a Pelias-specific option.\n   */\n  getAutocompleteQuery(query) {\n    const {\n      apiKey,\n      baseUrl,\n      boundary,\n      focusPoint,\n      options,\n      sources\n    } = this.geocoderConfig;\n    return {\n      apiKey,\n      boundary,\n      focusPoint,\n      options,\n      // explicitly send over null for sources if provided sources is not truthy\n      // in order to avoid default isomorphic-mapzen-search sources form being\n      // applied\n      sources: sources || null,\n      url: baseUrl ? `${baseUrl}/autocomplete` : undefined,\n      ...query\n    };\n  }\n  /**\n   * Generate a search query specifically for the Pelias API. The\n   * `sources` parameter is a Pelias-specific option.\n   */\n\n\n  getSearchQuery(query) {\n    const {\n      apiKey,\n      baseUrl,\n      boundary,\n      focusPoint,\n      options,\n      sources\n    } = this.geocoderConfig;\n    return {\n      apiKey,\n      boundary,\n      focusPoint,\n      options,\n      // explicitly send over null for sources if provided sources is not truthy\n      // in order to avoid default isomorphic-mapzen-search sources form being\n      // applied\n      sources: sources || null,\n      url: baseUrl ? `${baseUrl}/search` : undefined,\n      format: false,\n      // keep as returned GeoJSON,\n      ...query\n    };\n  }\n  /**\n   * Rewrite the response into an application-specific data format using the\n   * first feature returned from the geocoder.\n   */\n\n\n  rewriteReverseResponse(response) {\n    const {\n      \"point.lat\": lat,\n      \"point.lon\": lon\n    } = response.isomorphicMapzenSearchQuery;\n    const firstFeature = response[0];\n    return {\n      lat,\n      lon,\n      name: firstFeature.label,\n      rawGeocodedFeature: firstFeature\n    };\n  }\n\n}\n\nexports.default = PeliasGeocoder;"]}