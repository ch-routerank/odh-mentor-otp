{"version":3,"sources":["index.test.js"],"names":["_path","_interopRequireDefault","require","_nock","_","_pelias","obj","__esModule","default","mockResponsePath","geocoder","file","join","__dirname","describe","geocoders","type","apiKey","baseUrl","undefined","baseArcGisPath","get","query","replyWithFile","basePeliasPath","forEach","geocoderType","it","result","autocomplete","text","expect","toMatchSnapshot","search","reverse","point","lat","lon","mockFeature","magicKey","properties","label","geometry","coordinates","Error","getLocationFromGeocodedFeature","mockSources","mockPeliasAPI","sources","not","toBe","anything","Promise","resolve","pelias"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,sBAAsB,CAACC,OAAO,CAAC,MAAD,CAAR,CAAlC;;AAEA,IAAIC,KAAK,GAAGF,sBAAsB,CAACC,OAAO,CAAC,MAAD,CAAR,CAAlC;;AAEA,IAAIE,CAAC,GAAGH,sBAAsB,CAACC,OAAO,CAAC,GAAD,CAAR,CAA9B;;AAEA,IAAIG,OAAO,GAAGJ,sBAAsB,CAACC,OAAO,CAAC,oBAAD,CAAR,CAApC;;AAEA,SAASD,sBAAT,CAAgCK,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;;AAE/F,SAASG,gBAAT,CAA0BC,QAA1B,EAAoCC,IAApC,EAA0C;AACxC,SAAOX,KAAK,CAACQ,OAAN,CAAcI,IAAd,CAAmBC,SAAnB,EAA8B,eAA9B,EAA+CH,QAA/C,EAAyDC,IAAzD,CAAP;AACD;;AAEDG,QAAQ,CAAC,UAAD,EAAa,MAAM;AACzB,QAAMC,SAAS,GAAG,CAAC;AACjBC,IAAAA,IAAI,EAAE;AADW,GAAD,EAEf;AACDC,IAAAA,MAAM,EAAE,kBADP;AAEDC,IAAAA,OAAO,EAAE,oCAFR;AAGDF,IAAAA,IAAI,EAAE;AAHL,GAFe,EAMf;AACH;AACAG,EAAAA,SARkB,CAAlB,CADyB,CASb;;AAEZ,QAAMC,cAAc,GAAG,4CAAvB;AACA,GAAC,GAAGjB,KAAK,CAACK,OAAV,EAAmB,4BAAnB,EAAiD;AAAjD,GACCa,GADD,CACM,GAAED,cAAe,SADvB,EACiCE,KADjC,CACuC,IADvC,EAC6CC,aAD7C,CAC2D,GAD3D,EACgEd,gBAAgB,CAAC,QAAD,EAAW,uBAAX,CADhF,EACqH;AADrH,GAECY,GAFD,CAEM,GAAED,cAAe,gBAFvB,EAEwCE,KAFxC,CAE8C,IAF9C,EAEoDC,aAFpD,CAEkE,GAFlE,EAEuEd,gBAAgB,CAAC,QAAD,EAAW,8BAAX,CAFvF,EAEmI;AAFnI,GAGCY,GAHD,CAGM,GAAED,cAAe,uBAHvB,EAG+CE,KAH/C,CAGqD,IAHrD,EAG2DC,aAH3D,CAGyE,GAHzE,EAG8Ed,gBAAgB,CAAC,QAAD,EAAW,qCAAX,CAH9F,EAGiJ;AAHjJ,GAICY,GAJD,CAIM,GAAED,cAAe,uBAJvB,EAI+CE,KAJ/C,CAIqD,IAJrD,EAI2DC,aAJ3D,CAIyE,GAJzE,EAI8Ed,gBAAgB,CAAC,QAAD,EAAW,qCAAX,CAJ9F,EAZyB,CAgByH;;AAElJ,QAAMe,cAAc,GAAG,aAAvB;AACA,GAAC,GAAGrB,KAAK,CAACK,OAAV,EAAmB,0BAAnB,EAA+C;AAA/C,GACCa,GADD,CACM,GAAEG,cAAe,cADvB,EACsCF,KADtC,CAC4C,IAD5C,EACkDC,aADlD,CACgE,GADhE,EACqEd,gBAAgB,CAAC,QAAD,EAAW,4BAAX,CADrF,EAC+H;AAD/H,GAECY,GAFD,CAEM,GAAEG,cAAe,QAFvB,EAEgCF,KAFhC,CAEsC,IAFtC,EAE4CC,aAF5C,CAE0D,GAF1D,EAE+Dd,gBAAgB,CAAC,QAAD,EAAW,sBAAX,CAF/E,EAEmH;AAFnH,GAGCY,GAHD,CAGM,GAAEG,cAAe,SAHvB,EAGiCF,KAHjC,CAGuC,IAHvC,EAG6CC,aAH7C,CAG2D,GAH3D,EAGgEd,gBAAgB,CAAC,QAAD,EAAW,uBAAX,CAHhF;AAIAM,EAAAA,SAAS,CAACU,OAAV,CAAkBf,QAAQ,IAAI;AAC5B,UAAMgB,YAAY,GAAGhB,QAAQ,GAAGA,QAAQ,CAACM,IAAZ,GAAmB,eAAhD,CAD4B,CACqC;;AAEjEF,IAAAA,QAAQ,CAAE,GAAEY,YAAa,EAAjB,EAAoB,MAAM;AAChCC,MAAAA,EAAE,CAAC,gCAAD,EAAmC,YAAY;AAC/C,cAAMC,MAAM,GAAG,MAAM,CAAC,GAAGxB,CAAC,CAACI,OAAN,EAAeE,QAAf,EAAyBmB,YAAzB,CAAsC;AACzDC,UAAAA,IAAI,EAAE;AADmD,SAAtC,CAArB;AAGAC,QAAAA,MAAM,CAACH,MAAD,CAAN,CAAeI,eAAf;AACD,OALC,CAAF;AAMAL,MAAAA,EAAE,CAAC,0BAAD,EAA6B,YAAY;AACzC,cAAMC,MAAM,GAAG,MAAM,CAAC,GAAGxB,CAAC,CAACI,OAAN,EAAeE,QAAf,EAAyBuB,MAAzB,CAAgC;AACnDH,UAAAA,IAAI,EAAE;AAD6C,SAAhC,CAArB;AAGAC,QAAAA,MAAM,CAACH,MAAD,CAAN,CAAeI,eAAf;AACD,OALC,CAAF;AAMAL,MAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAY;AAC1C,cAAMC,MAAM,GAAG,MAAM,CAAC,GAAGxB,CAAC,CAACI,OAAN,EAAeE,QAAf,EAAyBwB,OAAzB,CAAiC;AACpDC,UAAAA,KAAK,EAAE;AACLC,YAAAA,GAAG,EAAE,SADA;AAELC,YAAAA,GAAG,EAAE,CAAC;AAFD;AAD6C,SAAjC,CAArB;AAMAN,QAAAA,MAAM,CAACH,MAAD,CAAN,CAAeI,eAAf;AACD,OARC,CAAF;AASAL,MAAAA,EAAE,CAAC,0CAAD,EAA6C,YAAY;AACzD,YAAIW,WAAJ;;AAEA,gBAAQZ,YAAR;AACE,eAAK,QAAL;AACEY,YAAAA,WAAW,GAAG;AACZC,cAAAA,QAAQ,EAAE,MADE;AAEZC,cAAAA,UAAU,EAAE;AACVC,gBAAAA,KAAK,EAAE;AADG,eAFA;AAKZX,cAAAA,IAAI,EAAE;AALM,aAAd;AAOA;;AAEF,eAAK,QAAL;AACEQ,YAAAA,WAAW,GAAG;AACZI,cAAAA,QAAQ,EAAE;AACRC,gBAAAA,WAAW,EAAE,CAAC,CAAC,SAAF,EAAa,SAAb,CADL;AAER3B,gBAAAA,IAAI,EAAE;AAFE,eADE;AAKZwB,cAAAA,UAAU,EAAE;AACVC,gBAAAA,KAAK,EAAE;AADG;AALA,aAAd;AASA;;AAEF,eAAK,eAAL;AACEH,YAAAA,WAAW,GAAG;AACZI,cAAAA,QAAQ,EAAE;AACRC,gBAAAA,WAAW,EAAE,CAAC,CAAC,SAAF,EAAa,SAAb,CADL;AAER3B,gBAAAA,IAAI,EAAE;AAFE,eADE;AAKZwB,cAAAA,UAAU,EAAE;AACVC,gBAAAA,KAAK,EAAE;AADG;AALA,aAAd;AASA;;AAEF;AACE,kBAAM,IAAIG,KAAJ,CAAW,8CAA6ClC,QAAQ,CAACM,IAAK,EAAtE,CAAN;AApCJ;;AAuCA,cAAMY,MAAM,GAAG,MAAM,CAAC,GAAGxB,CAAC,CAACI,OAAN,EAAeE,QAAf,EAAyBmC,8BAAzB,CAAwDP,WAAxD,CAArB;AACAP,QAAAA,MAAM,CAACH,MAAD,CAAN,CAAeI,eAAf;AACD,OA5CC,CAAF,CAtBgC,CAkE5B;;AAEJ,UAAIN,YAAY,KAAK,QAArB,EAA+B;AAC7B,cAAMoB,WAAW,GAAG,eAApB,CAD6B,CACQ;AACrC;;AAEAnB,QAAAA,EAAE,CAAC,oDAAD,EAAuD,MAAM;AAC7D;AACA,gBAAMoB,aAAa,GAAG;AACpBlB,YAAAA,YAAY,EAAEP,KAAK,IAAI;AACrBS,cAAAA,MAAM,CAACT,KAAK,CAAC0B,OAAP,CAAN,CAAsBC,GAAtB,CAA0BC,IAA1B,CAA+BnB,MAAM,CAACoB,QAAP,EAA/B;AACA,qBAAOC,OAAO,CAACC,OAAR,EAAP;AACD;AAJmB,WAAtB;AAMA,gBAAMC,MAAM,GAAG,IAAIjD,OAAO,CAACG,OAAZ,CAAoBuC,aAApB,EAAmCrC,QAAnC,CAAf;AACA4C,UAAAA,MAAM,CAACzB,YAAP,CAAoB;AAClBC,YAAAA,IAAI,EAAE;AADY,WAApB;AAGD,SAZC,CAAF,CAJ6B,CAgBzB;;AAEJH,QAAAA,EAAE,CAAC,0DAAD,EAA6D,MAAM;AACnE;AACA,gBAAMoB,aAAa,GAAG;AACpBlB,YAAAA,YAAY,EAAEP,KAAK,IAAI;AACrBS,cAAAA,MAAM,CAACT,KAAK,CAAC0B,OAAP,CAAN,CAAsBE,IAAtB,CAA2BJ,WAA3B;AACA,qBAAOM,OAAO,CAACC,OAAR,EAAP;AACD;AAJmB,WAAtB;AAMA,gBAAMC,MAAM,GAAG,IAAIjD,OAAO,CAACG,OAAZ,CAAoBuC,aAApB,EAAmC,EAAE,GAAGrC,QAAL;AAChDsC,YAAAA,OAAO,EAAEF;AADuC,WAAnC,CAAf;AAGAQ,UAAAA,MAAM,CAACzB,YAAP,CAAoB;AAClBC,YAAAA,IAAI,EAAE;AADY,WAApB;AAGD,SAdC,CAAF,CAlB6B,CAgCzB;AACJ;;AAEAH,QAAAA,EAAE,CAAC,8CAAD,EAAiD,MAAM;AACvD;AACA,gBAAMoB,aAAa,GAAG;AACpBd,YAAAA,MAAM,EAAEX,KAAK,IAAI;AACfS,cAAAA,MAAM,CAACT,KAAK,CAAC0B,OAAP,CAAN,CAAsBC,GAAtB,CAA0BC,IAA1B,CAA+BnB,MAAM,CAACoB,QAAP,EAA/B;AACA,qBAAOC,OAAO,CAACC,OAAR,EAAP;AACD;AAJmB,WAAtB;AAMA,gBAAMC,MAAM,GAAG,IAAIjD,OAAO,CAACG,OAAZ,CAAoBuC,aAApB,EAAmCrC,QAAnC,CAAf;AACA4C,UAAAA,MAAM,CAACrB,MAAP,CAAc;AACZH,YAAAA,IAAI,EAAE;AADM,WAAd;AAGD,SAZC,CAAF,CAnC6B,CA+CzB;;AAEJH,QAAAA,EAAE,CAAC,oDAAD,EAAuD,MAAM;AAC7D;AACA,gBAAMoB,aAAa,GAAG;AACpBd,YAAAA,MAAM,EAAEX,KAAK,IAAI;AACfS,cAAAA,MAAM,CAACT,KAAK,CAAC0B,OAAP,CAAN,CAAsBE,IAAtB,CAA2BJ,WAA3B;AACA,qBAAOM,OAAO,CAACC,OAAR,EAAP;AACD;AAJmB,WAAtB;AAMA,gBAAMC,MAAM,GAAG,IAAIjD,OAAO,CAACG,OAAZ,CAAoBuC,aAApB,EAAmC,EAAE,GAAGrC,QAAL;AAChDsC,YAAAA,OAAO,EAAEF;AADuC,WAAnC,CAAf;AAGAQ,UAAAA,MAAM,CAACrB,MAAP,CAAc;AACZH,YAAAA,IAAI,EAAE;AADM,WAAd;AAGD,SAdC,CAAF;AAeD;AACF,KArIO,CAAR;AAsID,GAzID;AA0ID,CAjKO,CAAR","sourcesContent":["\"use strict\";\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _nock = _interopRequireDefault(require(\"nock\"));\n\nvar _ = _interopRequireDefault(require(\".\"));\n\nvar _pelias = _interopRequireDefault(require(\"./geocoders/pelias\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction mockResponsePath(geocoder, file) {\n  return _path.default.join(__dirname, \"test-fixtures\", geocoder, file);\n}\n\ndescribe(\"geocoder\", () => {\n  const geocoders = [{\n    type: \"ARCGIS\"\n  }, {\n    apiKey: \"dummy-mapzen-key\",\n    baseUrl: \"https://ws-st.trimet.org/pelias/v1\",\n    type: \"PELIAS\"\n  }, // this entry represents no geocoder configuration. In this case it is\n  // expected that the NoApiGeocoder will be used.\n  undefined]; // nocks for ARCGIS\n\n  const baseArcGisPath = \"/arcgis/rest/services/World/GeocodeServer/\";\n  (0, _nock.default)(\"https://geocode.arcgis.com\") // autocomplete\n  .get(`${baseArcGisPath}suggest`).query(true).replyWithFile(200, mockResponsePath(\"arcgis\", \"suggest-response.json\")) // reverse\n  .get(`${baseArcGisPath}reverseGeocode`).query(true).replyWithFile(200, mockResponsePath(\"arcgis\", \"reverseGeocode-response.json\")) // search\n  .get(`${baseArcGisPath}findAddressCandidates`).query(true).replyWithFile(200, mockResponsePath(\"arcgis\", \"findAddressCandidates-response.json\")) // a 2nd search for purposes of resolving getLocationFromGeocodedFeature test\n  .get(`${baseArcGisPath}findAddressCandidates`).query(true).replyWithFile(200, mockResponsePath(\"arcgis\", \"findAddressCandidates-response.json\")); // nocks for PELIAS\n\n  const basePeliasPath = \"/pelias/v1/\";\n  (0, _nock.default)(\"https://ws-st.trimet.org\") // autocomplete\n  .get(`${basePeliasPath}autocomplete`).query(true).replyWithFile(200, mockResponsePath(\"pelias\", \"autocomplete-response.json\")) // search\n  .get(`${basePeliasPath}search`).query(true).replyWithFile(200, mockResponsePath(\"pelias\", \"search-response.json\")) // reverse, includes not using zip/country in returned location.name.\n  .get(`${basePeliasPath}reverse`).query(true).replyWithFile(200, mockResponsePath(\"pelias\", \"reverse-response.json\"));\n  geocoders.forEach(geocoder => {\n    const geocoderType = geocoder ? geocoder.type : \"NoApiGeocoder\"; // the describe is in quotes to bypass a lint rule\n\n    describe(`${geocoderType}`, () => {\n      it(\"should make autocomplete query\", async () => {\n        const result = await (0, _.default)(geocoder).autocomplete({\n          text: \"Mill Ends\"\n        });\n        expect(result).toMatchSnapshot();\n      });\n      it(\"should make search query\", async () => {\n        const result = await (0, _.default)(geocoder).search({\n          text: \"Mill Ends\"\n        });\n        expect(result).toMatchSnapshot();\n      });\n      it(\"should make reverse query\", async () => {\n        const result = await (0, _.default)(geocoder).reverse({\n          point: {\n            lat: 45.516198,\n            lon: -122.67324\n          }\n        });\n        expect(result).toMatchSnapshot();\n      });\n      it(\"should get location from geocode feature\", async () => {\n        let mockFeature;\n\n        switch (geocoderType) {\n          case \"ARCGIS\":\n            mockFeature = {\n              magicKey: \"abcd\",\n              properties: {\n                label: \"Mill Ends City Park, Portland, OR, USA\"\n              },\n              text: \"Mill Ends City Park, Portland, OR, USA\"\n            };\n            break;\n\n          case \"PELIAS\":\n            mockFeature = {\n              geometry: {\n                coordinates: [-122.67324, 45.516198],\n                type: \"Point\"\n              },\n              properties: {\n                label: \"Mill Ends Park, Portland, OR, USA\"\n              }\n            };\n            break;\n\n          case \"NoApiGeocoder\":\n            mockFeature = {\n              geometry: {\n                coordinates: [-122.67324, 45.516198],\n                type: \"Point\"\n              },\n              properties: {\n                label: \"45.516198, -122.673240\"\n              }\n            };\n            break;\n\n          default:\n            throw new Error(`no mock feature defined for geocoder type: ${geocoder.type}`);\n        }\n\n        const result = await (0, _.default)(geocoder).getLocationFromGeocodedFeature(mockFeature);\n        expect(result).toMatchSnapshot();\n      }); // geocoder-specific tests\n\n      if (geocoderType === \"PELIAS\") {\n        const mockSources = \"gn,oa,osm,wof\"; // sources should not be sent unless they are explicitly defined in the\n        // query. See https://github.com/ibi-group/trimet-mod-otp/issues/239\n\n        it(\"should not send sources in autocomplete by default\", () => {\n          // create mock API to check query\n          const mockPeliasAPI = {\n            autocomplete: query => {\n              expect(query.sources).not.toBe(expect.anything());\n              return Promise.resolve();\n            }\n          };\n          const pelias = new _pelias.default(mockPeliasAPI, geocoder);\n          pelias.autocomplete({\n            text: \"Mill Ends\"\n          });\n        }); // should send sources if they're defined in the config\n\n        it(\"should send sources in autocomplete if defined in config\", () => {\n          // create mock API to check query\n          const mockPeliasAPI = {\n            autocomplete: query => {\n              expect(query.sources).toBe(mockSources);\n              return Promise.resolve();\n            }\n          };\n          const pelias = new _pelias.default(mockPeliasAPI, { ...geocoder,\n            sources: mockSources\n          });\n          pelias.autocomplete({\n            text: \"Mill Ends\"\n          });\n        }); // sources should not be sent unless they are explicitly defined in the\n        // query. See https://github.com/ibi-group/trimet-mod-otp/issues/239\n\n        it(\"should not send sources in search by default\", () => {\n          // create mock API to check query\n          const mockPeliasAPI = {\n            search: query => {\n              expect(query.sources).not.toBe(expect.anything());\n              return Promise.resolve();\n            }\n          };\n          const pelias = new _pelias.default(mockPeliasAPI, geocoder);\n          pelias.search({\n            text: \"Mill Ends\"\n          });\n        }); // should send sources if they're defined in the config\n\n        it(\"should send sources in search if defined in config\", () => {\n          // create mock API to check query\n          const mockPeliasAPI = {\n            search: query => {\n              expect(query.sources).toBe(mockSources);\n              return Promise.resolve();\n            }\n          };\n          const pelias = new _pelias.default(mockPeliasAPI, { ...geocoder,\n            sources: mockSources\n          });\n          pelias.search({\n            text: \"Mill Ends\"\n          });\n        });\n      }\n    });\n  });\n});"]}