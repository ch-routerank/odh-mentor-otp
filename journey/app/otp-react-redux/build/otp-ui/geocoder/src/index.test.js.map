{"version":3,"sources":["index.test.js"],"names":["mockResponsePath","geocoder","file","path","join","__dirname","describe","geocoders","type","apiKey","baseUrl","undefined","baseArcGisPath","get","query","replyWithFile","basePeliasPath","forEach","geocoderType","it","result","autocomplete","text","expect","toMatchSnapshot","search","reverse","point","lat","lon","mockFeature","magicKey","properties","label","geometry","coordinates","Error","getLocationFromGeocodedFeature","mockSources","mockPeliasAPI","sources","not","toBe","anything","Promise","resolve","pelias","PeliasGeocoder"],"mappings":"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","sourcesContent":["import path from \"path\";\n\nimport nock from \"nock\";\n\nimport getGeocoder from \".\";\nimport PeliasGeocoder from \"./geocoders/pelias\";\n\nfunction mockResponsePath(geocoder, file) {\n  return path.join(__dirname, \"test-fixtures\", geocoder, file);\n}\n\ndescribe(\"geocoder\", () => {\n  const geocoders = [\n    {\n      type: \"ARCGIS\"\n    },\n    {\n      apiKey: \"dummy-mapzen-key\",\n      baseUrl: \"https://ws-st.trimet.org/pelias/v1\",\n      type: \"PELIAS\"\n    },\n    // this entry represents no geocoder configuration. In this case it is\n    // expected that the NoApiGeocoder will be used.\n    undefined\n  ];\n\n  // nocks for ARCGIS\n  const baseArcGisPath = \"/arcgis/rest/services/World/GeocodeServer/\";\n  nock(\"https://geocode.arcgis.com\")\n    // autocomplete\n    .get(`${baseArcGisPath}suggest`)\n    .query(true)\n    .replyWithFile(200, mockResponsePath(\"arcgis\", \"suggest-response.json\"))\n    // reverse\n    .get(`${baseArcGisPath}reverseGeocode`)\n    .query(true)\n    .replyWithFile(\n      200,\n      mockResponsePath(\"arcgis\", \"reverseGeocode-response.json\")\n    )\n    // search\n    .get(`${baseArcGisPath}findAddressCandidates`)\n    .query(true)\n    .replyWithFile(\n      200,\n      mockResponsePath(\"arcgis\", \"findAddressCandidates-response.json\")\n    )\n    // a 2nd search for purposes of resolving getLocationFromGeocodedFeature test\n    .get(`${baseArcGisPath}findAddressCandidates`)\n    .query(true)\n    .replyWithFile(\n      200,\n      mockResponsePath(\"arcgis\", \"findAddressCandidates-response.json\")\n    );\n\n  // nocks for PELIAS\n  const basePeliasPath = \"/pelias/v1/\";\n  nock(\"https://ws-st.trimet.org\")\n    // autocomplete\n    .get(`${basePeliasPath}autocomplete`)\n    .query(true)\n    .replyWithFile(\n      200,\n      mockResponsePath(\"pelias\", \"autocomplete-response.json\")\n    )\n    // search\n    .get(`${basePeliasPath}search`)\n    .query(true)\n    .replyWithFile(200, mockResponsePath(\"pelias\", \"search-response.json\"))\n    // reverse, includes not using zip/country in returned location.name.\n    .get(`${basePeliasPath}reverse`)\n    .query(true)\n    .replyWithFile(200, mockResponsePath(\"pelias\", \"reverse-response.json\"));\n\n  geocoders.forEach(geocoder => {\n    const geocoderType = geocoder ? geocoder.type : \"NoApiGeocoder\";\n    // the describe is in quotes to bypass a lint rule\n    describe(`${geocoderType}`, () => {\n      it(\"should make autocomplete query\", async () => {\n        const result = await getGeocoder(geocoder).autocomplete({\n          text: \"Mill Ends\"\n        });\n        expect(result).toMatchSnapshot();\n      });\n\n      it(\"should make search query\", async () => {\n        const result = await getGeocoder(geocoder).search({\n          text: \"Mill Ends\"\n        });\n        expect(result).toMatchSnapshot();\n      });\n\n      it(\"should make reverse query\", async () => {\n        const result = await getGeocoder(geocoder).reverse({\n          point: { lat: 45.516198, lon: -122.67324 }\n        });\n        expect(result).toMatchSnapshot();\n      });\n\n      it(\"should get location from geocode feature\", async () => {\n        let mockFeature;\n        switch (geocoderType) {\n          case \"ARCGIS\":\n            mockFeature = {\n              magicKey: \"abcd\",\n              properties: {\n                label: \"Mill Ends City Park, Portland, OR, USA\"\n              },\n              text: \"Mill Ends City Park, Portland, OR, USA\"\n            };\n            break;\n          case \"PELIAS\":\n            mockFeature = {\n              geometry: {\n                coordinates: [-122.67324, 45.516198],\n                type: \"Point\"\n              },\n              properties: {\n                label: \"Mill Ends Park, Portland, OR, USA\"\n              }\n            };\n            break;\n          case \"NoApiGeocoder\":\n            mockFeature = {\n              geometry: {\n                coordinates: [-122.67324, 45.516198],\n                type: \"Point\"\n              },\n              properties: {\n                label: \"45.516198, -122.673240\"\n              }\n            };\n            break;\n          default:\n            throw new Error(\n              `no mock feature defined for geocoder type: ${geocoder.type}`\n            );\n        }\n        const result = await getGeocoder(\n          geocoder\n        ).getLocationFromGeocodedFeature(mockFeature);\n        expect(result).toMatchSnapshot();\n      });\n\n      // geocoder-specific tests\n      if (geocoderType === \"PELIAS\") {\n        const mockSources = \"gn,oa,osm,wof\";\n\n        // sources should not be sent unless they are explicitly defined in the\n        // query. See https://github.com/ibi-group/trimet-mod-otp/issues/239\n        it(\"should not send sources in autocomplete by default\", () => {\n          // create mock API to check query\n          const mockPeliasAPI = {\n            autocomplete: query => {\n              expect(query.sources).not.toBe(expect.anything());\n              return Promise.resolve();\n            }\n          };\n          const pelias = new PeliasGeocoder(mockPeliasAPI, geocoder);\n          pelias.autocomplete({ text: \"Mill Ends\" });\n        });\n\n        // should send sources if they're defined in the config\n        it(\"should send sources in autocomplete if defined in config\", () => {\n          // create mock API to check query\n          const mockPeliasAPI = {\n            autocomplete: query => {\n              expect(query.sources).toBe(mockSources);\n              return Promise.resolve();\n            }\n          };\n          const pelias = new PeliasGeocoder(mockPeliasAPI, {\n            ...geocoder,\n            sources: mockSources\n          });\n          pelias.autocomplete({ text: \"Mill Ends\" });\n        });\n\n        // sources should not be sent unless they are explicitly defined in the\n        // query. See https://github.com/ibi-group/trimet-mod-otp/issues/239\n        it(\"should not send sources in search by default\", () => {\n          // create mock API to check query\n          const mockPeliasAPI = {\n            search: query => {\n              expect(query.sources).not.toBe(expect.anything());\n              return Promise.resolve();\n            }\n          };\n          const pelias = new PeliasGeocoder(mockPeliasAPI, geocoder);\n          pelias.search({ text: \"Mill Ends\" });\n        });\n\n        // should send sources if they're defined in the config\n        it(\"should send sources in search if defined in config\", () => {\n          // create mock API to check query\n          const mockPeliasAPI = {\n            search: query => {\n              expect(query.sources).toBe(mockSources);\n              return Promise.resolve();\n            }\n          };\n          const pelias = new PeliasGeocoder(mockPeliasAPI, {\n            ...geocoder,\n            sources: mockSources\n          });\n          pelias.search({ text: \"Mill Ends\" });\n        });\n      }\n    });\n  });\n});\n"]}