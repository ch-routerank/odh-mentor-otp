{"version":3,"sources":["index.js"],"names":["Object","defineProperty","exports","value","default","_types","require","_propTypes","_interopRequireDefault","_react","_placeRow","Styled","_interopRequireWildcard","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","ItineraryBody","LegIcon","className","config","diagramVisible","frameLeg","itinerary","LineColumnContent","PlaceName","RouteDescription","routingType","setActiveLeg","setLegDiagram","setViewedTrip","showAgencyInfo","showElevationProfile","showLegIcon","showMapButtonColumn","showRouteFares","showViewTripButton","TimeColumnContent","timeOptions","toRouteAbbreviation","TransitLegSubheader","TransitLegSummary","rows","followsTransit","lastLeg","fare","legs","forEach","leg","i","createPlaceRow","isDestination","push","createElement","legIndex","length","transitLeg","propTypes","string","configType","isRequired","legType","func","itineraryType","elementType","bool","timeOptionsType","noop","defaultProps","undefined","_default"],"mappings":"AAAA;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,uCAAD,CAApB;;AAEA,IAAIC,UAAU,GAAGC,sBAAsB,CAACF,OAAO,CAAC,YAAD,CAAR,CAAvC;;AAEA,IAAIG,MAAM,GAAGD,sBAAsB,CAACF,OAAO,CAAC,OAAD,CAAR,CAAnC;;AAEA,IAAII,SAAS,GAAGF,sBAAsB,CAACF,OAAO,CAAC,aAAD,CAAR,CAAtC;;AAEA,IAAIK,MAAM,GAAGC,uBAAuB,CAACN,OAAO,CAAC,UAAD,CAAR,CAApC;;AAEA,SAASO,wBAAT,GAAoC;AAAE,MAAI,OAAOC,OAAP,KAAmB,UAAvB,EAAmC,OAAO,IAAP;AAAa,MAAIC,KAAK,GAAG,IAAID,OAAJ,EAAZ;;AAA2BD,EAAAA,wBAAwB,GAAG,YAAY;AAAE,WAAOE,KAAP;AAAe,GAAxD;;AAA0D,SAAOA,KAAP;AAAe;;AAE1L,SAASH,uBAAT,CAAiCI,GAAjC,EAAsC;AAAE,MAAIA,GAAG,IAAIA,GAAG,CAACC,UAAf,EAA2B;AAAE,WAAOD,GAAP;AAAa;;AAAC,MAAIA,GAAG,KAAK,IAAR,IAAgB,OAAOA,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,UAA9D,EAA0E;AAAE,WAAO;AAAEZ,MAAAA,OAAO,EAAEY;AAAX,KAAP;AAA0B;;AAAC,MAAID,KAAK,GAAGF,wBAAwB,EAApC;;AAAwC,MAAIE,KAAK,IAAIA,KAAK,CAACG,GAAN,CAAUF,GAAV,CAAb,EAA6B;AAAE,WAAOD,KAAK,CAACI,GAAN,CAAUH,GAAV,CAAP;AAAwB;;AAAC,MAAII,MAAM,GAAG,EAAb;AAAiB,MAAIC,qBAAqB,GAAGrB,MAAM,CAACC,cAAP,IAAyBD,MAAM,CAACsB,wBAA5D;;AAAsF,OAAK,IAAIC,GAAT,IAAgBP,GAAhB,EAAqB;AAAE,QAAIhB,MAAM,CAACwB,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCV,GAArC,EAA0CO,GAA1C,CAAJ,EAAoD;AAAE,UAAII,IAAI,GAAGN,qBAAqB,GAAGrB,MAAM,CAACsB,wBAAP,CAAgCN,GAAhC,EAAqCO,GAArC,CAAH,GAA+C,IAA/E;;AAAqF,UAAII,IAAI,KAAKA,IAAI,CAACR,GAAL,IAAYQ,IAAI,CAACC,GAAtB,CAAR,EAAoC;AAAE5B,QAAAA,MAAM,CAACC,cAAP,CAAsBmB,MAAtB,EAA8BG,GAA9B,EAAmCI,IAAnC;AAA2C,OAAjF,MAAuF;AAAEP,QAAAA,MAAM,CAACG,GAAD,CAAN,GAAcP,GAAG,CAACO,GAAD,CAAjB;AAAyB;AAAE;AAAE;;AAACH,EAAAA,MAAM,CAAChB,OAAP,GAAiBY,GAAjB;;AAAsB,MAAID,KAAJ,EAAW;AAAEA,IAAAA,KAAK,CAACa,GAAN,CAAUZ,GAAV,EAAeI,MAAf;AAAyB;;AAAC,SAAOA,MAAP;AAAgB;;AAEvuB,SAASZ,sBAAT,CAAgCQ,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEZ,IAAAA,OAAO,EAAEY;AAAX,GAArC;AAAwD;;AAE/F,MAAMa,aAAa,GAAG,CAAC;AACrBC,EAAAA,OADqB;AAErBC,EAAAA,SAFqB;AAGrBC,EAAAA,MAHqB;AAIrBC,EAAAA,cAJqB;AAKrBC,EAAAA,QALqB;AAMrBC,EAAAA,SANqB;AAOrBC,EAAAA,iBAPqB;AAQrBC,EAAAA,SARqB;AASrBC,EAAAA,gBATqB;AAUrBC,EAAAA,WAVqB;AAWrBC,EAAAA,YAXqB;AAYrBC,EAAAA,aAZqB;AAarBC,EAAAA,aAbqB;AAcrBC,EAAAA,cAdqB;AAerBC,EAAAA,oBAfqB;AAgBrBC,EAAAA,WAhBqB;AAiBrBC,EAAAA,mBAjBqB;AAkBrBC,EAAAA,cAlBqB;AAmBrBC,EAAAA,kBAnBqB;AAoBrBC,EAAAA,iBApBqB;AAqBrBC,EAAAA,WArBqB;AAsBrBC,EAAAA,mBAtBqB;AAuBrBC,EAAAA,mBAvBqB;AAwBrBC,EAAAA;AAxBqB,CAAD,KAyBhB;AACJ;AACF;AACA;AACA;AACA;AACE,QAAMC,IAAI,GAAG,EAAb;AACA,MAAIC,cAAc,GAAG,KAArB;AACA,MAAIC,OAAJ;AACA,QAAM;AACJC,IAAAA;AADI,MAEFtB,SAFJ;AAGAA,EAAAA,SAAS,CAACuB,IAAV,CAAeC,OAAf,CAAuB,CAACC,GAAD,EAAMC,CAAN,KAAY;AACjC,aAASC,cAAT,CAAwBC,aAAxB,EAAuC;AACrC;AACAT,MAAAA,IAAI,CAACU,IAAL,EAAW,aAAavD,MAAM,CAACL,OAAP,CAAe6D,aAAf,CAA6BvD,SAAS,CAACN,OAAvC,CAA+C;AAA/C,QACtB;AACAmB,QAAAA,GAAG,EAAEsC,CAAC,IAAIE,aAAa,GAAG,CAAH,GAAO,CAAxB,CADN;AAEA/B,QAAAA,MAAM,EAAEA,MAFR;AAGAC,QAAAA,cAAc,EAAEA,cAHhB,CAG+B;AAC/B;AACA;AALA;AAOAwB,QAAAA,IAAI,EAAEV,cAAc,GAAGU,IAAH,GAAU,IAP9B;AAQAF,QAAAA,cAAc,EAAEA,cARhB;AASArB,QAAAA,QAAQ,EAAEA,QATV;AAUA6B,QAAAA,aAAa,EAAEA,aAVf;AAWAP,QAAAA,OAAO,EAAEA,OAXT;AAYAI,QAAAA,GAAG,EAAEA,GAZL;AAaA9B,QAAAA,OAAO,EAAEA,OAbT;AAcAoC,QAAAA,QAAQ,EAAEL,CAdV;AAeAzB,QAAAA,iBAAiB,EAAEA,iBAfnB;AAgBAC,QAAAA,SAAS,EAAEA,SAhBX;AAiBAC,QAAAA,gBAAgB,EAAEA,gBAjBlB;AAkBAC,QAAAA,WAAW,EAAEA,WAlBb;AAmBAC,QAAAA,YAAY,EAAEA,YAnBd;AAoBAC,QAAAA,aAAa,EAAEA,aApBf;AAqBAC,QAAAA,aAAa,EAAEA,aArBf;AAsBAC,QAAAA,cAAc,EAAEA,cAtBhB;AAuBAC,QAAAA,oBAAoB,EAAEA,oBAvBtB;AAwBAC,QAAAA,WAAW,EAAEA,WAxBb;AAyBAC,QAAAA,mBAAmB,EAAEA,mBAzBrB;AA0BAE,QAAAA,kBAAkB,EAAEA,kBA1BpB;AA2BAC,QAAAA,iBAAiB,EAAEA,iBA3BnB;AA4BAC,QAAAA,WAAW,EAAEA,WA5Bb;AA6BAC,QAAAA,mBAAmB,EAAEA,mBA7BrB;AA8BAC,QAAAA,mBAAmB,EAAEA,mBA9BrB;AA+BAC,QAAAA,iBAAiB,EAAEA;AA/BnB,OADsB,CAAxB;AAkCD;;AAEDS,IAAAA,cAAc,CAAC,KAAD,CAAd,CAvCiC,CAuCV;AACvB;;AAEA,QAAID,CAAC,KAAK1B,SAAS,CAACuB,IAAV,CAAeS,MAAf,GAAwB,CAAlC,EAAqC;AACnCL,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD;;AAED,QAAIF,GAAG,CAACQ,UAAR,EAAoBb,cAAc,GAAG,IAAjB;AACpBC,IAAAA,OAAO,GAAGI,GAAV;AACD,GAhDD;AAiDA,SAAO,aAAanD,MAAM,CAACL,OAAP,CAAe6D,aAAf,CAA6BtD,MAAM,CAACkB,aAApC,EAAmD;AACrEE,IAAAA,SAAS,EAAEA;AAD0D,GAAnD,EAEjBuB,IAFiB,CAApB;AAGD,CAzFD;;AA2FAzB,aAAa,CAACwC,SAAd,GAA0B;AACxB;AACF;AACA;AACEtC,EAAAA,SAAS,EAAExB,UAAU,CAACH,OAAX,CAAmBkE,MAJN;;AAMxB;AACAtC,EAAAA,MAAM,EAAE3B,MAAM,CAACkE,UAAP,CAAkBC,UAPF;;AASxB;AACF;AACA;AACA;AACEvC,EAAAA,cAAc,EAAE5B,MAAM,CAACoE,OAbC;;AAexB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEvC,EAAAA,QAAQ,EAAE3B,UAAU,CAACH,OAAX,CAAmBsE,IAxBL;;AA0BxB;AACAvC,EAAAA,SAAS,EAAE9B,MAAM,CAACsE,aAAP,CAAqBH,UA3BR;;AA6BxB;AACA1C,EAAAA,OAAO,EAAEvB,UAAU,CAACH,OAAX,CAAmBwE,WAAnB,CAA+BJ,UA9BhB;;AAgCxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEpC,EAAAA,iBAAiB,EAAE7B,UAAU,CAACH,OAAX,CAAmBwE,WAAnB,CAA+BJ,UA3C1B;;AA6CxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEnC,EAAAA,SAAS,EAAE9B,UAAU,CAACH,OAAX,CAAmBwE,WAAnB,CAA+BJ,UAvDlB;;AAyDxB;AACF;AACA;AACA;AACA;AACA;AACA;AACElC,EAAAA,gBAAgB,EAAE/B,UAAU,CAACH,OAAX,CAAmBwE,WAAnB,CAA+BJ,UAhEzB;;AAkExB;AACAjC,EAAAA,WAAW,EAAEhC,UAAU,CAACH,OAAX,CAAmBkE,MAnER;;AAqExB;AACF;AACA;AACA;AACE9B,EAAAA,YAAY,EAAEjC,UAAU,CAACH,OAAX,CAAmBsE,IAAnB,CAAwBF,UAzEd;;AA2ExB;AACA/B,EAAAA,aAAa,EAAElC,UAAU,CAACH,OAAX,CAAmBsE,IAAnB,CAAwBF,UA5Ef;;AA8ExB;AACA9B,EAAAA,aAAa,EAAEnC,UAAU,CAACH,OAAX,CAAmBsE,IAAnB,CAAwBF,UA/Ef;;AAiFxB;AACA7B,EAAAA,cAAc,EAAEpC,UAAU,CAACH,OAAX,CAAmByE,IAlFX;;AAoFxB;AACAjC,EAAAA,oBAAoB,EAAErC,UAAU,CAACH,OAAX,CAAmByE,IArFjB;;AAuFxB;AACAhC,EAAAA,WAAW,EAAEtC,UAAU,CAACH,OAAX,CAAmByE,IAxFR;;AA0FxB;AACA/B,EAAAA,mBAAmB,EAAEvC,UAAU,CAACH,OAAX,CAAmByE,IA3FhB;;AA6FxB;AACA9B,EAAAA,cAAc,EAAExC,UAAU,CAACH,OAAX,CAAmByE,IA9FX;;AAgGxB;AACA7B,EAAAA,kBAAkB,EAAEzC,UAAU,CAACH,OAAX,CAAmByE,IAjGf;;AAmGxB;AACF;AACA;AACA;AACA;AACA;AACA;AACE5B,EAAAA,iBAAiB,EAAE1C,UAAU,CAACH,OAAX,CAAmBwE,WA1Gd;;AA4GxB;AACA1B,EAAAA,WAAW,EAAE7C,MAAM,CAACyE,eA7GI;;AA+GxB;AACA3B,EAAAA,mBAAmB,EAAE5C,UAAU,CAACH,OAAX,CAAmBsE,IAhHhB;;AAkHxB;AACF;AACA;AACA;AACA;AACA;AACEtB,EAAAA,mBAAmB,EAAE7C,UAAU,CAACH,OAAX,CAAmBwE,WAxHhB;;AA0HxB;AACF;AACA;AACA;AACA;AACA;AACEvB,EAAAA,iBAAiB,EAAE9C,UAAU,CAACH,OAAX,CAAmBwE,WAAnB,CAA+BJ;AAhI1B,CAA1B;;AAmIA,SAASO,IAAT,GAAgB,CAAE;;AAElBlD,aAAa,CAACmD,YAAd,GAA6B;AAC3BjD,EAAAA,SAAS,EAAE,IADgB;AAE3BE,EAAAA,cAAc,EAAE,IAFW;AAG3BC,EAAAA,QAAQ,EAAE6C,IAHiB;AAI3BxC,EAAAA,WAAW,EAAE,WAJc;AAK3BI,EAAAA,cAAc,EAAE,KALW;AAM3BC,EAAAA,oBAAoB,EAAE,KANK;AAO3BC,EAAAA,WAAW,EAAE,KAPc;AAQ3BC,EAAAA,mBAAmB,EAAE,IARM;AAS3BC,EAAAA,cAAc,EAAE,KATW;AAU3BC,EAAAA,kBAAkB,EAAE,KAVO;AAW3BC,EAAAA,iBAAiB,EAAEvC,SAAS,CAACN,OAAV,CAAkB4E,YAAlB,CAA+B/B,iBAXvB;AAY3BC,EAAAA,WAAW,EAAE,IAZc;AAa3BC,EAAAA,mBAAmB,EAAE4B,IAbM;AAc3B3B,EAAAA,mBAAmB,EAAE6B;AAdM,CAA7B;AAgBA,IAAIC,QAAQ,GAAGrD,aAAf;AACA3B,OAAO,CAACE,OAAR,GAAkB8E,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _types = require(\"@opentripplanner/core-utils/lib/types\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _placeRow = _interopRequireDefault(require(\"./place-row\"));\n\nvar Styled = _interopRequireWildcard(require(\"./styled\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst ItineraryBody = ({\n  LegIcon,\n  className,\n  config,\n  diagramVisible,\n  frameLeg,\n  itinerary,\n  LineColumnContent,\n  PlaceName,\n  RouteDescription,\n  routingType,\n  setActiveLeg,\n  setLegDiagram,\n  setViewedTrip,\n  showAgencyInfo,\n  showElevationProfile,\n  showLegIcon,\n  showMapButtonColumn,\n  showRouteFares,\n  showViewTripButton,\n  TimeColumnContent,\n  timeOptions,\n  toRouteAbbreviation,\n  TransitLegSubheader,\n  TransitLegSummary\n}) => {\n  /*\n    TODO: replace component should update logic? companies is simply used to\n    trigger a rerender of this component itinerary is also another criteria\n    that is used to trigger a rerender but has more reuse than companies here\n  */\n  const rows = [];\n  let followsTransit = false;\n  let lastLeg;\n  const {\n    fare\n  } = itinerary;\n  itinerary.legs.forEach((leg, i) => {\n    function createPlaceRow(isDestination) {\n      // Create a row containing this leg's start place and leg traversal details\n      rows.push( /*#__PURE__*/_react.default.createElement(_placeRow.default // eslint-disable-next-line react/no-array-index-key\n      , {\n        key: i + (isDestination ? 1 : 0),\n        config: config,\n        diagramVisible: diagramVisible // Itinerary fare is only passed as prop if showRouteFares is enabled.\n        // The fare details will be processed in the TransitLeg component and\n        // shown for all legs.\n        ,\n        fare: showRouteFares ? fare : null,\n        followsTransit: followsTransit,\n        frameLeg: frameLeg,\n        isDestination: isDestination,\n        lastLeg: lastLeg,\n        leg: leg,\n        LegIcon: LegIcon,\n        legIndex: i,\n        LineColumnContent: LineColumnContent,\n        PlaceName: PlaceName,\n        RouteDescription: RouteDescription,\n        routingType: routingType,\n        setActiveLeg: setActiveLeg,\n        setLegDiagram: setLegDiagram,\n        setViewedTrip: setViewedTrip,\n        showAgencyInfo: showAgencyInfo,\n        showElevationProfile: showElevationProfile,\n        showLegIcon: showLegIcon,\n        showMapButtonColumn: showMapButtonColumn,\n        showViewTripButton: showViewTripButton,\n        TimeColumnContent: TimeColumnContent,\n        timeOptions: timeOptions,\n        toRouteAbbreviation: toRouteAbbreviation,\n        TransitLegSubheader: TransitLegSubheader,\n        TransitLegSummary: TransitLegSummary\n      }));\n    }\n\n    createPlaceRow(false); // If this is the last leg, create a special PlaceRow for the destination\n    // only\n\n    if (i === itinerary.legs.length - 1) {\n      createPlaceRow(true);\n    }\n\n    if (leg.transitLeg) followsTransit = true;\n    lastLeg = leg;\n  });\n  return /*#__PURE__*/_react.default.createElement(Styled.ItineraryBody, {\n    className: className\n  }, rows);\n};\n\nItineraryBody.propTypes = {\n  /**\n   * Used for additional styling with styled components for example.\n   */\n  className: _propTypes.default.string,\n\n  /** Contains OTP configuration details. */\n  config: _types.configType.isRequired,\n\n  /**\n   * Should be either null or a legType. Indicates that a particular leg diagram\n   * has been selected and is active.\n   */\n  diagramVisible: _types.legType,\n\n  /**\n   * Called upon clicking the map icon on place headers. This function is sent a\n   * single argument of an object with the keys as follow:\n   * - `leg`: the leg clicked (can be null if the destination is clicked)\n   * - `legIndex`: the index of the leg clicked (can be null if the destination\n   *    is clicked)\n   * - `isDestination`: if the place header that is clicked is the destination\n   * - `place`: The place associated with the click event\n   */\n  frameLeg: _propTypes.default.func,\n\n  /** Itinerary that the user has selected to view, contains multiple legs */\n  itinerary: _types.itineraryType.isRequired,\n\n  /** A component class that is used to render icons for legs of an itinerary */\n  LegIcon: _propTypes.default.elementType.isRequired,\n\n  /**\n   * A slot for a component that can render the content in the line column.\n   * This component is sent the following props:\n   * - interline - whether this place is an interlined stop\n   * - isDestination - whether this place is the destination\n   * - lastLeg - the leg prior to the current leg\n   * - leg - the current leg\n   * - LegIcon - the LegIcon class used to render leg icons.\n   * - legIndex - the current leg index\n   * - toRouteAbbreviation - a function to help abbreviate route names\n   */\n  LineColumnContent: _propTypes.default.elementType.isRequired,\n\n  /**\n   * A custom component for rendering the place name of legs.\n   * The component is sent 3 props:\n   * - config: the application config\n   * - interline: whether this place is an interlined stop (a stop where a\n   *   transit vehicle changes routes, but a rider can continue riding without\n   *   deboarding)\n   * - place: the particular place. Typically this is the from place, but it\n   *   could also be the to place if it is the destination of the itinerary.\n   */\n  PlaceName: _propTypes.default.elementType.isRequired,\n\n  /**\n   * A component to render the name of a route.\n   *\n   * The component is sent 2 props:\n   * - leg: the itinerary leg with the transit information\n   * - transitOperator: the transit operator associated with the route if available\n   */\n  RouteDescription: _propTypes.default.elementType.isRequired,\n\n  /** TODO: Routing Type is usually 'ITINERARY' but we should get more details on what this does */\n  routingType: _propTypes.default.string,\n\n  /**\n   * Sets the active leg and legIndex.\n   * Called with 2 arguments: (legIndex, leg)\n   */\n  setActiveLeg: _propTypes.default.func.isRequired,\n\n  /** Handler for when a leg diagram is selected. */\n  setLegDiagram: _propTypes.default.func.isRequired,\n\n  /** Fired when a user clicks on a view trip button of a transit leg */\n  setViewedTrip: _propTypes.default.func.isRequired,\n\n  /** If true, will show agency information in transit legs */\n  showAgencyInfo: _propTypes.default.bool,\n\n  /** If true, will show the elevation profile for walk/bike legs */\n  showElevationProfile: _propTypes.default.bool,\n\n  /** If true will show the leg icon in the leg body */\n  showLegIcon: _propTypes.default.bool,\n\n  /** If true, will show the right column with the map button */\n  showMapButtonColumn: _propTypes.default.bool,\n\n  /** If true, will show fare information in transit leg bodies */\n  showRouteFares: _propTypes.default.bool,\n\n  /** If true, shows the view trip button in transit leg bodies */\n  showViewTripButton: _propTypes.default.bool,\n\n  /**\n   * A slot for a component that can render the content in the time column portion of ItineraryBody.\n   * This component is sent the following props:\n   * - isDestination - whether this place is the destination\n   * - leg - the current leg\n   * - timeOptions - options for formatting time.\n   */\n  TimeColumnContent: _propTypes.default.elementType,\n\n  /** Contains the preferred format string for time display and a timezone offset */\n  timeOptions: _types.timeOptionsType,\n\n  /** Converts a route's ID to its accepted badge abbreviation */\n  toRouteAbbreviation: _propTypes.default.func,\n\n  /**\n   * An optional custom component for rendering a subheader on transit legs.\n   * * The component is sent 4 props:\n   * - languageConfig: The language values\n   * - leg: the transit leg\n   */\n  TransitLegSubheader: _propTypes.default.elementType,\n\n  /**\n   * A custom component for rendering the summary of a transit leg.\n   * The component is sent 2 props:\n   * - leg: the transit leg\n   * - stopsExpanded: whether the intermediate stop display is currently expanded\n   */\n  TransitLegSummary: _propTypes.default.elementType.isRequired\n};\n\nfunction noop() {}\n\nItineraryBody.defaultProps = {\n  className: null,\n  diagramVisible: null,\n  frameLeg: noop,\n  routingType: \"ITINERARY\",\n  showAgencyInfo: false,\n  showElevationProfile: false,\n  showLegIcon: false,\n  showMapButtonColumn: true,\n  showRouteFares: false,\n  showViewTripButton: false,\n  TimeColumnContent: _placeRow.default.defaultProps.TimeColumnContent,\n  timeOptions: null,\n  toRouteAbbreviation: noop,\n  TransitLegSubheader: undefined\n};\nvar _default = ItineraryBody;\nexports.default = _default;"]}