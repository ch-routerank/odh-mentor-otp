{"version":3,"sources":["leg-diagram-preview.js"],"names":["METERS_TO_FEET","generateSvg","profile","width","height","points","ptArr","traversed","minElev","maxElev","pts","map","pt","x","y","join","LegDiagramPreview","Component","constructor","props","setState","diagramVisible","leg","startTime","setLegDiagram","isActive","elev","Math","round","state","render","showElevationProfile","steps","distance","mode","onExpandClick","formatElevation","gain","loss","length","onResize","propTypes","legType","isRequired","PropTypes","func","bool","defaultProps"],"mappings":"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","sourcesContent":["import { getElevationProfile } from \"../../../core-utils/src/itinerary\";\nimport { legType } from \"../../../core-utils/src/types\";\nimport PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport ReactResizeDetector from \"react-resize-detector\";\n\nimport * as Styled from \"../styled\";\n\nconst METERS_TO_FEET = 1;\n\nfunction generateSvg(profile, width) {\n  const height = 30;\n  const { points: ptArr, traversed } = profile;\n  let { minElev, maxElev } = profile;\n  // Pad the min-max range by 25m on either side\n  minElev -= 25;\n  maxElev += 25;\n\n  // Transform the point array and store it as an SVG-ready string\n  const pts = ptArr\n    .map(pt => {\n      const x = (pt[0] / traversed) * width;\n      const y = height - (height * (pt[1] - minElev)) / (maxElev - minElev);\n      return `${x},${y}`;\n    })\n    .join(\" \");\n\n  // Render the SVG\n  return (\n    <svg height={height} width={width}>\n      <polyline points={pts} fill=\"none\" stroke=\"black\" strokeWidth={1.3} />\n    </svg>\n  );\n}\n\nclass LegDiagramPreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { width: null };\n  }\n\n  onResize = width => {\n    if (width > 0) {\n      this.setState({ width });\n    }\n  };\n\n  /**\n   * Determine if the diagram currently visible is for this leg (based on start\n   * time).\n   */\n  isActive = () => {\n    const { diagramVisible, leg } = this.props;\n    return diagramVisible && diagramVisible.startTime === leg.startTime;\n  };\n\n  onExpandClick = () => {\n    const { leg, setLegDiagram } = this.props;\n    if (this.isActive()) setLegDiagram(null);\n    else setLegDiagram(leg);\n  };\n\n  /** Round elevation to whole number and add symbol. */\n  formatElevation = elev => `${Math.round(elev)}'`;\n\n  render() {\n    const { leg, showElevationProfile } = this.props;\n    const { width } = this.state;\n    if (!showElevationProfile) return null;\n    const profile = getElevationProfile(leg.steps);\n    // Don't show for very short legs\n    if (leg.distance < 500 || leg.mode === \"CAR\") return null;\n\n    return (\n      <Styled.PreviewContainer active={this.isActive()}>\n        {/* The preview elevation SVG */}\n        {/* eslint-disable-next-line */}\n        <Styled.PreviewDiagram\n          tabIndex=\"0\"\n          title=\"Toggle elevation chart\"\n          role=\"button\"\n          onClick={this.onExpandClick}\n        >\n          <Styled.PreviewDiagramTitle>\n            Altimetria{\" \"}\n            <Styled.PreviewDiagramElevationGain>\n              ↑{this.formatElevation(profile.gain * METERS_TO_FEET)}\n              {\"  \"}\n            </Styled.PreviewDiagramElevationGain>\n            <Styled.PreviewDiagramElevationLoss>\n              ↓{this.formatElevation(-profile.loss * METERS_TO_FEET)}\n            </Styled.PreviewDiagramElevationLoss>\n          </Styled.PreviewDiagramTitle>\n          {profile.points.length > 0\n            ? generateSvg(profile, width)\n            : \"$_altimetry_unavailable_$.\"}\n          <ReactResizeDetector handleWidth onResize={this.onResize} />\n        </Styled.PreviewDiagram>\n      </Styled.PreviewContainer>\n    );\n  }\n}\n\nLegDiagramPreview.propTypes = {\n  diagramVisible: legType,\n  leg: legType.isRequired,\n  setLegDiagram: PropTypes.func.isRequired,\n  showElevationProfile: PropTypes.bool.isRequired\n};\n\nLegDiagramPreview.defaultProps = {\n  diagramVisible: null\n};\n\nexport default LegDiagramPreview;\n"]}