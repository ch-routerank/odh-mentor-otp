{"version":3,"sources":["tnc-leg.js"],"names":["TNCLeg","config","LYFT_CLIENT_ID","UBER_CLIENT_ID","followsTransit","leg","LegIcon","onSummaryClick","showLegIcon","timeOptions","universalLinks","UBER","from","lat","lon","encodeURI","name","to","LYFT","tncData","estimatedArrival","Math","round","displayName","company","startTime","duration","minCost","currencyFormatter","format","code","currency","maxCost","propTypes","configType","isRequired","PropTypes","string","bool","legType","elementType","func","timeOptionsType","defaultProps"],"mappings":";;;;;;;;;AAAA;;AACA;;AAIA;;AAKA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;AAEe,SAASA,MAAT,CAAgB;AAC7BC,EAAAA,MAD6B;AAE7BC,EAAAA,cAF6B;AAG7BC,EAAAA,cAH6B;AAI7BC,EAAAA,cAJ6B;AAK7BC,EAAAA,GAL6B;AAM7BC,EAAAA,OAN6B;AAO7BC,EAAAA,cAP6B;AAQ7BC,EAAAA,WAR6B;AAS7BC,EAAAA;AAT6B,CAAhB,EAUZ;AACD,QAAMC,cAAc,GAAG;AACrBC,IAAAA,IAAI,EAAG,sBACL,sBAAa,KAAb,GAAqB,EACtB,cAAaR,cAAe,sCAC3BE,GAAG,CAACO,IAAJ,CAASC,GACV,sBAAqBR,GAAG,CAACO,IAAJ,CAASE,GAAI,8BAA6BC,SAAS,CACvEV,GAAG,CAACO,IAAJ,CAASI,IAD8D,CAEvE,sBAAqBX,GAAG,CAACY,EAAJ,CAAOJ,GAAI,uBAChCR,GAAG,CAACY,EAAJ,CAAOH,GACR,+BAA8BC,SAAS,CAACV,GAAG,CAACY,EAAJ,CAAOD,IAAR,CAAc,EATjC;AAUrBE,IAAAA,IAAI,EAAG,yCAAwChB,cAAe,qBAAoBG,GAAG,CAACO,IAAJ,CAASC,GAAI,sBAAqBR,GAAG,CAACO,IAAJ,CAASE,GAAI,0BAAyBT,GAAG,CAACY,EAAJ,CAAOJ,GAAI,2BAA0BR,GAAG,CAACY,EAAJ,CAAOH,GAAI;AAVrL,GAAvB;AAYA,QAAM;AAAEK,IAAAA;AAAF,MAAcd,GAApB;AAEA,MAAI,CAACc,OAAD,IAAY,CAACA,OAAO,CAACC,gBAAzB,EAA2C,OAAO,IAAP;AAC3C,sBACE,uDACE,6BAAC,MAAD,CAAQ,cAAR,gBACO,GADP,EAEG,CAAChB,cAAD,iBACC,2CAAOiB,IAAI,CAACC,KAAL,CAAWH,OAAO,CAACC,gBAAR,GAA2B,EAAtC,CAAP,cAHJ,UAKOD,OAAO,CAACI,WALf,YADF,eASE,6BAAC,MAAD,CAAQ,OAAR,qBAEE,6BAAC,yBAAD;AACE,IAAA,MAAM,EAAEtB,MADV;AAEE,IAAA,GAAG,EAAEI,GAFP;AAGE,IAAA,OAAO,EAAEC,OAHX;AAIE,IAAA,cAAc,EAAEC,cAJlB;AAKE,IAAA,WAAW,EAAEC;AALf,IAFF,eAWE,6BAAC,MAAD,CAAQ,0BAAR,qBACE,6BAAC,MAAD,CAAQ,iBAAR;AACE,IAAA,IAAI,EAAEE,cAAc,CAACS,OAAO,CAACK,OAAT,CADtB;AAEE,IAAA,MAAM,EAAE,sBAAa,OAAb,GAAuB;AAFjC,iBADF,EAOGpB,cAAc,iBAAI,6BAAC,MAAD,CAAQ,gBAAR,OAPrB,EAQGA,cAAc,iBACb,6BAAC,MAAD,CAAQ,kBAAR,qBACE,6BAAC,MAAD,CAAQ,uBAAR,qBACE,6BAAC,MAAD,CAAQ,aAAR,sBACa,GADb,EAEG,sBACCC,GAAG,CAACoB,SAAJ,GAAgBN,OAAO,CAACC,gBAAR,GAA2B,IAD5C,EAECX,WAFD,CAFH,EAKK,GALL,YADF,CADF,CATJ,CAXF,eAoCE,6BAAC,MAAD,CAAQ,aAAR,mCAC0B,0BAAeJ,GAAG,CAACqB,QAAnB,CAD1B,oCApCF,EA0CGP,OAAO,CAACQ,OAAR,iBACC,6BAAC,MAAD,CAAQ,OAAR,2BACkB,GADlB,EAEI,GAAEC,2BAAkBC,MAAlB,CAAyBV,OAAO,CAACQ,OAAjC,EAA0C;AAC5CG,IAAAA,IAAI,EAAEX,OAAO,CAACY;AAD8B,GAA1C,CAED,MAAKH,2BAAkBC,MAAlB,CAAyBV,OAAO,CAACa,OAAjC,EAA0C;AAChDF,IAAAA,IAAI,EAAEX,OAAO,CAACY;AADkC,GAA1C,CAEL,EANL,CA3CJ,CATF,CADF;AAiED;;AAED/B,MAAM,CAACiC,SAAP,GAAmB;AACjBhC,EAAAA,MAAM,EAAEiC,kBAAWC,UADF;AAEjBjC,EAAAA,cAAc,EAAEkC,mBAAUC,MAFT;AAGjBlC,EAAAA,cAAc,EAAEiC,mBAAUC,MAHT;AAIjBjC,EAAAA,cAAc,EAAEgC,mBAAUE,IAAV,CAAeH,UAJd;AAKjB9B,EAAAA,GAAG,EAAEkC,eAAQJ,UALI;AAMjB7B,EAAAA,OAAO,EAAE8B,mBAAUI,WAAV,CAAsBL,UANd;AAOjB5B,EAAAA,cAAc,EAAE6B,mBAAUK,IAAV,CAAeN,UAPd;AAQjB3B,EAAAA,WAAW,EAAE4B,mBAAUE,IAAV,CAAeH,UARX;AASjB1B,EAAAA,WAAW,EAAEiC;AATI,CAAnB;AAYA1C,MAAM,CAAC2C,YAAP,GAAsB;AACpBzC,EAAAA,cAAc,EAAE,EADI;AAEpBC,EAAAA,cAAc,EAAE,EAFI;AAGpBM,EAAAA,WAAW,EAAE;AAHO,CAAtB","sourcesContent":["import currencyFormatter from \"currency-formatter\";\nimport {\n  formatDuration,\n  formatTime\n} from \"@opentripplanner/core-utils/lib/time\";\nimport {\n  configType,\n  legType,\n  timeOptionsType\n} from \"@opentripplanner/core-utils/lib/types\";\nimport { isMobile } from \"@opentripplanner/core-utils/lib/ui\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport AccessLegSummary from \"./access-leg-summary\";\nimport * as Styled from \"../styled\";\n\nexport default function TNCLeg({\n  config,\n  LYFT_CLIENT_ID,\n  UBER_CLIENT_ID,\n  followsTransit,\n  leg,\n  LegIcon,\n  onSummaryClick,\n  showLegIcon,\n  timeOptions\n}) {\n  const universalLinks = {\n    UBER: `https://m.uber.com/${\n      isMobile() ? \"ul/\" : \"\"\n    }?client_id=${UBER_CLIENT_ID}&action=setPickup&pickup[latitude]=${\n      leg.from.lat\n    }&pickup[longitude]=${leg.from.lon}&pickup[formatted_address]=${encodeURI(\n      leg.from.name\n    )}&dropoff[latitude]=${leg.to.lat}&dropoff[longitude]=${\n      leg.to.lon\n    }&dropoff[formatted_address]=${encodeURI(leg.to.name)}`,\n    LYFT: `https://lyft.com/ride?id=lyft&partner=${LYFT_CLIENT_ID}&pickup[latitude]=${leg.from.lat}&pickup[longitude]=${leg.from.lon}&destination[latitude]=${leg.to.lat}&destination[longitude]=${leg.to.lon}`\n  };\n  const { tncData } = leg;\n\n  if (!tncData || !tncData.estimatedArrival) return null;\n  return (\n    <div>\n      <Styled.PlaceSubheader>\n        Wait{\" \"}\n        {!followsTransit && (\n          <span>{Math.round(tncData.estimatedArrival / 60)} minutes </span>\n        )}\n        for {tncData.displayName} pickup\n      </Styled.PlaceSubheader>\n\n      <Styled.LegBody>\n        {/* The icon/summary row */}\n        <AccessLegSummary\n          config={config}\n          leg={leg}\n          LegIcon={LegIcon}\n          onSummaryClick={onSummaryClick}\n          showLegIcon={showLegIcon}\n        />\n\n        {/* The \"Book Ride\" button */}\n        <Styled.BookTNCRideButtonContainer>\n          <Styled.BookTNCRideButton\n            href={universalLinks[tncData.company]}\n            target={isMobile() ? \"_self\" : \"_blank\"}\n          >\n            Book Ride\n          </Styled.BookTNCRideButton>\n          {followsTransit && <Styled.BookLaterPointer />}\n          {followsTransit && (\n            <Styled.BookLaterContainer>\n              <Styled.BookLaterInnerContainer>\n                <Styled.BookLaterText>\n                  Wait until{\" \"}\n                  {formatTime(\n                    leg.startTime - tncData.estimatedArrival * 1000,\n                    timeOptions\n                  )}{\" \"}\n                  to book\n                </Styled.BookLaterText>\n              </Styled.BookLaterInnerContainer>\n            </Styled.BookLaterContainer>\n          )}\n        </Styled.BookTNCRideButtonContainer>\n\n        {/* The estimated travel time */}\n        <Styled.TNCTravelTime>\n          Estimated travel time: {formatDuration(leg.duration)} (does not\n          account for traffic)\n        </Styled.TNCTravelTime>\n\n        {/* The estimated travel cost */}\n        {tncData.minCost && (\n          <Styled.TNCCost>\n            Estimated cost:{\" \"}\n            {`${currencyFormatter.format(tncData.minCost, {\n              code: tncData.currency\n            })} - ${currencyFormatter.format(tncData.maxCost, {\n              code: tncData.currency\n            })}`}\n          </Styled.TNCCost>\n        )}\n      </Styled.LegBody>\n    </div>\n  );\n}\n\nTNCLeg.propTypes = {\n  config: configType.isRequired,\n  LYFT_CLIENT_ID: PropTypes.string,\n  UBER_CLIENT_ID: PropTypes.string,\n  followsTransit: PropTypes.bool.isRequired,\n  leg: legType.isRequired,\n  LegIcon: PropTypes.elementType.isRequired,\n  onSummaryClick: PropTypes.func.isRequired,\n  showLegIcon: PropTypes.bool.isRequired,\n  timeOptions: timeOptionsType\n};\n\nTNCLeg.defaultProps = {\n  LYFT_CLIENT_ID: \"\",\n  UBER_CLIENT_ID: \"\",\n  timeOptions: null\n};\n"]}