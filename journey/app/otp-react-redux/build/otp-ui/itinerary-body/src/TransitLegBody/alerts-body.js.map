{"version":3,"sources":["alerts-body.js"],"names":["AlertsBody","alerts","longDateFormat","timeFormat","sort","a","b","effectiveStartDate","map","alert","i","dateTimeString","calendar","sameDay","nextDay","lastDay","lastWeek","sameElse","effectiveDateString","alertUrl","alertHeaderText","alertDescriptionText","propTypes","PropTypes","arrayOf","shape","isRequired","string"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;AAEe,SAASA,UAAT,CAAoB;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,cAAV;AAA0BC,EAAAA;AAA1B,CAApB,EAA4D;AACzE,sBACE,6BAAC,MAAD,CAAQ,aAAR,QACGF,MAAM,CACJG,IADF,CACO,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,kBAAF,GAAuBF,CAAC,CAACE,kBAD1C,EAEEC,GAFF,CAEM,CAACC,KAAD,EAAQC,CAAR,KAAc;AACjB;AACA;AACA,UAAMC,cAAc,GAAG,qBAAOF,KAAK,CAACF,kBAAb,EAAiCK,QAAjC,CACrB,IADqB,EAErB;AACEC,MAAAA,OAAO,EAAG,GAAEV,UAAW,WADzB;AAEEW,MAAAA,OAAO,EAAG,GAAEX,UAAW,cAFzB;AAGEY,MAAAA,OAAO,EAAG,GAAEZ,UAAW,eAHzB;AAIEa,MAAAA,QAAQ,EAAG,GAAEd,cAAe,EAJ9B;AAKEe,MAAAA,QAAQ,EAAG,GAAEf,cAAe;AAL9B,KAFqB,CAAvB;AAUA,UAAMgB,mBAAmB,GAAI,mBAAkBP,cAAe,EAA9D;AACA,wBACE,6BAAC,MAAD,CAAQ,YAAR;AAAqB,MAAA,GAAG,EAAED,CAA1B;AAA6B,MAAA,IAAI,EAAED,KAAK,CAACU;AAAzC,oBACE,6BAAC,MAAD,CAAQ,yBAAR,qBACE,6BAAC,4BAAD;AAAqB,MAAA,IAAI,EAAE;AAA3B,MADF,CADF,EAIGV,KAAK,CAACW,eAAN,gBACC,6BAAC,MAAD,CAAQ,kBAAR,QACGX,KAAK,CAACW,eADT,CADD,GAIG,IARN,eASE,6BAAC,MAAD,CAAQ,gBAAR,QACGX,KAAK,CAACY,oBADT,CATF,eAYE,6BAAC,MAAD,CAAQ,yBAAR,QACGH,mBADH,CAZF,CADF;AAkBD,GAlCF,CADH,CADF;AAuCD;;AAEDlB,UAAU,CAACsB,SAAX,GAAuB;AACrBrB,EAAAA,MAAM,EAAEsB,mBAAUC,OAAV,CAAkBD,mBAAUE,KAAV,CAAgB,EAAhB,CAAlB,EAAuCC,UAD1B;AAErBxB,EAAAA,cAAc,EAAEqB,mBAAUI,MAAV,CAAiBD,UAFZ;AAGrBvB,EAAAA,UAAU,EAAEoB,mBAAUI,MAAV,CAAiBD;AAHR,CAAvB","sourcesContent":["import moment from \"moment\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { ExclamationTriangle } from \"styled-icons/fa-solid\";\n\nimport * as Styled from \"../styled\";\n\nexport default function AlertsBody({ alerts, longDateFormat, timeFormat }) {\n  return (\n    <Styled.TransitAlerts>\n      {alerts\n        .sort((a, b) => b.effectiveStartDate - a.effectiveStartDate)\n        .map((alert, i) => {\n          // If alert is effective as of +/- one day, use today, tomorrow, or\n          // yesterday with time. Otherwise, use long date format.\n          const dateTimeString = moment(alert.effectiveStartDate).calendar(\n            null,\n            {\n              sameDay: `${timeFormat}, [Today]`,\n              nextDay: `${timeFormat}, [Tomorrow]`,\n              lastDay: `${timeFormat}, [Yesterday]`,\n              lastWeek: `${longDateFormat}`,\n              sameElse: `${longDateFormat}`\n            }\n          );\n          const effectiveDateString = `Effective as of ${dateTimeString}`;\n          return (\n            <Styled.TransitAlert key={i} href={alert.alertUrl}>\n              <Styled.TransitAlertIconContainer>\n                <ExclamationTriangle size={18} />\n              </Styled.TransitAlertIconContainer>\n              {alert.alertHeaderText ? (\n                <Styled.TransitAlertHeader>\n                  {alert.alertHeaderText}\n                </Styled.TransitAlertHeader>\n              ) : null}\n              <Styled.TransitAlertBody>\n                {alert.alertDescriptionText}\n              </Styled.TransitAlertBody>\n              <Styled.TransitAlertEffectiveDate>\n                {effectiveDateString}\n              </Styled.TransitAlertEffectiveDate>\n            </Styled.TransitAlert>\n          );\n        })}\n    </Styled.TransitAlerts>\n  );\n}\n\nAlertsBody.propTypes = {\n  alerts: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  longDateFormat: PropTypes.string.isRequired,\n  timeFormat: PropTypes.string.isRequired\n};\n"]}