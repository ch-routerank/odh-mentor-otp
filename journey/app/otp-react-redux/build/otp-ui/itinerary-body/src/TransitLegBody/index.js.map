{"version":3,"sources":["index.js"],"names":["pluralize","str","list","length","TransitLegBody","Component","constructor","props","leg","fare","fareForLeg","details","regular","forEach","fareComponent","routes","includes","routeId","price","stopsExpanded","state","setState","alertsExpanded","legIndex","setActiveLeg","render","config","LegIcon","longDateFormat","RouteDescription","setViewedTrip","showAgencyInfo","showViewTripButton","timeFormat","TransitLegSubheader","TransitLegSummary","transitOperator","language","languageConfig","agencyBrandingUrl","agencyName","agencyUrl","alerts","logoUrl","logo","expandAlerts","getFareForLeg","onSummaryClick","onToggleAlertsClick","animation","intermediateStops","onToggleStopsClick","tripId","from","stopIndex","to","centsToString","transitFare","averageWait","propTypes","configType","isRequired","fareType","legType","PropTypes","elementType","number","string","func","bool","transitOperatorType","defaultProps","undefined"],"mappings":"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","sourcesContent":["import { getTransitFare } from \"@opentripplanner/core-utils/lib/itinerary\";\nimport { formatDuration } from \"@opentripplanner/core-utils/lib/time\";\nimport {\n  configType,\n  fareType,\n  legType,\n  transitOperatorType\n} from \"@opentripplanner/core-utils/lib/types\";\nimport PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport { ExclamationTriangle } from \"styled-icons/fa-solid\";\nimport { VelocityTransitionGroup } from \"velocity-react\";\n\nimport AlertsBody from \"./alerts-body\";\nimport IntermediateStops from \"./intermediate-stops\";\nimport * as Styled from \"../styled\";\nimport ViewTripButton from \"./view-trip-button\";\n\n// TODO use pluralize that for internationalization (and complex plurals, i.e., not just adding 's')\nfunction pluralize(str, list) {\n  return `${str}${list.length > 1 ? \"s\" : \"\"}`;\n}\n\nexport default class TransitLegBody extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      alertsExpanded: false,\n      stopsExpanded: false\n    };\n  }\n\n  getFareForLeg = (leg, fare) => {\n    let fareForLeg;\n    if (fare && fare.details && fare.details.regular) {\n      fare.details.regular.forEach(fareComponent => {\n        if (fareComponent.routes.includes(leg.routeId)) {\n          fareForLeg = getTransitFare(fareComponent.price);\n        }\n      });\n    }\n    return fareForLeg;\n  };\n\n  onToggleStopsClick = () => {\n    const { stopsExpanded } = this.state;\n    this.setState({ stopsExpanded: !stopsExpanded });\n  };\n\n  onToggleAlertsClick = () => {\n    const { alertsExpanded } = this.state;\n    this.setState({ alertsExpanded: !alertsExpanded });\n  };\n\n  onSummaryClick = () => {\n    const { leg, legIndex, setActiveLeg } = this.props;\n    setActiveLeg(legIndex, leg);\n  };\n\n  render() {\n    const {\n      config,\n      fare,\n      leg,\n      LegIcon,\n      longDateFormat,\n      RouteDescription,\n      setViewedTrip,\n      showAgencyInfo,\n      showViewTripButton,\n      timeFormat,\n      TransitLegSubheader,\n      TransitLegSummary,\n      transitOperator\n    } = this.props;\n    const { language: languageConfig } = config;\n    const { agencyBrandingUrl, agencyName, agencyUrl, alerts } = leg;\n    const { alertsExpanded, stopsExpanded } = this.state;\n\n    // If the config contains an operator with a logo URL, prefer that over the\n    // one provided by OTP (which is derived from agency.txt#agency_branding_url)\n    const logoUrl =\n      transitOperator && transitOperator.logo\n        ? transitOperator.logo\n        : agencyBrandingUrl;\n\n    const expandAlerts =\n      alertsExpanded || (leg.alerts && leg.alerts.length < 3);\n    const fareForLeg = this.getFareForLeg(leg, fare);\n    return (\n      <>\n        {TransitLegSubheader && (\n          <TransitLegSubheader languageConfig={languageConfig} leg={leg} />\n        )}\n        <Styled.LegBody>\n          {/* The Route Icon/Name Bar; clickable to set as active leg */}\n          <Styled.LegClickable onClick={this.onSummaryClick}>\n            <RouteDescription\n              leg={leg}\n              LegIcon={LegIcon}\n              transitOperator={transitOperator}\n            />\n          </Styled.LegClickable>\n\n          {/* Agency information */}\n          {showAgencyInfo && (\n            <Styled.AgencyInfo>\n              $_service_${\" \"}\n              <a href={agencyUrl} rel=\"noopener noreferrer\" target=\"_blank\">\n                {agencyName}\n                {logoUrl && (\n                  <img alt={`${agencyName} logo`} src={logoUrl} height={25} />\n                )}\n              </a>\n            </Styled.AgencyInfo>\n          )}\n\n          {/* Alerts toggle */}\n          {alerts && alerts.length > 2 && (\n            <Styled.TransitAlertToggle onClick={this.onToggleAlertsClick}>\n              <ExclamationTriangle size={15} /> {alerts.length}{\" \"}\n              {pluralize(\"alert\", alerts)}{\" \"}\n              <Styled.CaretToggle expanded={alertsExpanded} />\n            </Styled.TransitAlertToggle>\n          )}\n\n          {/* The Alerts body, if visible */}\n          <VelocityTransitionGroup\n            enter={{ animation: \"slideDown\" }}\n            leave={{ animation: \"slideUp\" }}\n          >\n            {expandAlerts && (\n              <AlertsBody\n                alerts={leg.alerts}\n                longDateFormat={longDateFormat}\n                timeFormat={timeFormat}\n              />\n            )}\n          </VelocityTransitionGroup>\n          {/* The \"Ride X Min / X Stops\" Row, including IntermediateStops body */}\n          {leg.intermediateStops && leg.intermediateStops.length > 0 && (\n            <Styled.TransitLegDetails>\n              {/* The header summary row, clickable to expand intermediate stops */}\n              <Styled.TransitLegDetailsHeader>\n                <TransitLegSummary\n                  leg={leg}\n                  onClick={this.onToggleStopsClick}\n                  stopsExpanded={stopsExpanded}\n                />\n\n                {showViewTripButton && (\n                  <ViewTripButton\n                    tripId={leg.tripId}\n                    fromIndex={leg.from.stopIndex}\n                    setViewedTrip={setViewedTrip}\n                    toIndex={leg.to.stopIndex}\n                  />\n                )}\n              </Styled.TransitLegDetailsHeader>\n              {/* IntermediateStops expanded body */}\n              <VelocityTransitionGroup\n                enter={{ animation: \"slideDown\" }}\n                leave={{ animation: \"slideUp\" }}\n              >\n                {stopsExpanded ? (\n                  <Styled.TransitLegExpandedBody>\n                    <IntermediateStops stops={leg.intermediateStops} />\n                    {fareForLeg && (\n                      <Styled.TransitLegFare>\n                        Fare: {fareForLeg.centsToString(fareForLeg.transitFare)}\n                      </Styled.TransitLegFare>\n                    )}\n                  </Styled.TransitLegExpandedBody>\n                ) : null}\n              </VelocityTransitionGroup>\n\n              {/* Average wait details, if present */}\n              {leg.averageWait && (\n                <span>Typical Wait: {formatDuration(leg.averageWait)}</span>\n              )}\n            </Styled.TransitLegDetails>\n          )}\n        </Styled.LegBody>\n      </>\n    );\n  }\n}\n\nTransitLegBody.propTypes = {\n  config: configType.isRequired,\n  fare: fareType,\n  leg: legType.isRequired,\n  LegIcon: PropTypes.elementType.isRequired,\n  legIndex: PropTypes.number.isRequired,\n  longDateFormat: PropTypes.string.isRequired,\n  RouteDescription: PropTypes.elementType.isRequired,\n  setActiveLeg: PropTypes.func.isRequired,\n  setViewedTrip: PropTypes.func.isRequired,\n  showAgencyInfo: PropTypes.bool.isRequired,\n  showViewTripButton: PropTypes.bool.isRequired,\n  timeFormat: PropTypes.string.isRequired,\n  TransitLegSubheader: PropTypes.elementType,\n  TransitLegSummary: PropTypes.elementType.isRequired,\n  transitOperator: transitOperatorType\n};\n\nTransitLegBody.defaultProps = {\n  fare: null,\n  TransitLegSubheader: undefined,\n  transitOperator: null\n};\n"]}