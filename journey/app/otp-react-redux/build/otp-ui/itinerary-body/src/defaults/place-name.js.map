{"version":3,"sources":["place-name.js"],"names":["PlaceName","config","interline","place","name","companies","stopId","split","propTypes","configType","isRequired","PropTypes","bool","placeType","defaultProps"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;AAEe,SAASA,SAAT,CAAmB;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,SAAV;AAAqBC,EAAAA;AAArB,CAAnB,EAAiD;AAC9D,sBACE,4DACGD,SAAS,gBACR,8FACmB,wCAAIC,KAAK,CAACC,IAAV,CADnB,CADQ,gBAKR,4DAAG,6BAAaD,KAAb,EAAoBF,MAAM,CAACI,SAA3B,CAAH,CANJ,EAUGF,KAAK,CAACG,MAAN,IAAgB,CAACJ,SAAjB,iBACC,6BAAC,MAAD,CAAQ,UAAR,eAAuBC,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAvB;AACA;AACR;AACA;AACA;AACA;AACA;;AACQ;AAlBJ,GADF;AAuBD;;AAEDP,SAAS,CAACQ,SAAV,GAAsB;AACpBP,EAAAA,MAAM,EAAEQ,kBAAWC,UADC;AAEpBR,EAAAA,SAAS,EAAES,mBAAUC,IAFD;AAGpBT,EAAAA,KAAK,EAAEU,iBAAUH;AAHG,CAAtB;AAMAV,SAAS,CAACc,YAAV,GAAyB;AACvBZ,EAAAA,SAAS,EAAE;AADY,CAAzB","sourcesContent":["import { configType, placeType } from \"../../../core-utils/src/types\";\nimport { getPlaceName } from \"../../../core-utils/src/itinerary\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport * as Styled from \"../styled\";\n\nexport default function PlaceName({ config, interline, place }) {\n  return (\n    <>\n      {interline ? (\n        <>\n          Stay on Board at <b>{place.name}</b>\n        </>\n      ) : (\n        <>{getPlaceName(place, config.companies)}</>\n      )}\n      {/* TODO: take another pass on this when working the Transit Leg */}\n      {/* Place subheading: Transit stop */}\n      {place.stopId && !interline && (\n        <Styled.StopIdSpan>ID {place.stopId.split(\":\")[1]}</Styled.StopIdSpan>\n        /*\n        TODO: There is no explicit stop button on the mocks.\n        Have a question out to marketing as to whether the above StopID\n        is a button to navigate the user to the arrival list for the stop\n        Thats what the button below does\n      */\n        /* <ViewStopButton stopId={place.stopId} /> */\n      )}\n    </>\n  );\n}\n\nPlaceName.propTypes = {\n  config: configType.isRequired,\n  interline: PropTypes.bool,\n  place: placeType.isRequired\n};\n\nPlaceName.defaultProps = {\n  interline: false\n};\n"]}