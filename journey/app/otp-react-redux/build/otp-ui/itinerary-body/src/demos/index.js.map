{"version":3,"sources":["index.js"],"names":["CustomPlaceName","place","name","CustomTimeColumnContent","isDestination","leg","timeOptions","time","endTime","startTime","color","fontSize","lineHeight","height","propTypes","PropTypes","bool","isRequired","legType","timeOptionsType","defaultProps","customToRouteAbbreviation","route","toString","length","undefined","CustomTransitLegSummary","stopsExpanded","duration","intermediateStops","StyledItineraryBody","ItineraryBody","ItineraryBodyClasses","LegBody","TimeColumn","WrappedOtpRRTransitLegSubheader","languageConfig","languageConfigType"],"mappings":";;;;;;;;;;;;;;AAAA;;AAIA;;AAKA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;AAEO,SAASA,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAAoC;AACzC,SAAQ,SAAQA,KAAK,CAACC,IAAK,QAA3B;AACD;AAED;AACA;AACA;AACA;;;AACO,SAASC,uBAAT,CAAiC;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,GAAjB;AAAsBC,EAAAA;AAAtB,CAAjC,EAAsE;AAC3E,QAAMC,IAAI,GAAGH,aAAa,GAAGC,GAAG,CAACG,OAAP,GAAiBH,GAAG,CAACI,SAA/C;AAEA,sBACE,yEACE,uDACE;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT;AAAb,KACGH,IAAI,IAAI,sBAAWA,IAAX,EAAiBD,WAAjB,CADX,CADF,CADF,eAME;AAAK,IAAA,KAAK,EAAE;AAAEK,MAAAA,QAAQ,EAAE,KAAZ;AAAmBC,MAAAA,UAAU,EAAE;AAA/B;AAAZ,kBACE,6BAAC,4BAAD;AAAqB,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV;AAA5B,IADF,wBANF,CADF;AAYD;;AAEDV,uBAAuB,CAACW,SAAxB,GAAoC;AAClCV,EAAAA,aAAa,EAAEW,mBAAUC,IAAV,CAAeC,UADI;AAElCZ,EAAAA,GAAG,EAAEa,eAAQD,UAFqB;AAGlCX,EAAAA,WAAW,EAAEa;AAHqB,CAApC;AAMAhB,uBAAuB,CAACiB,YAAxB,GAAuC;AACrCd,EAAAA,WAAW,EAAE;AADwB,CAAvC;;AAIO,SAASe,yBAAT,CAAmCC,KAAnC,EAA0C;AAC/C,MAAIA,KAAK,CAACC,QAAN,GAAiBC,MAAjB,GAA0B,CAA9B,EAAiC;AAC/B,WAAOF,KAAP;AACD;;AACD,SAAOG,SAAP;AACD;;AAEM,SAASC,uBAAT,CAAiC;AAAErB,EAAAA,GAAF;AAAOsB,EAAAA;AAAP,CAAjC,EAAyD;AAC9D,sBACE,4DACGtB,GAAG,CAACuB,QAAJ,iBAAgB,oDAAY,0BAAevB,GAAG,CAACuB,QAAnB,CAAZ,CADnB,EAEGvB,GAAG,CAACwB,iBAAJ,iBACC,2CACI,KAAIxB,GAAG,CAACwB,iBAAJ,CAAsBL,MAAtB,GAA+B,CAAE,SADzC,eAEE,6BAAC,oBAAD,CAAsB,WAAtB;AAAkC,IAAA,QAAQ,EAAEG;AAA5C,IAFF,CAHJ,CADF;AAWD;;AAEDD,uBAAuB,CAACZ,SAAxB,GAAoC;AAClCT,EAAAA,GAAG,EAAEa,eAAQD,UADqB;AAElCU,EAAAA,aAAa,EAAEZ,mBAAUC,IAAV,CAAeC;AAFI,CAApC;AAKO,MAAMa,mBAAmB,GAAG,+BAAOC,SAAP,CAAsB;AACzD,IAAIC,oBAAoB,CAACC,OAAQ;AACjC;AACA;AACA;AACA,IAAID,oBAAoB,CAACE,UAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdO;;;AAgBA,SAASC,+BAAT,CAAyC;AAAEC,EAAAA,cAAF;AAAkB/B,EAAAA;AAAlB,CAAzC,EAAkE;AACvE,sBACE,6BAAC,4BAAD;AACE,IAAA,cAAc,EAAE+B,cADlB;AAEE,IAAA,GAAG,EAAE/B,GAFP;AAGE,IAAA,WAAW,EAAE,0BAAO,oBAAP;AAHf,IADF;AAOD;;AAED8B,+BAA+B,CAACrB,SAAhC,GAA4C;AAC1CsB,EAAAA,cAAc,EAAEC,0BAAmBpB,UADO;AAE1CZ,EAAAA,GAAG,EAAEa,eAAQD;AAF6B,CAA5C","sourcesContent":["import {\n  formatDuration,\n  formatTime\n} from \"@opentripplanner/core-utils/lib/time\";\nimport {\n  languageConfigType,\n  legType,\n  timeOptionsType\n} from \"@opentripplanner/core-utils/lib/types\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { action } from \"@storybook/addon-actions\";\nimport styled from \"styled-components\";\nimport { ExclamationTriangle } from \"styled-icons/fa-solid\";\n\nimport ItineraryBody from \"..\";\nimport OtpRRTransitLegSubheader from \"../otp-react-redux/transit-leg-subheader\";\nimport * as ItineraryBodyClasses from \"../styled\";\n\nexport function CustomPlaceName({ place }) {\n  return `ðŸŽ‰âœ¨ðŸŽŠ ${place.name} ðŸŽ‰âœ¨ðŸŽŠ`;\n}\n\n/**\n * Custom component, for illustration purposes only, for displaying the time and other info\n * of the given leg in the time column of the ItineraryBody -> PlaceRow component.\n */\nexport function CustomTimeColumnContent({ isDestination, leg, timeOptions }) {\n  const time = isDestination ? leg.endTime : leg.startTime;\n\n  return (\n    <>\n      <div>\n        <span style={{ color: \"red\" }}>\n          {time && formatTime(time, timeOptions)}\n        </span>\n      </div>\n      <div style={{ fontSize: \"80%\", lineHeight: \"1em\" }}>\n        <ExclamationTriangle style={{ height: \"1em\" }} /> Delayed xx&nbsp;min.\n      </div>\n    </>\n  );\n}\n\nCustomTimeColumnContent.propTypes = {\n  isDestination: PropTypes.bool.isRequired,\n  leg: legType.isRequired,\n  timeOptions: timeOptionsType\n};\n\nCustomTimeColumnContent.defaultProps = {\n  timeOptions: null\n};\n\nexport function customToRouteAbbreviation(route) {\n  if (route.toString().length < 3) {\n    return route;\n  }\n  return undefined;\n}\n\nexport function CustomTransitLegSummary({ leg, stopsExpanded }) {\n  return (\n    <>\n      {leg.duration && <span>Ride {formatDuration(leg.duration)}</span>}\n      {leg.intermediateStops && (\n        <span>\n          {` (${leg.intermediateStops.length + 1} stops)`}\n          <ItineraryBodyClasses.CaretToggle expanded={stopsExpanded} />\n        </span>\n      )}\n    </>\n  );\n}\n\nCustomTransitLegSummary.propTypes = {\n  leg: legType.isRequired,\n  stopsExpanded: PropTypes.bool.isRequired\n};\n\nexport const StyledItineraryBody = styled(ItineraryBody)`\n  ${ItineraryBodyClasses.LegBody} {\n    background-color: pink;\n  }\n\n  ${ItineraryBodyClasses.TimeColumn} {\n    color: #999;\n    font-size: 14px;\n    padding-right: 4px;\n    padding-top: 1px;\n    text-align: right;\n    vertical-align: top;\n    width: 60px;\n  }\n`;\n\nexport function WrappedOtpRRTransitLegSubheader({ languageConfig, leg }) {\n  return (\n    <OtpRRTransitLegSubheader\n      languageConfig={languageConfig}\n      leg={leg}\n      onStopClick={action(\"Transit Stop Click\")}\n    />\n  );\n}\n\nWrappedOtpRRTransitLegSubheader.propTypes = {\n  languageConfig: languageConfigType.isRequired,\n  leg: legType.isRequired\n};\n"]}