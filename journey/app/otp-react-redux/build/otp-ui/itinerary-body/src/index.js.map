{"version":3,"sources":["index.js"],"names":["ItineraryBody","LegIcon","className","config","diagramVisible","frameLeg","itinerary","LineColumnContent","PlaceName","RouteDescription","routingType","setActiveLeg","setLegDiagram","setViewedTrip","showAgencyInfo","showElevationProfile","showLegIcon","showMapButtonColumn","showRouteFares","showViewTripButton","TimeColumnContent","timeOptions","toRouteAbbreviation","TransitLegSubheader","TransitLegSummary","rows","followsTransit","lastLeg","fare","legs","forEach","leg","i","createPlaceRow","isDestination","push","length","transitLeg","propTypes","PropTypes","string","configType","isRequired","legType","func","itineraryType","elementType","bool","timeOptionsType","noop","defaultProps","PlaceRow","undefined"],"mappings":"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","sourcesContent":["import {\n  configType,\n  itineraryType,\n  legType,\n  timeOptionsType\n} from \"@opentripplanner/core-utils/lib/types\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport PlaceRow from \"./place-row\";\nimport * as Styled from \"./styled\";\n\nconst ItineraryBody = ({\n  LegIcon,\n  className,\n  config,\n  diagramVisible,\n  frameLeg,\n  itinerary,\n  LineColumnContent,\n  PlaceName,\n  RouteDescription,\n  routingType,\n  setActiveLeg,\n  setLegDiagram,\n  setViewedTrip,\n  showAgencyInfo,\n  showElevationProfile,\n  showLegIcon,\n  showMapButtonColumn,\n  showRouteFares,\n  showViewTripButton,\n  TimeColumnContent,\n  timeOptions,\n  toRouteAbbreviation,\n  TransitLegSubheader,\n  TransitLegSummary\n}) => {\n  /*\n    TODO: replace component should update logic? companies is simply used to\n    trigger a rerender of this component itinerary is also another criteria\n    that is used to trigger a rerender but has more reuse than companies here\n  */\n  const rows = [];\n  let followsTransit = false;\n  let lastLeg;\n  const { fare } = itinerary;\n  itinerary.legs.forEach((leg, i) => {\n    function createPlaceRow(isDestination) {\n      // Create a row containing this leg's start place and leg traversal details\n      rows.push(\n        <PlaceRow\n          // eslint-disable-next-line react/no-array-index-key\n          key={i + (isDestination ? 1 : 0)}\n          config={config}\n          diagramVisible={diagramVisible}\n          // Itinerary fare is only passed as prop if showRouteFares is enabled.\n          // The fare details will be processed in the TransitLeg component and\n          // shown for all legs.\n          fare={showRouteFares ? fare : null}\n          followsTransit={followsTransit}\n          frameLeg={frameLeg}\n          isDestination={isDestination}\n          lastLeg={lastLeg}\n          leg={leg}\n          LegIcon={LegIcon}\n          legIndex={i}\n          LineColumnContent={LineColumnContent}\n          PlaceName={PlaceName}\n          RouteDescription={RouteDescription}\n          routingType={routingType}\n          setActiveLeg={setActiveLeg}\n          setLegDiagram={setLegDiagram}\n          setViewedTrip={setViewedTrip}\n          showAgencyInfo={showAgencyInfo}\n          showElevationProfile={showElevationProfile}\n          showLegIcon={showLegIcon}\n          showMapButtonColumn={showMapButtonColumn}\n          showViewTripButton={showViewTripButton}\n          TimeColumnContent={TimeColumnContent}\n          timeOptions={timeOptions}\n          toRouteAbbreviation={toRouteAbbreviation}\n          TransitLegSubheader={TransitLegSubheader}\n          TransitLegSummary={TransitLegSummary}\n        />\n      );\n    }\n\n    createPlaceRow(false);\n    // If this is the last leg, create a special PlaceRow for the destination\n    // only\n    if (i === itinerary.legs.length - 1) {\n      createPlaceRow(true);\n    }\n    if (leg.transitLeg) followsTransit = true;\n    lastLeg = leg;\n  });\n  return (\n    <Styled.ItineraryBody className={className}>{rows}</Styled.ItineraryBody>\n  );\n};\n\nItineraryBody.propTypes = {\n  /**\n   * Used for additional styling with styled components for example.\n   */\n  className: PropTypes.string,\n  /** Contains OTP configuration details. */\n  config: configType.isRequired,\n  /**\n   * Should be either null or a legType. Indicates that a particular leg diagram\n   * has been selected and is active.\n   */\n  diagramVisible: legType,\n  /**\n   * Called upon clicking the map icon on place headers. This function is sent a\n   * single argument of an object with the keys as follow:\n   * - `leg`: the leg clicked (can be null if the destination is clicked)\n   * - `legIndex`: the index of the leg clicked (can be null if the destination\n   *    is clicked)\n   * - `isDestination`: if the place header that is clicked is the destination\n   * - `place`: The place associated with the click event\n   */\n  frameLeg: PropTypes.func,\n  /** Itinerary that the user has selected to view, contains multiple legs */\n  itinerary: itineraryType.isRequired,\n  /** A component class that is used to render icons for legs of an itinerary */\n  LegIcon: PropTypes.elementType.isRequired,\n  /**\n   * A slot for a component that can render the content in the line column.\n   * This component is sent the following props:\n   * - interline - whether this place is an interlined stop\n   * - isDestination - whether this place is the destination\n   * - lastLeg - the leg prior to the current leg\n   * - leg - the current leg\n   * - LegIcon - the LegIcon class used to render leg icons.\n   * - legIndex - the current leg index\n   * - toRouteAbbreviation - a function to help abbreviate route names\n   */\n  LineColumnContent: PropTypes.elementType.isRequired,\n  /**\n   * A custom component for rendering the place name of legs.\n   * The component is sent 3 props:\n   * - config: the application config\n   * - interline: whether this place is an interlined stop (a stop where a\n   *   transit vehicle changes routes, but a rider can continue riding without\n   *   deboarding)\n   * - place: the particular place. Typically this is the from place, but it\n   *   could also be the to place if it is the destination of the itinerary.\n   */\n  PlaceName: PropTypes.elementType.isRequired,\n  /**\n   * A component to render the name of a route.\n   *\n   * The component is sent 2 props:\n   * - leg: the itinerary leg with the transit information\n   * - transitOperator: the transit operator associated with the route if available\n   */\n  RouteDescription: PropTypes.elementType.isRequired,\n  /** TODO: Routing Type is usually 'ITINERARY' but we should get more details on what this does */\n  routingType: PropTypes.string,\n  /**\n   * Sets the active leg and legIndex.\n   * Called with 2 arguments: (legIndex, leg)\n   */\n  setActiveLeg: PropTypes.func.isRequired,\n  /** Handler for when a leg diagram is selected. */\n  setLegDiagram: PropTypes.func.isRequired,\n  /** Fired when a user clicks on a view trip button of a transit leg */\n  setViewedTrip: PropTypes.func.isRequired,\n  /** If true, will show agency information in transit legs */\n  showAgencyInfo: PropTypes.bool,\n  /** If true, will show the elevation profile for walk/bike legs */\n  showElevationProfile: PropTypes.bool,\n  /** If true will show the leg icon in the leg body */\n  showLegIcon: PropTypes.bool,\n  /** If true, will show the right column with the map button */\n  showMapButtonColumn: PropTypes.bool,\n  /** If true, will show fare information in transit leg bodies */\n  showRouteFares: PropTypes.bool,\n  /** If true, shows the view trip button in transit leg bodies */\n  showViewTripButton: PropTypes.bool,\n  /**\n   * A slot for a component that can render the content in the time column portion of ItineraryBody.\n   * This component is sent the following props:\n   * - isDestination - whether this place is the destination\n   * - leg - the current leg\n   * - timeOptions - options for formatting time.\n   */\n  TimeColumnContent: PropTypes.elementType,\n  /** Contains the preferred format string for time display and a timezone offset */\n  timeOptions: timeOptionsType,\n  /** Converts a route's ID to its accepted badge abbreviation */\n  toRouteAbbreviation: PropTypes.func,\n  /**\n   * An optional custom component for rendering a subheader on transit legs.\n   * * The component is sent 4 props:\n   * - languageConfig: The language values\n   * - leg: the transit leg\n   */\n  TransitLegSubheader: PropTypes.elementType,\n  /**\n   * A custom component for rendering the summary of a transit leg.\n   * The component is sent 2 props:\n   * - leg: the transit leg\n   * - stopsExpanded: whether the intermediate stop display is currently expanded\n   */\n  TransitLegSummary: PropTypes.elementType.isRequired\n};\n\nfunction noop() {}\n\nItineraryBody.defaultProps = {\n  className: null,\n  diagramVisible: null,\n  frameLeg: noop,\n  routingType: \"ITINERARY\",\n  showAgencyInfo: false,\n  showElevationProfile: false,\n  showLegIcon: false,\n  showMapButtonColumn: true,\n  showRouteFares: false,\n  showViewTripButton: false,\n  TimeColumnContent: PlaceRow.defaultProps.TimeColumnContent,\n  timeOptions: null,\n  toRouteAbbreviation: noop,\n  TransitLegSubheader: undefined\n};\n\nexport default ItineraryBody;\n"]}