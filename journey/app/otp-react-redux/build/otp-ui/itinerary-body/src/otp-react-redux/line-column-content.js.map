{"version":3,"sources":["line-column-content.js"],"names":["cssWalk","cssBicycle","cssCar","cssMicromobility","cssTransit","getLegCSS","mode","IconStacker","styled","span","LegLine","div","props","coreUtils","itinerary","isTransit","routeColor","undefined","StackedCircle","Circle","StackedCircleInner","StyledLocationIcon","LocationIcon","LineColumnContent","interline","isDestination","lastLeg","leg","legIndex","legBadge","from","bikeShareId","vertexType","propTypes","PropTypes","bool","isRequired","types","legType","number","defaultProps"],"mappings":"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","sourcesContent":["import coreUtils from \"../../../core-utils/src\";\nimport LocationIcon from \"../../../location-icon/src\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { Circle } from \"styled-icons/fa-solid\";\n\nconst cssWalk = css`\n  background: radial-gradient(ellipse at center, #87cefa 40%, transparent 10%);\n  background-position: center -5px;\n  background-repeat: repeat-y;\n  background-size: 12px 12px;\n  left: 6px;\n  right: 6px;\n`;\n\nconst cssBicycle = css`\n  background: repeating-linear-gradient(\n    0deg,\n    red,\n    red 8px,\n    white 8px,\n    white 12.5px\n  );\n  left: 7.5px;\n  right: 7.5px;\n`;\n\nconst cssCar = css`\n  background: repeating-linear-gradient(\n    0deg,\n    grey,\n    grey 8px,\n    white 8px,\n    white 12.5px\n  );\n  left: 7.5px;\n  right: 7.5px;\n`;\n\nconst cssMicromobility = css`\n  background: repeating-linear-gradient(\n    0deg,\n    #f5a729,\n    #f5a729 8px,\n    white 8px,\n    white 12.5px\n  );\n  left: 7.5px;\n  right: 7.5px;\n`;\n\nconst cssTransit = css`\n  background-color: gray;\n  left: 5px;\n  right: 5px;\n`;\n\nfunction getLegCSS(mode) {\n  switch (mode) {\n    case \"WALK\":\n      return cssWalk;\n    case \"BICYCLE\":\n    case \"BICYCLE_RENT\":\n      return cssBicycle;\n    case \"CAR\":\n      return cssCar;\n    case \"MICROMOBILITY\":\n    case \"MICROMOBILITY_RENT\":\n      return cssMicromobility;\n    default:\n      return cssTransit;\n  }\n}\n\nconst IconStacker = styled.span`\n  position: absolute;\n  width: 100%;\n  top: 3px;\n  z-index: 20;\n`;\n\nconst LegLine = styled.div`\n  ${props => getLegCSS(props.mode)}\n  background-color: ${props =>\n    coreUtils.itinerary.isTransit(props.mode)\n      ? props.routeColor\n        ? `#${props.routeColor}`\n        : \"#008\"\n      : undefined};\n  bottom: -11px;\n  position: absolute;\n  top: 11px;\n  z-index: 10;\n`;\n\nconst StackedCircle = styled(Circle)`\n  left: 0;\n  line-height: inherit;\n  position: absolute;\n  text-align: center;\n  width: 100%;\n`;\n\nconst StackedCircleInner = styled(StackedCircle)`\n  top: 3px;\n`;\n\nconst StyledLocationIcon = styled(LocationIcon)`\n  left: 0;\n  position: absolute;\n  text-align: center;\n  width: 100%;\n`;\n\nexport default function LineColumnContent({\n  interline,\n  isDestination,\n  lastLeg,\n  leg,\n  legIndex\n}) {\n  let legBadge;\n  if (interline) {\n    // Interlined. Don't create a leg badge as a stop marker should be inserted\n    // from the place name\n  } else if (isDestination) {\n    // Desitination\n    legBadge = (\n      <>\n        <StackedCircleInner size={14} color=\"white\" />\n        <StyledLocationIcon size={20} type=\"to\" />\n      </>\n    );\n  } else if (legIndex === 0) {\n    // Origin\n    legBadge = (\n      <>\n        <StackedCircleInner size={14} color=\"white\" />\n        <StyledLocationIcon size={20} type=\"from\" />\n      </>\n    );\n  } else if (\n    leg.from.bikeShareId ||\n    (lastLeg.from.bikeShareId && leg.mode === \"WALK\")\n  ) {\n    // start or end of a bike rental leg (not including origin or\n    // destination)\n    legBadge = <StackedCircle size={17} color=\"red\" />;\n  } else if (\n    leg.from.vertexType === \"VEHICLERENTAL\" ||\n    (lastLeg.from.vertexType === \"VEHICLERENTAL\" && leg.mode === \"WALK\")\n  ) {\n    // start or end of a vehicle rental leg (not including origin or\n    // destination)\n    legBadge = <StackedCircle size={17} color=\"#f5a729\" />;\n  } else if (\n    (leg.mode === \"CAR\" && lastLeg.mode === \"WALK\") ||\n    (lastLeg.mode === \"CAR\" && leg.mode === \"WALK\")\n  ) {\n    // start or end of a car rental/TNC/P&R leg (not including origin or\n    // destination)\n    legBadge = <StackedCircle size={17} color=\"#888\" />;\n  } else {\n    legBadge = (\n      <>\n        <StackedCircle size={20} color=\"black\" />\n        <StackedCircleInner size={14} color=\"white\" />\n      </>\n    );\n  }\n\n  return (\n    <>\n      {!isDestination && (\n        <LegLine mode={leg.mode} routeColor={leg.routeColor} />\n      )}\n      <IconStacker>{legBadge}</IconStacker>\n    </>\n  );\n}\n\nLineColumnContent.propTypes = {\n  /** whether this leg is an interlined-transit leg */\n  interline: PropTypes.bool.isRequired,\n  /** whether this place row represents the destination */\n  isDestination: PropTypes.bool.isRequired,\n  /** Contains details about leg object that is being displayed */\n  lastLeg: coreUtils.types.legType,\n  /** Contains details about leg object that is being displayed */\n  leg: coreUtils.types.legType.isRequired,\n  /** the index of the leg in the itinerary leg list */\n  legIndex: PropTypes.number.isRequired\n};\n\nLineColumnContent.defaultProps = {\n  /** can be null if it's the first leg */\n  lastLeg: null\n};\n"]}