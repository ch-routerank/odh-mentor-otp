{"version":3,"sources":["place-row.js"],"names":["getTransitOperatorFromConfig","id","config","transitOperators","find","transitOperator","PlaceRow","diagramVisible","fare","followsTransit","frameLeg","isDestination","lastLeg","leg","LegIcon","legIndex","LineColumnContent","PlaceName","RouteDescription","setActiveLeg","setLegDiagram","setViewedTrip","showAgencyInfo","showElevationProfile","showLegIcon","showMapButtonColumn","showViewTripButton","TimeColumnContent","timeOptions","toRouteAbbreviation","TransitLegSubheader","TransitLegSummary","interline","interlineWithPreviousLeg","hideBorder","place","to","from","longDateFormat","timeFormat","dateTime","toString","transitLeg","agencyId","propTypes","configType","isRequired","legType","fareType","PropTypes","bool","func","elementType","number","timeOptionsType","defaultProps","DefaultTimeColumnContent","undefined"],"mappings":"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","sourcesContent":["import {\n  configType,\n  fareType,\n  legType,\n  timeOptionsType\n} from \"../../core-utils/src/types\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport DefaultTimeColumnContent from \"./defaults/time-column-content\";\nimport AccessLegBody from \"./AccessLegBody\";\nimport * as Styled from \"./styled\";\nimport TransitLegBody from \"./TransitLegBody\";\n\n/** Looks up an operator from the provided configuration */\nconst getTransitOperatorFromConfig = (id, config) =>\n  config.transitOperators.find(transitOperator => transitOperator.id === id) ||\n  null;\n\n/*\n  TODO: Wondering if it's possible for us to destructure the time\n  preferences from the config object and avoid making the props list so long\n*/\nconst PlaceRow = ({\n  config,\n  diagramVisible,\n  fare,\n  followsTransit,\n  frameLeg,\n  isDestination,\n  lastLeg,\n  leg,\n  LegIcon,\n  legIndex,\n  LineColumnContent,\n  PlaceName,\n  RouteDescription,\n  setActiveLeg,\n  setLegDiagram,\n  setViewedTrip,\n  showAgencyInfo,\n  showElevationProfile,\n  showLegIcon,\n  showMapButtonColumn,\n  showViewTripButton,\n  TimeColumnContent,\n  timeOptions,\n  toRouteAbbreviation,\n  TransitLegSubheader,\n  TransitLegSummary\n}) => {\n  // NOTE: Previously there was a check for itineraries that changed vehicles\n  // at a single stop, which would render the stop place the same as the\n  // interline stop. However, this prevents the user from being able to click\n  // on the stop viewer in this case, which they may want to do in order to\n  // check the real-time arrival information for the next leg of their journey.\n  const interline = !!(!isDestination && leg.interlineWithPreviousLeg);\n  const hideBorder = interline || !legIndex;\n  const place = isDestination ? leg.to : leg.from;\n\n  const { longDateFormat, timeFormat } = config.dateTime;\n  return (\n    <Styled.PlaceRowWrapper key={legIndex || \"destination-place\"}>\n      <Styled.TimeColumn>\n        {/* Custom rendering of the departure/arrival time of the specified leg. */}\n        <TimeColumnContent\n          isDestination={isDestination}\n          leg={leg}\n          timeOptions={timeOptions}\n        />\n      </Styled.TimeColumn>\n      <Styled.LineColumn>\n        <LineColumnContent\n          interline={interline}\n          isDestination={isDestination}\n          lastLeg={lastLeg}\n          leg={leg}\n          LegIcon={LegIcon}\n          legIndex={legIndex}\n          toRouteAbbreviation={toRouteAbbreviation}\n        />\n      </Styled.LineColumn>\n      <Styled.DetailsColumn hideBorder={hideBorder.toString()}>\n        <Styled.PlaceDetails>\n          {/* Dot separating interlined segments, if applicable */}\n          <Styled.PlaceHeader>\n            {/*\n              TODO: Need to rework this -- Need to display a marker\n              for an interline place\n            */}\n            {interline && <Styled.InterlineDot>&bull;</Styled.InterlineDot>}\n            <Styled.PlaceName>\n              <PlaceName config={config} interline={interline} place={place} />\n            </Styled.PlaceName>\n          </Styled.PlaceHeader>\n\n          {/* Show the leg, if not rendering the destination */}\n          {!isDestination &&\n            (leg.transitLeg ? (\n              /* This is a transit leg */\n              <TransitLegBody\n                config={config}\n                fare={fare}\n                leg={leg}\n                LegIcon={LegIcon}\n                legIndex={legIndex}\n                setActiveLeg={setActiveLeg}\n                longDateFormat={longDateFormat}\n                RouteDescription={RouteDescription}\n                setViewedTrip={setViewedTrip}\n                showAgencyInfo={showAgencyInfo}\n                showViewTripButton={showViewTripButton}\n                timeFormat={timeFormat}\n                TransitLegSubheader={TransitLegSubheader}\n                TransitLegSummary={TransitLegSummary}\n                transitOperator={\n                  leg.agencyId &&\n                  getTransitOperatorFromConfig(leg.agencyId, config)\n                }\n              />\n            ) : (\n              /* This is an access (e.g. walk/bike/etc.) leg */\n              <AccessLegBody\n                config={config}\n                diagramVisible={diagramVisible}\n                followsTransit={followsTransit}\n                leg={leg}\n                LegIcon={LegIcon}\n                legIndex={legIndex}\n                setActiveLeg={setActiveLeg}\n                setLegDiagram={setLegDiagram}\n                showElevationProfile={showElevationProfile}\n                showLegIcon={showLegIcon}\n                timeOptions={timeOptions}\n              />\n            ))}\n        </Styled.PlaceDetails>\n      </Styled.DetailsColumn>\n      {showMapButtonColumn && (\n        <Styled.MapButtonColumn hideBorder={hideBorder.toString()}>\n          <Styled.MapButton\n            onClick={() => frameLeg({ isDestination, leg, legIndex, place })}\n          >\n            <Styled.MapIcon />\n          </Styled.MapButton>\n        </Styled.MapButtonColumn>\n      )}\n    </Styled.PlaceRowWrapper>\n  );\n};\n\n// A lot of these props are passed through from the ItineraryBody. See the\n// documentation in that component for more information.\nPlaceRow.propTypes = {\n  config: configType.isRequired,\n  diagramVisible: legType,\n  fare: fareType,\n  /** Indicates whether this leg directly follows a transit leg */\n  followsTransit: PropTypes.bool,\n  frameLeg: PropTypes.func.isRequired,\n  /** whether this place row represents the destination */\n  isDestination: PropTypes.bool.isRequired,\n  /** Contains details about the leg object prior to the current one */\n  lastLeg: legType,\n  /** Contains details about leg object that is being displayed */\n  leg: legType.isRequired,\n  LegIcon: PropTypes.elementType.isRequired,\n  /** The index value of this specific leg within the itinerary */\n  legIndex: PropTypes.number.isRequired,\n  LineColumnContent: PropTypes.elementType.isRequired,\n  PlaceName: PropTypes.elementType.isRequired,\n  RouteDescription: PropTypes.elementType.isRequired,\n  setActiveLeg: PropTypes.func.isRequired,\n  setLegDiagram: PropTypes.func.isRequired,\n  setViewedTrip: PropTypes.func.isRequired,\n  showAgencyInfo: PropTypes.bool.isRequired,\n  showElevationProfile: PropTypes.bool.isRequired,\n  showLegIcon: PropTypes.bool.isRequired,\n  showMapButtonColumn: PropTypes.bool.isRequired,\n  showViewTripButton: PropTypes.bool.isRequired,\n  TimeColumnContent: PropTypes.elementType,\n  timeOptions: timeOptionsType,\n  toRouteAbbreviation: PropTypes.func.isRequired,\n  TransitLegSubheader: PropTypes.elementType,\n  TransitLegSummary: PropTypes.elementType.isRequired\n};\n\nPlaceRow.defaultProps = {\n  diagramVisible: null,\n  fare: null,\n  followsTransit: false,\n  // can be null if this is the origin place\n  lastLeg: null,\n  TimeColumnContent: DefaultTimeColumnContent,\n  timeOptions: null,\n  TransitLegSubheader: undefined\n};\n\nexport default PlaceRow;\n"]}