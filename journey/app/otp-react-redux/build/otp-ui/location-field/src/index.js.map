{"version":3,"sources":["index.js"],"names":["optionKey","DefaultLocationIcon","locationType","propTypes","PropTypes","string","isRequired","LocationField","Component","constructor","props","text","console","warn","geocoderConfig","autocomplete","then","result","setState","geocodedFeatures","features","catch","err","error","hideExistingValue","location","name","currentPosition","getCurrentPosition","onLocationSelected","resultType","menuVisible","window","alert","host","message","clearLocation","value","ReactDOM","findDOMNode","inputRef","focus","onTextInputClick","state","e","target","relatedTarget","document","activeElement","getAttribute","getValueFromLocation","evt","geocodeAutocomplete","findNearbyStops","nearbyStops","length","coords","lat","latitude","lon","longitude","max","maxNearbyStops","activeIndex","key","preventDefault","menuItemCount","locationSelected","locationSelectedLookup","geocodeSearch","componentDidUpdate","prevProps","getFormControlClassname","setLocation","search","render","addLocationSearch","autoFocus","className","currentPositionIcon","currentPositionUnavailableIcon","GeocodedOptionIconComponent","inputPlaceholder","LocationIconComponent","sessionOptionIcon","showClearButton","showUserSettings","static","isStatic","stopOptionIcon","stopsIndex","suppressNearby","userLocationsAndRecentPlaces","UserLocationIconComponent","slice","sessionSearches","menuItems","itemIndex","concat","map","feature","getLocationFromGeocodedFeature","geocodedLocation","option","properties","label","push","stopId","stop","stopLocation","id","sessionLocation","userLocation","optionIcon","optionTitle","positionUnavailable","useCurrentLocation","geolocationAlert","currentLocationOption","defaultPlaceholder","placeholder","fetching","textControl","ref","onTextInputChange","onKeyDown","clearButton","onClearButtonClick","onBlurFormGroup","onDropdownToggle","func","bool","shape","number","node","elementType","baseUrl","boundary","rect","minLon","maxLon","minLat","maxLat","maxResults","type","arrayOf","objectOf","transitIndexStopWithRoutes","userLocationType","defaultProps","GeocodedOptionIcon","UserLocationIcon"],"mappings":"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","sourcesContent":["import {\n  currentPositionToLocation,\n  formatStoredPlaceName\n} from \"@opentripplanner/core-utils/lib/map\";\nimport {\n  transitIndexStopWithRoutes,\n  userLocationType\n} from \"@opentripplanner/core-utils/lib/types\";\nimport getGeocoder from \"@opentripplanner/geocoder\";\nimport LocationIcon from \"@opentripplanner/location-icon\";\nimport PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Ban, Bus, LocationArrow, Search, Times } from \"styled-icons/fa-solid\";\nimport { debounce } from \"throttle-debounce\";\n\nimport {\n  GeocodedOptionIcon,\n  Option,\n  TransitStopOption,\n  UserLocationIcon\n} from \"./options\";\nimport * as Styled from \"./styled\";\n\n// FIXME have a better key generator for options\nlet optionKey = 0;\n\nfunction DefaultLocationIcon({ locationType }) {\n  return <LocationIcon size={13} type={locationType} />;\n}\n\nDefaultLocationIcon.propTypes = {\n  locationType: PropTypes.string.isRequired\n};\n\nclass LocationField extends Component {\n  geocodeAutocomplete = debounce(800, text => {\n    if (!text) {\n      console.warn(\"No text entry provided for geocode autocomplete search.\");\n      return;\n    }\n    const { geocoderConfig } = this.props;\n    getGeocoder(geocoderConfig)\n      .autocomplete({ text })\n      .then(result => {\n        this.setState({ geocodedFeatures: result.features });\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  });\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: this.getValueFromLocation(),\n      menuVisible: false,\n      geocodedFeatures: [],\n      activeIndex: null\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    // If location is updated externally, replace value and geocoded features\n    // in internal state.\n    // TODO: This might be considered an anti-pattern. There may be a more\n    // effective way to handle this.\n    const { location } = this.props;\n    if (location !== prevProps.location) {\n      /* FIXME only disabled this because it'd take longer to refactor */\n      /* eslint-disable-next-line */\n      this.setState({\n        value: location !== null ? location.name : \"\",\n        geocodedFeatures: []\n      });\n    }\n  }\n\n  getFormControlClassname() {\n    const { locationType } = this.props;\n    return `${locationType}-form-control`;\n  }\n\n  /**\n   * Gets the initial value to place in the input field.\n   */\n  getValueFromLocation = () => {\n    const { hideExistingValue, location } = this.props;\n    return location && !hideExistingValue ? location.name : \"\";\n  };\n\n  setLocation(location, resultType) {\n    const { onLocationSelected, locationType } = this.props;\n    onLocationSelected({ locationType, location, resultType });\n    this.setState({ menuVisible: false });\n  }\n\n  useCurrentLocation = () => {\n    const {\n      currentPosition,\n      getCurrentPosition,\n      onLocationSelected,\n      locationType\n    } = this.props;\n    const location = currentPositionToLocation(currentPosition);\n    if (location) {\n      // If geolocation is successful (i.e., user has granted app geolocation\n      // permission and coords exist), set location.\n      onLocationSelected({\n        locationType,\n        location,\n        resultType: \"CURRENT_LOCATION\"\n      });\n    } else {\n      // Call geolocation.getCurrentPosition and set as from/to locationType\n      getCurrentPosition(locationType);\n    }\n    this.setState({ menuVisible: false });\n  };\n\n  /**\n   * Provide alert to user with reason for geolocation error\n   */\n  geolocationAlert = () => {\n    const { currentPosition } = this.props;\n    window.alert(\n      `Geolocation either has been disabled for ${\n        window.location.host\n      } or is not available in your browser.\\n\\nReason: ${currentPosition.error\n        .message || \"Unknown reason\"}`\n    );\n  };\n\n  onClearButtonClick = () => {\n    const { clearLocation, locationType } = this.props;\n    clearLocation({ locationType });\n    this.setState({\n      value: \"\",\n      geocodedFeatures: []\n    });\n    /* eslint-disable-next-line */\n    ReactDOM.findDOMNode(this.inputRef).focus();\n    this.onTextInputClick();\n  };\n\n  onDropdownToggle = () => {\n    const { menuVisible } = this.state;\n    this.setState({ menuVisible: !menuVisible });\n  };\n\n  /**\n   * Only hide menu if the target clicked is not a menu item in the dropdown.\n   * Otherwise, the click will not \"finish\" and the menu will hide without the\n   * user having made a selection.\n   */\n  onBlurFormGroup = e => {\n    // IE does not use relatedTarget, so this check handles cross-browser support.\n    // see https://stackoverflow.com/a/49325196/915811\n    const target =\n      e.relatedTarget !== null ? e.relatedTarget : document.activeElement;\n    if (!target || target.getAttribute(\"role\") !== \"menuitem\") {\n      this.setState({\n        geocodedFeatures: [],\n        menuVisible: false,\n        value: this.getValueFromLocation()\n      });\n    }\n  };\n\n  onTextInputChange = evt => {\n    this.setState({ value: evt.target.value, menuVisible: true });\n    this.geocodeAutocomplete(evt.target.value);\n  };\n\n  onTextInputClick = () => {\n    const {\n      currentPosition,\n      findNearbyStops,\n      geocoderConfig,\n      nearbyStops,\n      onTextInputClick\n    } = this.props;\n    if (typeof onTextInputClick === \"function\") onTextInputClick();\n    this.setState({ menuVisible: true });\n    if (nearbyStops.length === 0 && currentPosition && currentPosition.coords) {\n      findNearbyStops({\n        lat: currentPosition.coords.latitude,\n        lon: currentPosition.coords.longitude,\n        max: geocoderConfig.maxNearbyStops || 4\n      });\n    }\n  };\n\n  onKeyDown = evt => {\n    const { activeIndex, menuVisible } = this.state;\n    switch (evt.key) {\n      // 'Down' arrow key pressed: move selected menu item down by one position\n      case \"ArrowDown\":\n        // Suppress default 'ArrowDown' behavior which moves cursor to end\n        evt.preventDefault();\n        if (!menuVisible) {\n          // If the menu is not visible, simulate a text input click to show it.\n          this.onTextInputClick();\n        } else if (activeIndex === this.menuItemCount - 1) {\n          this.setState({ activeIndex: null });\n        } else {\n          this.setState({\n            activeIndex: activeIndex === null ? 0 : activeIndex + 1\n          });\n        }\n        break;\n      // 'Up' arrow key pressed: move selection up by one position\n      case \"ArrowUp\":\n        // Suppress default 'ArrowUp' behavior which moves cursor to beginning\n        evt.preventDefault();\n        if (activeIndex === 0) {\n          this.setState({ activeIndex: null });\n        } else {\n          this.setState({\n            activeIndex:\n              activeIndex === null ? this.menuItemCount - 1 : activeIndex - 1\n          });\n        }\n        break;\n      // 'Enter' keypress serves two purposes:\n      //  - If pressed when typing in search string, switch from 'autocomplete'\n      //    to 'search' geocoding\n      //  - If pressed when dropdown results menu is active, apply the location\n      //    associated with current selected menu item\n      case \"Enter\":\n        if (typeof activeIndex === \"number\") {\n          // Menu is active\n          // Retrieve location selection handler from lookup object and invoke\n          const locationSelected = this.locationSelectedLookup[activeIndex];\n          if (locationSelected) locationSelected();\n\n          // Clear selection & hide the menu\n          this.setState({\n            menuVisible: false,\n            activeIndex: null\n          });\n        } else {\n          // Menu not active; get geocode 'search' results\n          this.geocodeSearch(evt.target.value);\n          // Ensure menu is visible.\n          this.setState({ menuVisible: true });\n        }\n\n        // Suppress default 'Enter' behavior which causes page to reload\n        evt.preventDefault();\n        break;\n      case \"Escape\":\n      case \"Tab\":\n        // Clear selection & hide the menu\n        this.setState({\n          menuVisible: false,\n          activeIndex: null\n        });\n        break;\n      // Any other key pressed: clear active selection\n      default:\n        this.setState({ activeIndex: null });\n        break;\n    }\n  };\n\n  geocodeSearch(text) {\n    const { geocoderConfig } = this.props;\n    if (!text) {\n      console.warn(\"No text entry provided for geocode search.\");\n      return;\n    }\n    getGeocoder(geocoderConfig)\n      .search({ text })\n      .then(result => {\n        if (result.features && result.features.length > 0) {\n          // Only replace geocode items if results were found\n          this.setState({ geocodedFeatures: result.features });\n        } else {\n          console.warn(\n            \"No results found for geocode search. Not replacing results.\"\n          );\n        }\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  }\n\n  render() {\n    const {\n      addLocationSearch,\n      autoFocus,\n      className,\n      currentPosition,\n      currentPositionIcon,\n      currentPositionUnavailableIcon,\n      GeocodedOptionIconComponent,\n      geocoderConfig,\n      inputPlaceholder,\n      location,\n      LocationIconComponent,\n      locationType,\n      sessionOptionIcon,\n      showClearButton,\n      showUserSettings,\n      static: isStatic,\n      stopOptionIcon,\n      stopsIndex,\n      suppressNearby,\n      userLocationsAndRecentPlaces,\n      UserLocationIconComponent,\n      nearbyStops\n    } = this.props;\n    const { menuVisible, value } = this.state;\n    const { activeIndex } = this.state;\n    let { geocodedFeatures } = this.state;\n    if (geocodedFeatures.length > 5)\n      geocodedFeatures = geocodedFeatures.slice(0, 5);\n\n    let { sessionSearches } = this.props;\n    if (sessionSearches.length > 5)\n      sessionSearches = sessionSearches.slice(0, 5);\n\n    // Assemble menu contents, to be displayed either as dropdown or static panel.\n    // Menu items are created in four phases: (1) the current location, (2) any\n    // geocoder search results; (3) nearby transit stops; and (4) saved searches\n\n    let menuItems = []; // array of menu items for display (may include non-selectable items e.g. dividers/headings)\n    let itemIndex = 0; // the index of the current location-associated menu item (excluding non-selectable items)\n    this.locationSelectedLookup = {}; // maps itemIndex to a location selection handler (for use by the onKeyDown method)\n\n    /* 1) Process geocode search result option(s) */\n    if (geocodedFeatures.length > 0) {\n      // Add the menu sub-heading (not a selectable item)\n      // menuItems.push(<MenuItem header key='sr-header'>Search Results</MenuItem>)\n\n      // Iterate through the geocoder results\n      menuItems = menuItems.concat(\n        geocodedFeatures.map(feature => {\n          // Create the selection handler\n          const locationSelected = () => {\n            getGeocoder(geocoderConfig)\n              .getLocationFromGeocodedFeature(feature)\n              .then(geocodedLocation => {\n                // Set the current location\n                this.setLocation(geocodedLocation, \"GEOCODE\");\n                // Add to the location search history. This is intended to\n                // populate the sessionSearches array.\n                addLocationSearch({ location: geocodedLocation });\n              });\n          };\n\n          // Add to the selection handler lookup (for use in onKeyDown)\n          this.locationSelectedLookup[itemIndex] = locationSelected;\n\n          // Create and return the option menu item\n          const option = (\n            <Option\n              icon={<GeocodedOptionIconComponent feature={feature} />}\n              key={optionKey++}\n              title={feature.properties.label}\n              onClick={locationSelected}\n              isActive={itemIndex === activeIndex}\n            />\n          );\n          itemIndex++;\n          return option;\n        })\n      );\n    }\n\n    /* 2) Process nearby transit stop options */\n    if (nearbyStops.length > 0 && !suppressNearby) {\n      // Add the menu sub-heading (not a selectable item)\n      menuItems.push(\n        <Styled.MenuItem header key=\"ns-header\">\n          Nearby Stops\n        </Styled.MenuItem>\n      );\n\n      // Iterate through the found nearby stops\n      menuItems = menuItems.concat(\n        nearbyStops.map(stopId => {\n          // Constuct the location\n          const stop = stopsIndex[stopId];\n          const stopLocation = {\n            id: stopId,\n            lat: stop.lat,\n            lon: stop.lon,\n            name: stop.name\n          };\n\n          // Create the location selected handler\n          const locationSelected = () => {\n            this.setLocation(stopLocation, \"STOP\");\n          };\n\n          // Add to the selection handler lookup (for use in onKeyDown)\n          this.locationSelectedLookup[itemIndex] = locationSelected;\n\n          // Create and return the option menu item\n          const option = (\n            <TransitStopOption\n              isActive={itemIndex === activeIndex}\n              key={optionKey++}\n              onClick={locationSelected}\n              stop={stop}\n              stopOptionIcon={stopOptionIcon}\n            />\n          );\n          itemIndex++;\n          return option;\n        })\n      );\n    }\n\n    /* 3) Process recent search history options */\n    if (sessionSearches.length > 0) {\n      // Add the menu sub-heading (not a selectable item)\n      menuItems.push(\n        <Styled.MenuItem header key=\"ss-header\">\n          Recently Searched\n        </Styled.MenuItem>\n      );\n\n      // Iterate through any saved locations\n      menuItems = menuItems.concat(\n        sessionSearches.map(sessionLocation => {\n          // Create the location-selected handler\n          const locationSelected = () => {\n            this.setLocation(sessionLocation, \"SESSION\");\n          };\n\n          // Add to the selection handler lookup (for use in onKeyDown)\n          this.locationSelectedLookup[itemIndex] = locationSelected;\n\n          // Create and return the option menu item\n          const option = (\n            <Option\n              icon={sessionOptionIcon}\n              key={optionKey++}\n              title={sessionLocation.name}\n              onClick={locationSelected}\n              isActive={itemIndex === activeIndex}\n            />\n          );\n          itemIndex++;\n          return option;\n        })\n      );\n    }\n\n    /* 3b) Process stored user locations */\n    if (userLocationsAndRecentPlaces.length > 0 && showUserSettings) {\n      // Add the menu sub-heading (not a selectable item)\n      menuItems.push(\n        <Styled.MenuItem header key=\"mp-header\">\n          My Places\n        </Styled.MenuItem>\n      );\n\n      // Iterate through any saved locations\n      menuItems = menuItems.concat(\n        userLocationsAndRecentPlaces.map(userLocation => {\n          // Create the location-selected handler\n          const locationSelected = () => {\n            this.setLocation(userLocation, \"SAVED\");\n          };\n\n          // Add to the selection handler lookup (for use in onKeyDown)\n          this.locationSelectedLookup[itemIndex] = locationSelected;\n\n          // Create and return the option menu item\n          const option = (\n            <Option\n              icon={<UserLocationIconComponent userLocation={userLocation} />}\n              key={optionKey++}\n              title={formatStoredPlaceName(userLocation)}\n              onClick={locationSelected}\n              isActive={itemIndex === activeIndex}\n            />\n          );\n          itemIndex++;\n          return option;\n        })\n      );\n    }\n\n    /* 4) Process the current location */\n    let locationSelected;\n    let optionIcon;\n    let optionTitle;\n    let positionUnavailable;\n\n    if (currentPosition && !currentPosition.error) {\n      // current position detected successfully\n      locationSelected = this.useCurrentLocation;\n      optionIcon = currentPositionIcon;\n      optionTitle = \"$_use_current_position_$\";\n      positionUnavailable = false;\n    } else {\n      // error detecting current position\n      locationSelected = this.geolocationAlert;\n      optionIcon = currentPositionUnavailableIcon;\n      optionTitle = \"Current location not available\";\n      positionUnavailable = true;\n    }\n\n    // Add to the selection handler lookup (for use in onKeyDown)\n    this.locationSelectedLookup[itemIndex] = locationSelected;\n\n    if (!suppressNearby) {\n      // Create and add the option item to the menu items array\n      const currentLocationOption = (\n        <Option\n          icon={optionIcon}\n          key={optionKey++}\n          title={optionTitle}\n          onClick={locationSelected}\n          isActive={itemIndex === activeIndex}\n          disabled={positionUnavailable}\n        />\n      );\n      menuItems.push(currentLocationOption);\n      itemIndex++;\n    }\n\n    // Store the number of location-associated items for reference in the onKeyDown method\n    this.menuItemCount = itemIndex;\n\n    /** the text input element * */\n    // Use this text for aria-label below.\n    const defaultPlaceholder = inputPlaceholder || locationType;\n    const placeholder =\n      currentPosition && currentPosition.fetching\n        ? \"Fetching location...\"\n        : defaultPlaceholder;\n    const textControl = (\n      <Styled.Input\n        ref={ref => {\n          this.inputRef = ref;\n        }}\n        aria-label={defaultPlaceholder}\n        autoFocus={autoFocus}\n        className={this.getFormControlClassname()}\n        value={value}\n        placeholder={placeholder}\n        onChange={this.onTextInputChange}\n        onClick={this.onTextInputClick}\n        onKeyDown={this.onKeyDown}\n      />\n    );\n\n    // Only include the clear ('X') button add-on if a location is selected\n    // or if the input field has text.\n    const clearButton =\n      showClearButton && location ? (\n        <Styled.InputGroupAddon>\n          <Styled.Button\n            aria-label=\"Clear location\"\n            onClick={this.onClearButtonClick}\n          >\n            <Times size={13} />\n          </Styled.Button>\n        </Styled.InputGroupAddon>\n      ) : null;\n    if (isStatic) {\n      // 'static' mode (menu is displayed alongside input, e.g., for mobile view)\n      return (\n        <div className={className}>\n          <Styled.FormGroup>\n            <Styled.InputGroup>\n              <Styled.InputGroupAddon>\n                <LocationIconComponent locationType={locationType} />\n              </Styled.InputGroupAddon>\n              {textControl}\n              {clearButton}\n            </Styled.InputGroup>\n          </Styled.FormGroup>\n          <Styled.StaticMenuItemList>\n            {menuItems.length > 0 ? ( // Show typing prompt to avoid empty screen\n              menuItems\n            ) : (\n              <Styled.MenuItem header centeredText>\n                Begin typing to search for locations\n              </Styled.MenuItem>\n            )}\n          </Styled.StaticMenuItemList>\n        </div>\n      );\n    }\n\n    // default display mode with dropdown menu\n    return (\n      <Styled.FormGroup onBlur={this.onBlurFormGroup} className={className}>\n        <Styled.InputGroup>\n          {/* location field icon -- also serves as dropdown anchor */}\n          <Styled.Dropdown\n            locationType={locationType}\n            open={menuVisible}\n            onToggle={this.onDropdownToggle}\n            title={<LocationIconComponent locationType={locationType} />}\n          >\n            {menuItems}\n          </Styled.Dropdown>\n          {textControl}\n          {clearButton}\n        </Styled.InputGroup>\n      </Styled.FormGroup>\n    );\n  }\n}\n\nLocationField.propTypes = {\n  /**\n   * Dispatched upon selecting a geocoded result\n   * Provides an argument in the format:\n   *\n   * ```js\n   * { location: geocodedLocation }\n   * ```\n   */\n  addLocationSearch: PropTypes.func,\n  /**\n   * Determines whether the input field of this component should auto-focus on first display.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Used for additional styling with styled components for example.\n   */\n  className: PropTypes.string,\n  /**\n   * Dispatched whenever the clear location button is clicked.\n   * Provides an argument in the format:\n   *\n   * ```js\n   * { locationType: string }\n   * ```\n   */\n  clearLocation: PropTypes.func,\n  /**\n   * The current position of the user if it is available.\n   */\n  currentPosition: PropTypes.shape({\n    coords: PropTypes.shape({\n      latitude: PropTypes.number,\n      longitude: PropTypes.number\n    }),\n    error: PropTypes.string,\n    fetching: PropTypes.bool\n  }),\n  /**\n   * A slot for the icon to display for the current position\n   */\n  currentPositionIcon: PropTypes.node,\n  /**\n   * A slot for the icon to display for when the current position is unavailable\n   */\n  currentPositionUnavailableIcon: PropTypes.node,\n  /**\n   * Invoked whenever the currentPosition is set, but the nearbyStops are not.\n   * Sends the following argument:\n   *\n   * ```js\n   * {\n   *   lat: currentPosition.coords.latitude,\n   *   lon: currentPosition.coords.longitude,\n   *   max: geocoderConfig.maxNearbyStops || 4\n   * }\n   * ```\n   */\n  findNearbyStops: PropTypes.func,\n  /**\n   * A slot for a compnent that can be used to display a custom icon for a\n   * geocoded option. This component is passed a single property called\n   * `feature` which will be in the geocodedFeatureType shape.\n   */\n  GeocodedOptionIconComponent: PropTypes.elementType,\n  /**\n   * A configuration object describing what geocoder should be used.\n   */\n  geocoderConfig: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    boundary: PropTypes.shape({\n      // TriMet-specific default\n      rect: PropTypes.shape({\n        minLon: PropTypes.number,\n        maxLon: PropTypes.number,\n        minLat: PropTypes.number,\n        maxLat: PropTypes.number\n      })\n    }),\n    maxResults: PropTypes.number,\n    maxNearbyStops: PropTypes.number,\n    type: PropTypes.string.isRequired\n  }).isRequired,\n  /**\n   * This is dispatched when the current position is null. This indicates that\n   * the user has requested to use the current position, but that the current\n   * position is not currently available. This method sends back the\n   * locationType value supplied to the component.\n   */\n  getCurrentPosition: PropTypes.func.isRequired,\n  /**\n   * Whether the provided location (if one is provided) should not be shown upon\n   * initial render.\n   */\n  hideExistingValue: PropTypes.bool,\n  /**\n   * Placeholder text to show in the input element. If the current position is\n   * set to have a true fetching property, then the text \"Fetching location...\"\n   * will display. If this value isn't provided, the locationType will be shown.\n   */\n  inputPlaceholder: PropTypes.string,\n  /**\n   * The location that this component is currently set with.\n   */\n  location: PropTypes.shape({\n    lat: PropTypes.number,\n    lon: PropTypes.number,\n    name: PropTypes.string\n  }),\n  /**\n   * A custom component for rendering the icon displayed to the left of the text\n   * input. This component is passed a single prop of `locationType`.\n   */\n  LocationIconComponent: PropTypes.elementType,\n  /**\n   * Either `from` or `to`\n   */\n  locationType: PropTypes.string.isRequired,\n  /**\n   * A list of stopIds of the stops that should be shown as being nearby. These\n   * must be referencable in the stopsIndex prop.\n   */\n  nearbyStops: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * Invoked whenever the text input is clicked or when the clear button is\n   * clicked.\n   */\n  onTextInputClick: PropTypes.func,\n  /**\n   * A function to handle when a location is selected. This is always dispatched\n   * with an object of the following form:\n   *\n   * ```js\n   * {\n   *  locationType: string,\n   *  location: object,\n   *  resultType: string\n   * }\n   * '''\n   *\n   * The locationType string will be either \"from\" or \"to\" as was set by the\n   * locationType prop for the instance of this component.\n   *\n   * The location object will be an object in the form below:\n   * ```js\n   * {\n   *  id: string, // only populated for stops and user-saved locations\n   *  lat: number,\n   *  lon: number,\n   *  name: string\n   * }\n   *\n   * The resultType string indicates the type of location that was selected.\n   * It can be one of the following:\n   *\n   * \"CURRENT_LOCATION\": The user's current location.\n   * \"GEOCODE\": A location that was found via a geocode search result\n   * \"SAVED\": A location that was saved by the user.\n   * \"SESSION\": A geocoded search result that was recently selected by the user.\n   * \"STOP\": A transit stop\n   */\n  onLocationSelected: PropTypes.func.isRequired,\n  /**\n   * A slot for the icon to display for an option that was used during the\n   * current session.\n   */\n  sessionOptionIcon: PropTypes.node,\n  /**\n   * A list of recent searches to show to the user. These are typically only\n   * geocode results that a user has previously selected.\n   */\n  sessionSearches: PropTypes.arrayOf(\n    PropTypes.shape({\n      lat: PropTypes.number.isRequired,\n      lon: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired\n    })\n  ),\n  /**\n   * Whether or not to show the clear button\n   */\n  showClearButton: PropTypes.bool,\n  /**\n   * Whether or not to show user settings dialog\n   */\n  showUserSettings: PropTypes.bool,\n  /**\n   * show autocomplete options as fixed/inline element rather than dropdown\n   */\n  static: PropTypes.bool,\n  /**\n   * An index of stops by StopId\n   */\n  stopsIndex: PropTypes.objectOf(transitIndexStopWithRoutes),\n  /**\n   * A slot for the icon to display for a stop option\n   */\n  stopOptionIcon: PropTypes.node,\n  /**\n   * If true, do not show nearbyStops or current location as options\n   */\n  suppressNearby: PropTypes.bool,\n  /**\n   * An array of recent locations and places a user has searched for.\n   */\n  userLocationsAndRecentPlaces: PropTypes.arrayOf(userLocationType),\n  /**\n   * A custom component for rendering the icon for options that are either saved\n   * user locations or recent places. The component will be sent a single prop\n   * of `userLocation` which is a userLocationType.\n   */\n  UserLocationIconComponent: PropTypes.elementType\n};\n\nLocationField.defaultProps = {\n  autoFocus: false,\n  addLocationSearch: () => {},\n  className: null,\n  clearLocation: () => {},\n  currentPosition: null,\n  currentPositionIcon: <LocationArrow size={13} />,\n  currentPositionUnavailableIcon: <Ban size={13} />,\n  findNearbyStops: () => {},\n  GeocodedOptionIconComponent: GeocodedOptionIcon,\n  hideExistingValue: false,\n  inputPlaceholder: null,\n  location: null,\n  LocationIconComponent: DefaultLocationIcon,\n  nearbyStops: [],\n  onTextInputClick: null,\n  sessionOptionIcon: <Search size={13} />,\n  sessionSearches: [],\n  showClearButton: true,\n  showUserSettings: false,\n  static: false,\n  stopOptionIcon: <Bus size={13} />,\n  stopsIndex: null,\n  suppressNearby: false,\n  userLocationsAndRecentPlaces: [],\n  UserLocationIconComponent: UserLocationIcon\n};\n\nexport default LocationField;\n"]}