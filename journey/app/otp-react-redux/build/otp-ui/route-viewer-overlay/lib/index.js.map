{"version":3,"sources":["index.js"],"names":["Object","defineProperty","exports","value","default","_types","require","_propTypes","_interopRequireDefault","_react","_reactLeaflet","_polyline","obj","__esModule","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","isGeomComplete","routeData","patterns","values","every","ptn","geometry","RouteViewerOverlay","MapLayer","componentDidMount","componentWillUnmount","componentDidUpdate","prevProps","props","allPoints","reduce","acc","concat","decode","points","leaflet","map","fitBounds","createLeafletElement","updateLeafletElement","render","path","createElement","FeatureGroup","routeColor","color","segments","forEach","pattern","pts","push","Polyline","id","positions","propTypes","leafletPathType","shape","string","objectOf","encodedPolylineType","isRequired","defaultProps","opacity","weight","_default","withLeaflet"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _types = require(\"@opentripplanner/core-utils/lib/types\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactLeaflet = require(\"react-leaflet\");\n\nvar _polyline = _interopRequireDefault(require(\"@mapbox/polyline\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n// helper fn to check if geometry has been populated for all patterns in route\nconst isGeomComplete = routeData => {\n  return routeData && routeData.patterns && Object.values(routeData.patterns).every(ptn => typeof ptn.geometry !== \"undefined\");\n};\n/**\n * An overlay that will display all polylines of the patterns of a route.\n */\n\n\nclass RouteViewerOverlay extends _reactLeaflet.MapLayer {\n  componentDidMount() {} // TODO: determine why the default MapLayer componentWillUnmount() method throws an error\n\n\n  componentWillUnmount() {}\n\n  componentDidUpdate(prevProps) {\n    // if pattern geometry just finished populating, update the map points\n    if (!isGeomComplete(prevProps.routeData) && isGeomComplete(this.props.routeData)) {\n      const allPoints = Object.values(this.props.routeData.patterns).reduce((acc, ptn) => {\n        return acc.concat(_polyline.default.decode(ptn.geometry.points));\n      }, []);\n      this.props.leaflet.map.fitBounds(allPoints);\n    }\n  }\n\n  createLeafletElement() {}\n\n  updateLeafletElement() {}\n\n  render() {\n    const {\n      path,\n      routeData\n    } = this.props;\n    if (!routeData || !routeData.patterns) return /*#__PURE__*/_react.default.createElement(_reactLeaflet.FeatureGroup, null);\n    const routeColor = routeData.color ? `#${routeData.color}` : path.color;\n    const segments = [];\n    Object.values(routeData.patterns).forEach(pattern => {\n      if (!pattern.geometry) return;\n\n      const pts = _polyline.default.decode(pattern.geometry.points);\n\n      segments.push( /*#__PURE__*/_react.default.createElement(_reactLeaflet.Polyline\n      /* eslint-disable-next-line react/jsx-props-no-spreading */\n      , _extends({}, path, {\n        color: routeColor,\n        key: pattern.id,\n        positions: pts\n      })));\n    });\n    return segments.length > 0 ? /*#__PURE__*/_react.default.createElement(_reactLeaflet.FeatureGroup, null, /*#__PURE__*/_react.default.createElement(\"div\", null, segments)) : /*#__PURE__*/_react.default.createElement(_reactLeaflet.FeatureGroup, null);\n  }\n\n}\n\nRouteViewerOverlay.propTypes = {\n  /**\n   * Leaflet path properties to use to style each polyline that represents a\n   * pattern of the route. Only a few of the items are actually used.\n   *\n   * See https://leafletjs.com/reference-1.6.0.html#path\n   */\n  path: _types.leafletPathType,\n\n  /**\n   * This represents data about a route as obtained from a transit index.\n   * Typically a route has more data than these items, so this is only a list of\n   * the properties that this component actually uses.\n   */\n  routeData: _propTypes.default.shape({\n    color: _propTypes.default.string,\n    patterns: _propTypes.default.objectOf(_propTypes.default.shape({\n      geometry: _types.encodedPolylineType,\n      id: _propTypes.default.string.isRequired\n    }).isRequired)\n  })\n};\nRouteViewerOverlay.defaultProps = {\n  path: {\n    color: \"#00bfff\",\n    opacity: 1,\n    weight: 4\n  }\n};\n\nvar _default = (0, _reactLeaflet.withLeaflet)(RouteViewerOverlay);\n\nexports.default = _default;"]}