{"version":3,"sources":["index.js"],"names":["isGeomComplete","routeData","patterns","Object","values","every","ptn","geometry","RouteViewerOverlay","MapLayer","componentDidMount","componentWillUnmount","componentDidUpdate","prevProps","props","allPoints","reduce","acc","concat","polyline","decode","points","leaflet","map","fitBounds","createLeafletElement","updateLeafletElement","render","path","routeColor","color","segments","forEach","pattern","pts","push","id","length","propTypes","leafletPathType","PropTypes","shape","string","objectOf","encodedPolylineType","isRequired","defaultProps","opacity","weight"],"mappings":"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","sourcesContent":["import {\n  encodedPolylineType,\n  leafletPathType\n} from \"../../core-utils/src/types\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { FeatureGroup, MapLayer, Polyline, withLeaflet } from \"react-leaflet\";\n\nimport polyline from \"@mapbox/polyline\";\n\n// helper fn to check if geometry has been populated for all patterns in route\nconst isGeomComplete = routeData => {\n  return (\n    routeData &&\n    routeData.patterns &&\n    Object.values(routeData.patterns).every(\n      ptn => typeof ptn.geometry !== \"undefined\"\n    )\n  );\n};\n\n/**\n * An overlay that will display all polylines of the patterns of a route.\n */\nclass RouteViewerOverlay extends MapLayer {\n  componentDidMount() {}\n\n  // TODO: determine why the default MapLayer componentWillUnmount() method throws an error\n  componentWillUnmount() {}\n\n  componentDidUpdate(prevProps) {\n    // if pattern geometry just finished populating, update the map points\n    if (\n      !isGeomComplete(prevProps.routeData) &&\n      isGeomComplete(this.props.routeData)\n    ) {\n      const allPoints = Object.values(this.props.routeData.patterns).reduce(\n        (acc, ptn) => {\n          return acc.concat(polyline.decode(ptn.geometry.points));\n        },\n        []\n      );\n      this.props.leaflet.map.fitBounds(allPoints);\n    }\n  }\n\n  createLeafletElement() {}\n\n  updateLeafletElement() {}\n\n  render() {\n    const { path, routeData } = this.props;\n\n    if (!routeData || !routeData.patterns) return <FeatureGroup />;\n\n    const routeColor = routeData.color ? `#${routeData.color}` : path.color;\n    const segments = [];\n    Object.values(routeData.patterns).forEach(pattern => {\n      if (!pattern.geometry) return;\n      const pts = polyline.decode(pattern.geometry.points);\n      segments.push(\n        <Polyline\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...path}\n          color={routeColor}\n          key={pattern.id}\n          positions={pts}\n        />\n      );\n    });\n\n    return segments.length > 0 ? (\n      <FeatureGroup>\n        <div>{segments}</div>\n      </FeatureGroup>\n    ) : (\n      <FeatureGroup />\n    );\n  }\n}\n\nRouteViewerOverlay.propTypes = {\n  /**\n   * Leaflet path properties to use to style each polyline that represents a\n   * pattern of the route. Only a few of the items are actually used.\n   *\n   * See https://leafletjs.com/reference-1.6.0.html#path\n   */\n  path: leafletPathType,\n  /**\n   * This represents data about a route as obtained from a transit index.\n   * Typically a route has more data than these items, so this is only a list of\n   * the properties that this component actually uses.\n   */\n  routeData: PropTypes.shape({\n    color: PropTypes.string,\n    patterns: PropTypes.objectOf(\n      PropTypes.shape({\n        geometry: encodedPolylineType,\n        id: PropTypes.string.isRequired\n      }).isRequired\n    )\n  })\n};\n\nRouteViewerOverlay.defaultProps = {\n  path: {\n    color: \"#00bfff\",\n    opacity: 1,\n    weight: 4\n  }\n};\n\nexport default withLeaflet(RouteViewerOverlay);\n"]}