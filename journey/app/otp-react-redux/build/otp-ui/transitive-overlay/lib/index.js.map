{"version":3,"sources":["index.js"],"names":["Object","defineProperty","exports","value","default","_leaflet","_interopRequireDefault","require","_lodash","_types","_reactLeaflet","_transitiveJs","_transitiveStyles","obj","__esModule","checkHiPPI","canvas","window","devicePixelRatio","PIXEL_RATIO","style","width","height","context","getContext","scale","zoomFactors","minScale","gridCellSize","internalVertexFactor","angleConstraint","mergeVertexThreshold","useGeographicRendering","TransitiveCanvasOverlay","MapLayer","componentDidMount","map","props","leaflet","canvasLayer","delegate","addTo","componentDidUpdate","prevProps","transitive","transitiveData","updateData","render","updateBoundsAndRender","routingType","activeItinerary","focusJourney","journeys","journey_id","componentWillUnmount","initTransitive","mapBounds","getBounds","data","initialBounds","getWest","getSouth","getEast","getNorth","zoomEnabled","autoResize","styles","display","console","log","setDisplayBounds","onDrawLayer","info","mapSize","getSize","lastMapSize","x","y","setDimensions","setCanvas","createTile","createLeafletElement","updateLeafletElement","propTypes","transitiveDataType","_default","withLeaflet"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _leaflet = _interopRequireDefault(require(\"leaflet\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash.isequal\"));\n\nvar _types = require(\"@opentripplanner/core-utils/lib/types\");\n\nvar _reactLeaflet = require(\"react-leaflet\");\n\nvar _transitiveJs = _interopRequireDefault(require(\"transitive-js\"));\n\nvar _transitiveStyles = _interopRequireDefault(require(\"./transitive-styles\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nrequire(\"./leaflet-canvas-layer\"); // TODO: move to util?\n\n\nfunction checkHiPPI(canvas) {\n  if (window.devicePixelRatio > 1) {\n    const PIXEL_RATIO = 2;\n    canvas.style.width = `${canvas.width}px`;\n    canvas.style.height = `${canvas.height}px`;\n    canvas.width *= PIXEL_RATIO;\n    canvas.height *= PIXEL_RATIO;\n    const context = canvas.getContext(\"2d\");\n    context.scale(PIXEL_RATIO, PIXEL_RATIO);\n  }\n}\n\nconst zoomFactors = [{\n  minScale: 0,\n  gridCellSize: 0,\n  internalVertexFactor: 0,\n  angleConstraint: 5,\n  mergeVertexThreshold: 0,\n  useGeographicRendering: true\n}];\n\nclass TransitiveCanvasOverlay extends _reactLeaflet.MapLayer {\n  // React Lifecycle Methods\n  componentDidMount() {\n    const {\n      map\n    } = this.props.leaflet;\n\n    _leaflet.default.canvasLayer().delegate(this) // -- if we do not inherit from L.CanvasLayer  we can setup a delegate to receive events from L.CanvasLayer\n    .addTo(map);\n  }\n\n  componentDidUpdate(prevProps) {\n    // Check if we received new transitive data\n    if (this.transitive && !(0, _lodash.default)(prevProps.transitiveData, this.props.transitiveData)) {\n      this.transitive.updateData(this.props.transitiveData);\n      if (!this.props.transitiveData) this.transitive.render();else this.updateBoundsAndRender();\n    }\n\n    if ( // this block only applies for profile trips where active option changed\n    this.props.routingType === \"PROFILE\" && prevProps.activeItinerary !== this.props.activeItinerary) {\n      if (this.props.activeItinerary == null) {\n        // no option selected; clear focus\n        this.transitive.focusJourney(null);\n        this.transitive.render();\n      } else if (this.props.transitiveData) {\n        this.transitive.focusJourney(this.props.transitiveData.journeys[this.props.activeItinerary].journey_id);\n        this.transitive.render();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.transitive) {\n      this.transitive.updateData(null);\n      this.transitive.render();\n    }\n  } // Internal Methods\n\n\n  initTransitive(canvas) {\n    const {\n      leaflet,\n      transitiveData\n    } = this.props;\n    const {\n      map\n    } = leaflet; // set up the transitive instance\n\n    const mapBounds = map.getBounds();\n    this.transitive = new _transitiveJs.default({\n      data: transitiveData,\n      initialBounds: [[mapBounds.getWest(), mapBounds.getSouth()], [mapBounds.getEast(), mapBounds.getNorth()]],\n      zoomEnabled: false,\n      autoResize: false,\n      styles: _transitiveStyles.default,\n      zoomFactors,\n      display: \"canvas\",\n      canvas\n    });\n    checkHiPPI(canvas); // the initial map draw\n\n    this.updateBoundsAndRender();\n  }\n\n  updateBoundsAndRender() {\n    if (!this.transitive) {\n      console.log(\"WARNING: Transitive object not set in transitive-canvas-overlay\");\n      return;\n    }\n\n    const mapBounds = this.props.leaflet.map.getBounds();\n    this.transitive.setDisplayBounds([[mapBounds.getWest(), mapBounds.getSouth()], [mapBounds.getEast(), mapBounds.getNorth()]]);\n    this.transitive.render();\n  } // Leaflet Layer API Methods\n\n\n  onDrawLayer(info) {\n    if (!this.transitive) this.initTransitive(info.canvas);\n    const mapSize = this.props.leaflet.map.getSize();\n\n    if (this.lastMapSize && (mapSize.x !== this.lastMapSize.x || mapSize.y !== this.lastMapSize.y)) {\n      const canvas = info.canvas;\n      checkHiPPI(canvas);\n      this.transitive.display.setDimensions(mapSize.x, mapSize.y);\n      this.transitive.display.setCanvas(canvas);\n    }\n\n    this.updateBoundsAndRender();\n    this.lastMapSize = this.props.leaflet.map.getSize();\n  }\n\n  createTile() {}\n\n  createLeafletElement() {}\n\n  updateLeafletElement() {}\n\n}\n\nTransitiveCanvasOverlay.propTypes = {\n  /**\n   * The transitiveData object is assumed to be the result of converting an\n   * OpenTripPlanner itinerary result into a transitive-readable format. This is\n   * typically done using the @opentripplanner/core-utils/map#itineraryToTransitive\n   * function.\n   */\n  transitiveData: _types.transitiveDataType\n};\n\nvar _default = (0, _reactLeaflet.withLeaflet)(TransitiveCanvasOverlay);\n\nexports.default = _default;"]}