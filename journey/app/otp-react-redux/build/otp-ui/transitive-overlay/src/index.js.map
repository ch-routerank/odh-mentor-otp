{"version":3,"sources":["index.js"],"names":["require","checkHiPPI","canvas","window","devicePixelRatio","PIXEL_RATIO","style","width","height","context","getContext","scale","zoomFactors","minScale","gridCellSize","internalVertexFactor","angleConstraint","mergeVertexThreshold","useGeographicRendering","TransitiveCanvasOverlay","MapLayer","componentDidMount","map","props","leaflet","L","canvasLayer","delegate","addTo","componentDidUpdate","prevProps","transitive","transitiveData","updateData","render","updateBoundsAndRender","routingType","activeItinerary","focusJourney","journeys","journey_id","componentWillUnmount","initTransitive","mapBounds","getBounds","Transitive","data","initialBounds","getWest","getSouth","getEast","getNorth","zoomEnabled","autoResize","styles","transitiveStyles","display","console","log","setDisplayBounds","onDrawLayer","info","mapSize","getSize","lastMapSize","x","y","setDimensions","setCanvas","createTile","createLeafletElement","updateLeafletElement","propTypes","transitiveDataType"],"mappings":"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","sourcesContent":["import L from \"leaflet\";\nimport isEqual from \"lodash.isequal\";\nimport { transitiveDataType } from \"@opentripplanner/core-utils/lib/types\";\nimport { MapLayer, withLeaflet } from \"react-leaflet\";\nimport Transitive from \"transitive-js\";\n\nimport transitiveStyles from \"./transitive-styles\";\n\nrequire(\"./leaflet-canvas-layer\");\n\n// TODO: move to util?\nfunction checkHiPPI(canvas) {\n  if (window.devicePixelRatio > 1) {\n    const PIXEL_RATIO = 2;\n    canvas.style.width = `${canvas.width}px`;\n    canvas.style.height = `${canvas.height}px`;\n\n    canvas.width *= PIXEL_RATIO;\n    canvas.height *= PIXEL_RATIO;\n\n    const context = canvas.getContext(\"2d\");\n    context.scale(PIXEL_RATIO, PIXEL_RATIO);\n  }\n}\n\nconst zoomFactors = [\n  {\n    minScale: 0,\n    gridCellSize: 0,\n    internalVertexFactor: 0,\n    angleConstraint: 5,\n    mergeVertexThreshold: 0,\n    useGeographicRendering: true\n  }\n];\n\nclass TransitiveCanvasOverlay extends MapLayer {\n  // React Lifecycle Methods\n\n  componentDidMount() {\n    const { map } = this.props.leaflet;\n    L.canvasLayer()\n      .delegate(this) // -- if we do not inherit from L.CanvasLayer  we can setup a delegate to receive events from L.CanvasLayer\n      .addTo(map);\n  }\n\n  componentDidUpdate(prevProps) {\n    // Check if we received new transitive data\n    if (\n      this.transitive &&\n      !isEqual(prevProps.transitiveData, this.props.transitiveData)\n    ) {\n      this.transitive.updateData(this.props.transitiveData);\n      if (!this.props.transitiveData) this.transitive.render();\n      else this.updateBoundsAndRender();\n    }\n\n    if (\n      // this block only applies for profile trips where active option changed\n      this.props.routingType === \"PROFILE\" &&\n      prevProps.activeItinerary !== this.props.activeItinerary\n    ) {\n      if (this.props.activeItinerary == null) {\n        // no option selected; clear focus\n        this.transitive.focusJourney(null);\n        this.transitive.render();\n      } else if (this.props.transitiveData) {\n        this.transitive.focusJourney(\n          this.props.transitiveData.journeys[this.props.activeItinerary]\n            .journey_id\n        );\n        this.transitive.render();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.transitive) {\n      this.transitive.updateData(null);\n      this.transitive.render();\n    }\n  }\n\n  // Internal Methods\n\n  initTransitive(canvas) {\n    const { leaflet, transitiveData } = this.props;\n    const { map } = leaflet;\n\n    // set up the transitive instance\n    const mapBounds = map.getBounds();\n    this.transitive = new Transitive({\n      data: transitiveData,\n      initialBounds: [\n        [mapBounds.getWest(), mapBounds.getSouth()],\n        [mapBounds.getEast(), mapBounds.getNorth()]\n      ],\n      zoomEnabled: false,\n      autoResize: false,\n      styles: transitiveStyles,\n      zoomFactors,\n      display: \"canvas\",\n      canvas\n    });\n\n    checkHiPPI(canvas);\n\n    // the initial map draw\n    this.updateBoundsAndRender();\n  }\n\n  updateBoundsAndRender() {\n    if (!this.transitive) {\n      console.log(\n        \"WARNING: Transitive object not set in transitive-canvas-overlay\"\n      );\n      return;\n    }\n\n    const mapBounds = this.props.leaflet.map.getBounds();\n    this.transitive.setDisplayBounds([\n      [mapBounds.getWest(), mapBounds.getSouth()],\n      [mapBounds.getEast(), mapBounds.getNorth()]\n    ]);\n    this.transitive.render();\n  }\n\n  // Leaflet Layer API Methods\n\n  onDrawLayer(info) {\n    if (!this.transitive) this.initTransitive(info.canvas);\n\n    const mapSize = this.props.leaflet.map.getSize();\n    if (\n      this.lastMapSize &&\n      (mapSize.x !== this.lastMapSize.x || mapSize.y !== this.lastMapSize.y)\n    ) {\n      const canvas = info.canvas;\n      checkHiPPI(canvas);\n      this.transitive.display.setDimensions(mapSize.x, mapSize.y);\n      this.transitive.display.setCanvas(canvas);\n    }\n\n    this.updateBoundsAndRender();\n\n    this.lastMapSize = this.props.leaflet.map.getSize();\n  }\n\n  createTile() {}\n\n  createLeafletElement() {}\n\n  updateLeafletElement() {}\n}\n\nTransitiveCanvasOverlay.propTypes = {\n  /**\n   * The transitiveData object is assumed to be the result of converting an\n   * OpenTripPlanner itinerary result into a transitive-readable format. This is\n   * typically done using the @opentripplanner/core-utils/map#itineraryToTransitive\n   * function.\n   */\n  transitiveData: transitiveDataType\n};\n\nexport default withLeaflet(TransitiveCanvasOverlay);\n"]}