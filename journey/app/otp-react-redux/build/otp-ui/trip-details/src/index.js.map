{"version":3,"sources":["index.js"],"names":["TripDetails","className","itinerary","longDateFormat","messages","routingType","timeOptions","date","startTime","defaultProps","centsToString","dollarsToString","maxTNCFare","minTNCFare","transitFare","companies","legs","forEach","leg","tncData","company","fare","toLowerCase","bikeDuration","caloriesBurned","walkDuration","title","departDescription","depart","format","at","transitFareDescription","Math","round","propTypes","PropTypes","string","itineraryType","isRequired","shape","caloriesBurnedDescription","timeOptionsType"],"mappings":"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","sourcesContent":["import {\n  calculateFares,\n  calculatePhysicalActivity\n} from \"@opentripplanner/core-utils/lib/itinerary\";\nimport { mergeMessages } from \"@opentripplanner/core-utils/lib/messages\";\nimport { formatTime } from \"@opentripplanner/core-utils/lib/time\";\nimport {\n  itineraryType,\n  timeOptionsType\n} from \"@opentripplanner/core-utils/lib/types\";\nimport moment from \"moment\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { CalendarAlt, Heartbeat, MoneyBillAlt } from \"styled-icons/fa-solid\";\n\nimport * as Styled from \"./styled\";\nimport TripDetail from \"./trip-detail\";\n\nexport default function TripDetails({\n  className,\n  itinerary,\n  longDateFormat,\n  messages,\n  routingType,\n  timeOptions\n}) {\n  const date = moment(itinerary.startTime);\n  messages = mergeMessages(TripDetails.defaultProps.messages, messages);\n\n  // process the transit fare\n  const {\n    centsToString,\n    dollarsToString,\n    maxTNCFare,\n    minTNCFare,\n    transitFare\n  } = calculateFares(itinerary);\n  let companies;\n  itinerary.legs.forEach(leg => {\n    if (leg.tncData) {\n      companies = leg.tncData.company;\n    }\n  });\n  let fare;\n  if (transitFare || minTNCFare) {\n    fare = (\n      <Styled.Fare>\n        {transitFare && (\n          <Styled.TransitFare>\n            {messages.transitFare}: <b>{centsToString(transitFare)}</b>\n          </Styled.TransitFare>\n        )}\n        {minTNCFare !== 0 && (\n          <Styled.TNCFare>\n            <br />\n            <Styled.TNCFareCompanies>\n              {companies.toLowerCase()}\n            </Styled.TNCFareCompanies>{\" \"}\n            {messages.fare}:{\" \"}\n            <b>\n              {dollarsToString(minTNCFare)} - {dollarsToString(maxTNCFare)}\n            </b>\n          </Styled.TNCFare>\n        )}\n      </Styled.Fare>\n    );\n  }\n\n  // Compute calories burned.\n  const {\n    bikeDuration,\n    caloriesBurned,\n    walkDuration\n  } = calculatePhysicalActivity(itinerary);\n\n  return (\n    <Styled.TripDetails className={className}>\n      <Styled.TripDetailsHeader>{messages.title}</Styled.TripDetailsHeader>\n      <Styled.TripDetailsBody>\n        <TripDetail\n          description={messages.departDescription}\n          icon={<CalendarAlt size={17} />}\n          summary={\n            <Styled.Timing>\n              <span>\n                {messages.depart} <b>{date.format(longDateFormat)}</b>\n              </span>\n              {routingType === \"ITINERARY\" && (\n                <span>\n                  {\" \"}\n                  {messages.at}{\" \"}\n                  <b>{formatTime(itinerary.startTime, timeOptions)}</b>\n                </span>\n              )}\n            </Styled.Timing>\n          }\n        />\n        {fare && (\n          <TripDetail\n            description={messages.transitFareDescription}\n            icon={<MoneyBillAlt size={17} />}\n            summary={fare}\n          />\n        )}\n        {caloriesBurned > 0 && (\n          <TripDetail\n            icon={<Heartbeat size={17} />}\n            summary={\n              <Styled.CaloriesSummary>\n                {messages.caloriesBurned}: <b>{Math.round(caloriesBurned)}</b>\n              </Styled.CaloriesSummary>\n            }\n            description={\n              <Styled.CaloriesDescription>\n                $_calories_info_1_${\" \"}\n                <b>{Math.round(walkDuration / 60)} minute(s)</b> spent walking\n                and <b>{Math.round(bikeDuration / 60)} minute(s)</b> spent\n                biking during this trip. Adapted from{\" \"}\n                <a\n                  href=\"https://health.gov/dietaryguidelines/dga2005/document/html/chapter3.htm#table4\"\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                  Dietary Guidelines for Americans 2005, page 16, Table 4\n                </a>\n                .\n              </Styled.CaloriesDescription>\n            }\n          />\n        )}\n      </Styled.TripDetailsBody>\n    </Styled.TripDetails>\n  );\n}\n\nTripDetails.propTypes = {\n  /** Used for additional styling with styled components for example. */\n  className: PropTypes.string,\n  /** Itinerary that the user has selected to view, contains multiple legs */\n  itinerary: itineraryType.isRequired,\n  /** the desired format to use for a long date */\n  longDateFormat: PropTypes.string,\n  /**\n   * messages to use for l10n/i8n\n   *\n   * Note: messages with default null values included here for visibility.\n   * Overriding with a truthy string value will cause the expandable help\n   * message to appear in trip details.\n   */\n  messages: PropTypes.shape({\n    at: PropTypes.string,\n    caloriesBurned: PropTypes.string,\n    // FIXME: Add templated string description.\n    caloriesBurnedDescription: PropTypes.string,\n    depart: PropTypes.string,\n    departDescription: PropTypes.string,\n    title: PropTypes.string,\n    fare: PropTypes.string,\n    transitFare: PropTypes.string,\n    transitFareDescription: PropTypes.string\n  }),\n  /** whether the routing type is an itinerary or a profile result */\n  routingType: PropTypes.string,\n  /** Contains the preferred format string for time display and a timezone offset */\n  timeOptions: timeOptionsType\n};\n\nTripDetails.defaultProps = {\n  className: null,\n  longDateFormat: null,\n  messages: {\n    at: \"$_at_time_$\",\n    caloriesBurned: \"$_calories_$\",\n    // FIXME: Add templated string description.\n    caloriesBurnedDescription: null,\n    depart: \"$_departure_$\",\n    departDescription: null,\n    title: \"$_details_trip_$\",\n    fare: \"Fare\",\n    transitFare: \"Transit Fare\",\n    transitFareDescription: null\n  },\n  routingType: \"ITINERARY\",\n  timeOptions: null\n};\n"]}