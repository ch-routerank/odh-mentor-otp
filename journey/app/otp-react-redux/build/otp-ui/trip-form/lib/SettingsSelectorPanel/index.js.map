{"version":3,"sources":["index.js"],"names":["Object","defineProperty","exports","value","default","_icons","require","_react","_interopRequireWildcard","_propTypes","_interopRequireDefault","_itinerary","_types","_ModeSelector","_SubmodeSelector","_GeneralSettingsPanel","Styled","_util","obj","__esModule","_getRequireWildcardCache","WeakMap","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_defineProperty","enumerable","configurable","writable","SettingsSelectorPanel","Component","constructor","queryParam","queryParams","props","onQueryParamChange","id","supportedModes","supportedCompanies","newModes","split","selectedModes","getSelectedModes","activeTransitModes","filter","isTransit","lastTransitModes","state","length","allTransitModes","transitModes","map","modeObj","mode","concat","defaultAccessModeCompany","companies","nonTransitModes","getCompaniesForModeId","finalModes","handleQueryParamChange","join","setState","toggleSubmode","selectedCompanies","getSelectedCompanies","undefined","raiseOnQueryParamChange","name","submodes","o","after","newSubmodes","idx","indexOf","subset","splice","push","render","className","ModeIcon","style","modeOptions","getModeOptions","getTransitSubmodeOptions","m","getCompaniesOptions","comp","bikeModes","getBicycleOrMicromobilityModeOptions","bicycleModes","scooterModes","micromobilityModes","createElement","modes","onChange","handleMainModeChange","margin","paddingBottom","SettingsHeader","some","label","handleTransitModeChange","isBike","inline","isMicromobility","handleCompanyChange","query","propTypes","string","elementType","func","any","arrayOf","configuredCompanyType","configuredModesType","isRequired","defaultProps","TriMetModeIcon"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _icons = require(\"@opentripplanner/icons\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _itinerary = require(\"@opentripplanner/core-utils/lib/itinerary\");\n\nvar _types = require(\"@opentripplanner/core-utils/lib/types\");\n\nvar _ModeSelector = _interopRequireDefault(require(\"../ModeSelector\"));\n\nvar _SubmodeSelector = _interopRequireDefault(require(\"../SubmodeSelector\"));\n\nvar _GeneralSettingsPanel = _interopRequireDefault(require(\"../GeneralSettingsPanel\"));\n\nvar Styled = _interopRequireWildcard(require(\"../styled\"));\n\nvar _util = require(\"../util\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * The Settings Selector Panel allows the user to set trip search preferences,\n * such as modes, providers, and speed preferences.\n */\nclass SettingsSelectorPanel extends _react.Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"makeNewQueryParams\", queryParam => {\n      const {\n        queryParams\n      } = this.props;\n      return { ...queryParams,\n        ...queryParam\n      };\n    });\n\n    _defineProperty(this, \"raiseOnQueryParamChange\", queryParam => {\n      const {\n        onQueryParamChange\n      } = this.props;\n\n      if (typeof onQueryParamChange === \"function\") {\n        onQueryParamChange(queryParam);\n      }\n    });\n\n    _defineProperty(this, \"handleMainModeChange\", id => {\n      const {\n        supportedModes,\n        supportedCompanies\n      } = this.props;\n      const newModes = id.split(\"+\");\n\n      if (newModes[0] === \"TRANSIT\") {\n        const selectedModes = this.getSelectedModes();\n        const activeTransitModes = selectedModes.filter(_itinerary.isTransit);\n        let {\n          lastTransitModes\n        } = this.state;\n\n        if (lastTransitModes.length === 0) {\n          const allTransitModes = supportedModes.transitModes.map(modeObj => modeObj.mode);\n          lastTransitModes = lastTransitModes.concat(allTransitModes);\n        }\n\n        const {\n          defaultAccessModeCompany,\n          companies,\n          nonTransitModes\n        } = (0, _util.getCompaniesForModeId)(id, supportedCompanies); // Add previously selected transit modes only if none were active.\n\n        const finalModes = (activeTransitModes.length > 0 ? activeTransitModes : lastTransitModes).concat(nonTransitModes);\n        this.handleQueryParamChange({\n          mode: finalModes.join(\",\"),\n          companies: companies.join(\",\")\n        });\n        this.setState({\n          defaultAccessModeCompany: defaultAccessModeCompany && defaultAccessModeCompany[0]\n        });\n      } else {\n        this.handleQueryParamChange({\n          mode: newModes.join(\",\"),\n          companies: \"\" // New req: Don't list companies with this mode?\n\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleTransitModeChange\", id => {\n      const selectedModes = this.getSelectedModes();\n      this.toggleSubmode(\"mode\", id, selectedModes, _itinerary.isTransit, newModes => {\n        this.setState({\n          lastTransitModes: newModes.filter(_itinerary.isTransit)\n        });\n      });\n    });\n\n    _defineProperty(this, \"handleCompanyChange\", id => {\n      const selectedCompanies = this.getSelectedCompanies();\n      this.toggleSubmode(\"companies\", id, selectedCompanies, undefined, () => {});\n    });\n\n    _defineProperty(this, \"handleQueryParamChange\", queryParam => {\n      this.raiseOnQueryParamChange(queryParam);\n    });\n\n    _defineProperty(this, \"toggleSubmode\", (name, id, submodes, filter = o => o, after) => {\n      const newSubmodes = [].concat(submodes);\n      const idx = newSubmodes.indexOf(id); // If the clicked mode is selected, then unselect it, o/w select it.\n      // Leave at least one selected, as in newplanner.trimet.org.\n\n      if (idx >= 0) {\n        const subset = newSubmodes.filter(filter);\n\n        if (subset.length >= 2) {\n          newSubmodes.splice(idx, 1);\n        }\n      } else {\n        newSubmodes.push(id);\n      }\n\n      if (newSubmodes.length !== submodes.length) {\n        this.handleQueryParamChange({\n          [name]: newSubmodes.join(\",\")\n        });\n        if (after) after(newSubmodes);\n      }\n    });\n\n    this.state = {\n      defaultAccessModeCompany: null,\n      lastTransitModes: []\n    };\n  }\n\n  getSelectedCompanies() {\n    const {\n      queryParams\n    } = this.props;\n    const {\n      companies\n    } = queryParams;\n    return companies ? companies.split(\",\") : [];\n  }\n\n  getSelectedModes() {\n    const {\n      queryParams\n    } = this.props;\n    const {\n      mode\n    } = queryParams;\n    return mode ? mode.split(\",\") : [];\n  }\n\n  render() {\n    const {\n      className,\n      ModeIcon,\n      queryParams,\n      supportedModes,\n      supportedCompanies,\n      style\n    } = this.props;\n    const {\n      defaultAccessModeCompany\n    } = this.state;\n    const selectedModes = this.getSelectedModes();\n    const selectedCompanies = this.getSelectedCompanies();\n    const modeOptions = (0, _util.getModeOptions)(ModeIcon, supportedModes, selectedModes, selectedCompanies, supportedCompanies);\n    const transitModes = (0, _util.getTransitSubmodeOptions)(ModeIcon, supportedModes, selectedModes);\n    const nonTransitModes = selectedModes.filter(m => !(0, _itinerary.isTransit)(m));\n    const companies = (0, _util.getCompaniesOptions)(supportedCompanies.filter(comp => defaultAccessModeCompany ? comp.id === defaultAccessModeCompany : true), nonTransitModes, selectedCompanies);\n    const bikeModes = (0, _util.getBicycleOrMicromobilityModeOptions)(ModeIcon, supportedModes.bicycleModes, selectedModes);\n    const scooterModes = (0, _util.getBicycleOrMicromobilityModeOptions)(ModeIcon, supportedModes.micromobilityModes, selectedModes);\n    return /*#__PURE__*/_react.default.createElement(Styled.SettingsSelectorPanel, {\n      className: className,\n      style: style\n    }, /*#__PURE__*/_react.default.createElement(_ModeSelector.default, {\n      modes: modeOptions,\n      onChange: this.handleMainModeChange,\n      style: {\n        margin: \"0px -5px\",\n        paddingBottom: \"8px\"\n      }\n    }), /*#__PURE__*/_react.default.createElement(Styled.SettingsHeader, null, \"$_preferences_$\"), selectedModes.some(_itinerary.isTransit) && transitModes.length >= 2 && /*#__PURE__*/_react.default.createElement(_SubmodeSelector.default, {\n      label: \"$_mode_$\",\n      modes: transitModes,\n      onChange: this.handleTransitModeChange\n    }), selectedModes.some(_util.isBike) && !selectedModes.some(_itinerary.isTransit) && /*#__PURE__*/_react.default.createElement(_SubmodeSelector.default, {\n      label: \"$_mode_$\",\n      inline: true,\n      modes: bikeModes,\n      onChange: this.handleMainModeChange\n    }), selectedModes.some(_itinerary.isMicromobility) && !selectedModes.some(_itinerary.isTransit) && /*#__PURE__*/_react.default.createElement(_SubmodeSelector.default, {\n      label: \"$_mode_$\",\n      inline: true,\n      modes: scooterModes,\n      onChange: this.handleMainModeChange\n    }), companies.length >= 2 && /*#__PURE__*/_react.default.createElement(_SubmodeSelector.default, {\n      label: \"Use companies\",\n      modes: companies,\n      onChange: this.handleCompanyChange\n    }), /*#__PURE__*/_react.default.createElement(_GeneralSettingsPanel.default, {\n      query: queryParams,\n      supportedModes: supportedModes,\n      onQueryParamChange: this.handleQueryParamChange\n    }));\n  }\n\n}\n\nexports.default = SettingsSelectorPanel;\nSettingsSelectorPanel.propTypes = {\n  /**\n   * The CSS class name to apply to this element.\n   */\n  className: _propTypes.default.string,\n\n  /**\n   * The icon component for rendering mode icons. Defaults to the OPT-UI TriMetModeIcon component.\n   */\n  ModeIcon: _propTypes.default.elementType,\n\n  /**\n   * Triggered when a query parameter is changed.\n   * @param params An object that contains the new values for the parameter(s) that has (have) changed.\n   */\n  onQueryParamChange: _propTypes.default.func,\n\n  /**\n   * An object {parameterName: value, ...} whose attributes correspond to query parameters.\n   * For query parameter names and value formats,\n   * see https://github.com/opentripplanner/otp-ui/blob/master/packages/core-utils/src/__tests__/query.js#L14\n   */\n  // Disable type check because the only use of queryParams is to be passed to\n  // method getQueryParamProperty from \"@opentripplanner/core-utils/lib/query\".\n  // eslint-disable-next-line react/forbid-prop-types\n  queryParams: _propTypes.default.any,\n\n  /**\n   * An array of supported companies that will be displayed as options where applicable.\n   */\n  supportedCompanies: _propTypes.default.arrayOf(_types.configuredCompanyType),\n\n  /**\n   * An array of supported modes that will be displayed as options.\n   */\n  supportedModes: _types.configuredModesType.isRequired\n};\nSettingsSelectorPanel.defaultProps = {\n  className: null,\n  ModeIcon: _icons.TriMetModeIcon,\n  onQueryParamChange: null,\n  queryParams: null,\n  supportedCompanies: []\n};"]}