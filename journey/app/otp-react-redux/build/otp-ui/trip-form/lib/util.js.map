{"version":3,"sources":["util.js"],"names":["Object","defineProperty","exports","value","isBike","getModeString","getCompaniesForModeId","getTransitSubmodeOptions","getModeOptions","getCompaniesOptions","getBicycleOrMicromobilityModeOptions","_react","_interopRequireDefault","require","_itinerary","_companies","obj","__esModule","default","mode","isBicycle","isBicycleRent","supportedExclusiveModes","label","isActive","isWalk","isMicromobility","modeObj","getCompanies","companies","modes","filter","comp","split","m","includes","length","hasRental","hasHail","id","supportedCompanies","newModes","nonTransitModes","defaultAccessModeCompany","toUpperCase","map","ModeIcon","selectedModes","transitModes","modeStr","selected","text","createElement","title","getPrimaryModeOption","some","isTransit","showTitle","getTransitCombinedModeOptions","selectedCompanies","accessModes","modesHaveTransit","modeCompany","company","modeMonopoly","CompanyIcon","getCompanyIcon","FinalIcon","getExclusiveModeOptions","exclusiveModes","primary","secondary","tertiary"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isBike = isBike;\nexports.getModeString = getModeString;\nexports.getCompaniesForModeId = getCompaniesForModeId;\nexports.getTransitSubmodeOptions = getTransitSubmodeOptions;\nexports.getModeOptions = getModeOptions;\nexports.getCompaniesOptions = getCompaniesOptions;\nexports.getBicycleOrMicromobilityModeOptions = getBicycleOrMicromobilityModeOptions;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _itinerary = require(\"@opentripplanner/core-utils/lib/itinerary\");\n\nvar _companies = require(\"@opentripplanner/icons/lib/companies\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isBike(mode) {\n  return (0, _itinerary.isBicycle)(mode) || (0, _itinerary.isBicycleRent)(mode);\n}\n\nconst supportedExclusiveModes = [{\n  mode: \"WALK\",\n  label: \"$_by_walk_$\",\n  isActive: _itinerary.isWalk\n}, {\n  mode: \"BICYCLE\",\n  label: \"$_by_bike_$\",\n  isActive: isBike\n}, {\n  mode: \"MICROMOBILITY\",\n  label: \"E-scooter Only\",\n  isActive: _itinerary.isMicromobility\n}];\n/**\n * Obtains the mode-as-a-string from a mode object found in the configuration.\n * In config.yaml, you can write either:\n *   transitModes:    -or-   transitModes:\n *   - BUS                   - mode: BUS\n *   - RAIL                    label: Bus\n *                           - mode: RAIL\n *                             label: Commuter Rail\n *\n * @param modeObj The mode object per the configuration to convert.\n */\n\nfunction getModeString(modeObj) {\n  return modeObj.mode || modeObj;\n}\n/**\n * Of the specified companies, returns those that operate the specified modes.\n * @param companies The supported companies per OTP configuration.\n * @param modes The desired modes for which to get the operating companies.\n * @returns An array of companies that operate the specified modes (should not be undefined as companies is an array).\n */\n\n\nfunction getCompanies(companies, modes) {\n  return companies.filter(comp => comp.modes.split(\",\").filter(m => modes.includes(m)).length > 0).filter(comp => (0, _itinerary.hasRental)(comp.modes) || (0, _itinerary.hasHail)(comp.modes));\n}\n/**\n * Returns an array containing the company ids, in upper case for MOD UI URLs, for the specified mode id.\n * The mode id scheme is set and used by function getTransitCombinedModeOptions().\n * @param id The mode id to process.\n * @param supportedCompanies The list of supported companies (see structure in __mocks__/companies.js).\n */\n\n\nfunction getCompaniesForModeId(id, supportedCompanies) {\n  const newModes = id.split(\"+\");\n  const nonTransitModes = newModes.length > 1 ? [newModes[1]] : [\"WALK\"]; // TODO: for non-transit modes, shoudl we also accommodate WALK+DRIVE, WALK+e-scooter??\n  // They already seem to work without WALK right now.\n  // Accommodate companies defined under accessModes.\n  // Convert company ID to upper case for passing to MOD UI URL.\n\n  const defaultAccessModeCompany = newModes.length > 2 ? [newModes[2].toUpperCase()] : null; // If there are multiple (scooter | bikeshare | etc.) companies,\n  // then if one is specified in the configured modes, then use that company.\n  // Othewise, if this is for an exclusive mode (bike, scooter), then use all companies.\n  // Convert company IDs to upper case for passing to MOD UI URL.\n  // selectedCompanies is at least an empty array.\n\n  const companies = defaultAccessModeCompany || getCompanies(supportedCompanies, nonTransitModes).map(comp => comp.id.toUpperCase());\n  return {\n    defaultAccessModeCompany,\n    companies,\n    nonTransitModes\n  };\n}\n/**\n * Returns the available transit modes (rail, bus, etc.).\n * @param ModeIcon The icon component for rendering.\n * @param modes The available modes to choose from.\n * @param selectedModes The modes that should appear selected.\n */\n\n\nfunction getTransitSubmodeOptions(ModeIcon, modes, selectedModes) {\n  const {\n    transitModes\n  } = modes; // FIXME: If only one transit mode is available, select it.\n\n  return transitModes.map(modeObj => {\n    const modeStr = getModeString(modeObj);\n    return {\n      id: modeStr,\n      selected: selectedModes.includes(modeStr),\n      text: /*#__PURE__*/_react.default.createElement(\"span\", null, /*#__PURE__*/_react.default.createElement(ModeIcon, {\n        mode: modeStr\n      }), modeObj.label),\n      title: modeObj.label\n    };\n  });\n}\n/**\n * Returns big primary \"Take Transit\" choice.\n * @param ModeIcon The icon component for rendering.\n * @param selectedModes An array of string that lists the modes selected for a trip query.\n */\n\n\nfunction getPrimaryModeOption(ModeIcon, selectedModes) {\n  return {\n    id: \"TRANSIT\",\n    selected: selectedModes.some(_itinerary.isTransit) && selectedModes.includes(\"WALK\"),\n    showTitle: false,\n    text: /*#__PURE__*/_react.default.createElement(\"span\", null, /*#__PURE__*/_react.default.createElement(ModeIcon, {\n      mode: \"TRANSIT\"\n  }), \"$_tpl_$\"),\n    title: \"$_tpl_$\"\n  };\n}\n/**\n * Returns the transit + access mode combinations.\n * @param icons The icon set to use.\n * @param modes The available modes to choose from.\n * @param selectedModes An array of string that lists the modes selected for a trip query.\n * @param selectedCompanies The companies to show as selected.\n * @param supportedCompanies The supported companies for certain modes.\n */\n\n\nfunction getTransitCombinedModeOptions(ModeIcon, modes, selectedModes, selectedCompanies, supportedCompanies) {\n  const {\n    accessModes\n  } = modes;\n  const modesHaveTransit = selectedModes.some(_itinerary.isTransit);\n  return accessModes && accessModes.map(modeObj => {\n    const modeStr = getModeString(modeObj);\n    const modeCompany = modeObj.company ? modeObj.company.toUpperCase() : null;\n    const company = modeObj.company ? `+${modeObj.company}` : \"\";\n    const id = `TRANSIT+${modeStr}${company}`;\n    const {\n      companies\n    } = getCompaniesForModeId(id, supportedCompanies);\n    const modeMonopoly = companies[0];\n    const CompanyIcon = (0, _companies.getCompanyIcon)(modeCompany || modeMonopoly || \"\");\n    /**\n     * We don't know in advance if a particular icon is supported by the ModeIcon component.\n     * Therefore, for rendering, we need to know whether one of the following\n     * did render something, so we know whether to fall back on the next icon.\n     * Hence the regular function call syntax rather than <Tags />.\n     *\n     * Access mode icons are processed in the order below, so that:\n     * - Any generic mode (e.g. BICYCLE_RENT) can be directly customized using `icons`,\n     * - Implementers can set icons for companies not in OTP-UI or override OTP-UI icons using `icons`,\n     *   using the scheme <OTP_MODE>_<COMPANY> (e.g. 'CAR_HAIL_UBER').\n     * - Icons for common companies (defined in the icons package) don't need to be specified in `icons`.\n     */\n\n    const FinalIcon = ModeIcon({\n      mode: modeStr\n    }) || ModeIcon({\n      mode: `${modeStr}_${modeCompany}`\n    }) || CompanyIcon && /*#__PURE__*/_react.default.createElement(CompanyIcon, null);\n\n    return {\n      id,\n      selected: modesHaveTransit && selectedModes.includes(modeStr) && (!selectedCompanies.length || !modeCompany || selectedCompanies.includes(modeCompany)),\n      text: /*#__PURE__*/_react.default.createElement(\"span\", null, /*#__PURE__*/_react.default.createElement(ModeIcon, {\n        mode: \"TRANSIT\"\n      }), \"+\", FinalIcon),\n      title: modeObj.label\n    };\n  });\n}\n/**\n * Returns the exclusive mode options.\n * @param ModeIcon The icon component for rendering.\n * @param modes The available modes to choose from.\n * @param selectedModes An array of string that lists the modes selected for a trip query.\n */\n\n\nfunction getExclusiveModeOptions(ModeIcon, modes, selectedModes) {\n  const {\n    exclusiveModes\n  } = modes;\n  return supportedExclusiveModes.filter(({\n    mode\n  }) => exclusiveModes && exclusiveModes.includes(mode)).map(({\n    isActive,\n    label,\n    mode\n  }) => ({\n    id: mode,\n    selected: !selectedModes.some(_itinerary.isTransit) && selectedModes.some(isActive),\n    showTitle: false,\n    text: /*#__PURE__*/_react.default.createElement(\"span\", null, /*#__PURE__*/_react.default.createElement(ModeIcon, {\n      mode: mode\n    }), \" \", label),\n    title: label\n  }));\n}\n/**\n * Generates the options (primary, secondary, tertiary) for the mode selector based on the modes read from config.yaml.\n * @param ModeIcon The icon component for rendering.\n * @param modes The available modes to choose from.\n * @param selectedModes An array of string that lists the modes selected for a trip query.\n * @param selectedCompanies The companies to show as selected (when the user selects an exclusive mode operated by multiple companies).\n * @param supportedCompanies The supported companies for certain access modes.\n */\n\n\nfunction getModeOptions(ModeIcon, modes, selectedModes, selectedCompanies, supportedCompanies) {\n  return {\n    primary: getPrimaryModeOption(ModeIcon, selectedModes),\n    secondary: getTransitCombinedModeOptions(ModeIcon, modes, selectedModes, selectedCompanies, supportedCompanies),\n    tertiary: getExclusiveModeOptions(ModeIcon, modes, selectedModes)\n  };\n}\n/**\n * Returns the UI options for the specified companies, modes, and selection.\n * @param companies The supported companies per OTP configuration.\n * @param modes The desired modes for which to get the operating companies.\n * @param selectedCompanies The companies to render selected from the UI.\n * @returns An array of UI options (should not be undefined as companies is an array).\n */\n\n\nfunction getCompaniesOptions(companies, modes, selectedCompanies) {\n  return getCompanies(companies, modes).map(comp => {\n    const CompanyIcon = (0, _companies.getCompanyIcon)(comp.id);\n    return {\n      id: comp.id,\n      selected: selectedCompanies.includes(comp.id),\n      text: /*#__PURE__*/_react.default.createElement(\"span\", null, CompanyIcon && /*#__PURE__*/_react.default.createElement(CompanyIcon, null), \" \", comp.label),\n      title: comp.label\n    };\n  });\n}\n/**\n * Returns the UI options for the specified bike/micromobility modes and selection.\n * @param ModeIcon The component for rendering icons.\n * @param modes The supported bike or micromobility modes.\n * @param selectedModes The modes to render selected from the UI.\n * @returns An array of UI options, or undefined if modes is undefined.\n */\n\n\nfunction getBicycleOrMicromobilityModeOptions(ModeIcon, modes, selectedModes) {\n  return modes && modes.map(({\n    label,\n    mode\n  }) => ({\n    id: mode,\n    selected: selectedModes.includes(mode),\n    text: /*#__PURE__*/_react.default.createElement(\"span\", null, /*#__PURE__*/_react.default.createElement(ModeIcon, {\n      mode: mode\n    }), label),\n    title: label\n  }));\n}\n"]}