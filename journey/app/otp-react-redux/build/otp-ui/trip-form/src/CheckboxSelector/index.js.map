{"version":3,"sources":["index.js"],"names":["CheckboxSelector","Component","evt","name","onChange","props","target","checked","render","className","label","style","id","value","handleChange","propTypes","PropTypes","string","oneOfType","bool","func","defaultProps"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;;;;;;;;;AAEA;AACA;AACA;AACA,MAAMA,gBAAN,SAA+BC,gBAA/B,CAAyC;AAAA;AAAA;;AAAA,0CACxBC,GAAG,IAAI;AACpB,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAqB,KAAKC,KAAhC;;AAEA,UAAI,OAAOD,QAAP,KAAoB,UAAxB,EAAoC;AAClCA,QAAAA,QAAQ,CAAC;AACP,WAACD,IAAD,GAAQD,GAAG,CAACI,MAAJ,CAAWC;AADZ,SAAD,CAAR;AAGD;AACF,KATsC;AAAA;;AAWvCC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,KAAb;AAAoBP,MAAAA,IAApB;AAA0BQ,MAAAA;AAA1B,QAAoC,KAAKN,KAA/C;AACA,UAAMO,EAAE,GAAI,kBAAiBT,IAAK,EAAlC;AACA,QAAI;AAAEU,MAAAA;AAAF,QAAY,KAAKR,KAArB;AACA,QAAI,OAAOQ,KAAP,KAAiB,QAArB,EAA+BA,KAAK,GAAGA,KAAK,KAAK,MAAlB;AAE/B,wBACE;AAAK,MAAA,SAAS,EAAEJ,SAAhB;AAA2B,MAAA,KAAK,EAAEE;AAAlC,oBACE;AACE,MAAA,EAAE,EAAEC,EADN;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,OAAO,EAAEC,KAHX;AAIE,MAAA,QAAQ,EAAE,KAAKC;AAJjB,MADF,eAOE,6BAAC,MAAD,CAAQ,YAAR;AAAqB,MAAA,OAAO,EAAEF;AAA9B,OAAmCF,KAAnC,CAPF,CADF;AAWD;;AA5BsC;;AA+BzCV,gBAAgB,CAACe,SAAjB,GAA6B;AAC3B;AACF;AACA;AACEN,EAAAA,SAAS,EAAEO,mBAAUC,MAJM;;AAK3B;AACF;AACA;AACEd,EAAAA,IAAI,EAAEa,mBAAUC,MARW;;AAS3B;AACF;AACA;AACEJ,EAAAA,KAAK,EAAEG,mBAAUE,SAAV,CAAoB,CAACF,mBAAUC,MAAX,EAAmBD,mBAAUG,IAA7B,CAApB,CAZoB;;AAa3B;AACF;AACA;AACET,EAAAA,KAAK,EAAEM,mBAAUC,MAhBU;;AAiB3B;AACF;AACA;AACA;AACEb,EAAAA,QAAQ,EAAEY,mBAAUI;AArBO,CAA7B;AAwBApB,gBAAgB,CAACqB,YAAjB,GAAgC;AAC9BZ,EAAAA,SAAS,EAAE,IADmB;AAE9BN,EAAAA,IAAI,EAAE,IAFwB;AAG9BU,EAAAA,KAAK,EAAE,IAHuB;AAI9BH,EAAAA,KAAK,EAAE,IAJuB;AAK9BN,EAAAA,QAAQ,EAAE;AALoB,CAAhC;eAQeJ,gB","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport * as Styled from \"../styled\";\n\n/**\n * A wrapper that includes an <input type=\"select\" /> control and a <label> for the input control.\n */\nclass CheckboxSelector extends Component {\n  handleChange = evt => {\n    const { name, onChange } = this.props;\n\n    if (typeof onChange === \"function\") {\n      onChange({\n        [name]: evt.target.checked\n      });\n    }\n  };\n\n  render() {\n    const { className, label, name, style } = this.props;\n    const id = `id-query-param-${name}`;\n    let { value } = this.props;\n    if (typeof value === \"string\") value = value === \"true\";\n\n    return (\n      <div className={className} style={style}>\n        <input\n          id={id}\n          type=\"checkbox\"\n          checked={value}\n          onChange={this.handleChange}\n        />\n        <Styled.SettingLabel htmlFor={id}>{label}</Styled.SettingLabel>\n      </div>\n    );\n  }\n}\n\nCheckboxSelector.propTypes = {\n  /**\n   * The CSS class name to apply to this element.\n   */\n  className: PropTypes.string,\n  /**\n   * A unique name for the setting.\n   */\n  name: PropTypes.string,\n  /**\n   * The initial value for the contained <input> control.\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  /**\n   * The contents of the contained <label> control.\n   */\n  label: PropTypes.string,\n  /**\n   * Triggered when the value of the <input> control changes.\n   * @param e The data for the HTML checkbox onchange event.\n   */\n  onChange: PropTypes.func\n};\n\nCheckboxSelector.defaultProps = {\n  className: null,\n  name: null,\n  value: null,\n  label: null,\n  onChange: null\n};\n\nexport default CheckboxSelector;\n"]}