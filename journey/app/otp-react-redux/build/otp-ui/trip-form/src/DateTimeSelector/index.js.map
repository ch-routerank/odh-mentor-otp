{"version":3,"sources":["index.js"],"names":["isInputTypeSupported","type","input","document","createElement","setAttribute","DateTimeSelector","Component","constructor","props","evt","handleQueryParamChange","date","target","value","time","timeFormatLegacy","format","OTP_API_TIME_FORMAT","dateFormatLegacy","OTP_API_DATE_FORMAT","option","departArrive","isSelected","queryParam","onQueryParamChange","raiseOnQueryParamChange","setState","state","render","className","forceLegacy","style","departureOptions","text","forEach","opt","isLegacy","supportsDateTimeInputs","map","setDepartArrive","handleTimeChange","handleDateChange","handleTimeTimeChangeLegacy","handleDateChangeLegacy","propTypes","PropTypes","string","oneOf","bool","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\n\nimport {\n  OTP_API_DATE_FORMAT,\n  OTP_API_TIME_FORMAT\n} from \"@opentripplanner/core-utils/lib/time\";\n\nimport ModeButton from \"../ModeButton\";\nimport * as Styled from \"../styled\";\n\n/**\n * Determines whether the browser supports a particular <input type=<type> /> control,\n * so we can take advantage of native controls\n * (especially date/time selection) on modern (mobile) browsers.\n * @param {*} type One of the HTML5 input types.\n */\nfunction isInputTypeSupported(type) {\n  const input = document.createElement(\"input\");\n  input.setAttribute(\"type\", type);\n  return input.type === type;\n}\n\n/**\n * The `DateTimeSelector` component lets the OTP user chose a departure or arrival date/time.\n * (The departure can be right now.)\n *\n * There are two rendering modes, a \"normal\" mode and a \"legacy\" mode.\n * - \"Normal\" mode: We try to use `<input type=\"time|date\">` for date and time input.\n *   On current HTML5 browsers (desktop or mobile), these controls\n *   render the date/time according to OS settings and natively offer a user interface\n *   for choosing the date/time.\n *   Thus, when `<input type=\"time|date\">` is supported, there is no need to specify a date/time format.\n *   If not, we fall back to \"legacy\" mode.\n * - \"Legacy\" mode: On Safari for MacOS, and on legacy browsers that don't support `<input type=\"time|date\">`,\n *   `<input type=\"time|date\">` renders as the default `<input type=\"text\">`, and in these conditions,\n *   we have to fall back to formatting the date/time ourselves, using `dateFormatLegacy` and `timeFormatLegacy` props.\n * - Implementers don't know in advance whether the browser supports `<input type=\"time|date\">`.\n *   That determination is performed by method `isInputTypeSupported(type)` above when the constructor is executed.\n *   Therefore, they should provide `dateFormatLegacy` and `timeFormatLegacy` props as a backup.\n *   If these props are not provided, the OTP API date format is used.\n * - For testing purposes, implementers can \"force\" the \"legacy\" mode by setting the `forceLegacy` prop to true.\n */\nclass DateTimeSelector extends Component {\n  supportsDateTimeInputs =\n    isInputTypeSupported(\"date\") && isInputTypeSupported(\"time\");\n\n  constructor(props) {\n    super(props);\n\n    const { date, time, departArrive } = props;\n\n    this.state = {\n      date,\n      time,\n      departArrive\n    };\n  }\n\n  handleDateChange = evt => {\n    this.handleQueryParamChange({ date: evt.target.value });\n  };\n\n  handleTimeChange = evt => {\n    this.handleQueryParamChange({ time: evt.target.value });\n  };\n\n  handleTimeTimeChangeLegacy = evt => {\n    const { timeFormatLegacy } = this.props;\n    const time = moment(evt.target.value, timeFormatLegacy).format(\n      OTP_API_TIME_FORMAT\n    );\n    this.handleQueryParamChange({ time });\n  };\n\n  handleDateChangeLegacy = evt => {\n    const { dateFormatLegacy } = this.props;\n    const date = moment(evt.target.value, dateFormatLegacy).format(\n      OTP_API_DATE_FORMAT\n    );\n    this.handleQueryParamChange({ date });\n  };\n\n  setDepartArrive = option => {\n    if (option.type === \"NOW\") {\n      this.handleQueryParamChange({\n        departArrive: \"NOW\",\n        date: moment().format(OTP_API_DATE_FORMAT),\n        time: moment().format(OTP_API_TIME_FORMAT)\n      });\n    } else if (!option.isSelected) {\n      this.handleQueryParamChange({\n        departArrive: option.type\n        // TODO: add the depart/arrive date and time to the new state.\n      });\n    }\n  };\n\n  raiseOnQueryParamChange = queryParam => {\n    const { onQueryParamChange } = this.props;\n\n    if (typeof onQueryParamChange === \"function\") {\n      onQueryParamChange(queryParam);\n    }\n  };\n\n  handleQueryParamChange = queryParam => {\n    this.raiseOnQueryParamChange(queryParam);\n    this.setState({ ...queryParam });\n  };\n\n  render() {\n    // console.log(`supports date time: ${this.supportsDateTimeInputs}`);\n\n    const {\n      className,\n      dateFormatLegacy = OTP_API_DATE_FORMAT,\n      forceLegacy,\n      timeFormatLegacy = OTP_API_TIME_FORMAT,\n      style\n    } = this.props;\n    const { departArrive, date, time } = this.state;\n\n    const departureOptions = [\n      {\n        // Default option.\n        type: \"NOW\",\n        text: \"$_now_$\"\n      },\n      {\n        type: \"DEPART\",\n        text: \"Depart at\"\n      },\n      {\n        type: \"ARRIVE\",\n        text: \"Arrive by\"\n      }\n    ];\n    departureOptions.forEach(opt => {\n      opt.isSelected = departArrive === opt.type;\n    });\n\n    const isLegacy = forceLegacy || !this.supportsDateTimeInputs;\n\n    return (\n      <Styled.DateTimeSelector className={className} style={style}>\n        <Styled.DateTimeSelector.DepartureRow>\n          {departureOptions.map(opt => (\n            <ModeButton\n              key={opt.type}\n              selected={opt.isSelected}\n              onClick={() => this.setDepartArrive(opt)}\n            >\n              {opt.text}\n            </ModeButton>\n          ))}\n        </Styled.DateTimeSelector.DepartureRow>\n\n        {departArrive !== \"NOW\" && !isLegacy && (\n          <Styled.DateTimeSelector.DateTimeRow>\n            <div>\n              <input\n                type=\"time\"\n                value={time}\n                required\n                onChange={this.handleTimeChange}\n              />\n            </div>\n            <div>\n              <input\n                type=\"date\"\n                value={date}\n                required\n                onChange={this.handleDateChange}\n              />\n            </div>\n          </Styled.DateTimeSelector.DateTimeRow>\n        )}\n\n        {/* Backup controls (for older browsers) */}\n        {departArrive !== \"NOW\" && isLegacy && (\n          <Styled.DateTimeSelector.DateTimeRow>\n            <div>\n              <input\n                type=\"text\"\n                defaultValue={moment(time, OTP_API_TIME_FORMAT).format(\n                  timeFormatLegacy\n                )}\n                required\n                onChange={this.handleTimeTimeChangeLegacy}\n              />\n            </div>\n            <div>\n              <input\n                type=\"text\"\n                defaultValue={moment(date, OTP_API_DATE_FORMAT).format(\n                  dateFormatLegacy\n                )}\n                required\n                onChange={this.handleDateChangeLegacy}\n              />\n            </div>\n          </Styled.DateTimeSelector.DateTimeRow>\n        )}\n      </Styled.DateTimeSelector>\n    );\n  }\n}\n\nDateTimeSelector.propTypes = {\n  /**\n   * The CSS class name to apply to this element.\n   */\n  className: PropTypes.string,\n  /**\n   * The initial departure/arrival date string, in a format that an HTML <input type=\"date\"> control can render.\n   */\n  date: PropTypes.string,\n  /**\n   * The date format string for legacy mode (on legacy browsers, or if `forceLegacy` is true).\n   */\n  dateFormatLegacy: PropTypes.string,\n  /**\n   * The initial setting determining whether a trip should start or end at a given time.\n   */\n  departArrive: PropTypes.oneOf([\"NOW\", \"DEPART\", \"ARRIVE\"]),\n  /**\n   * If true, forces legacy mode and uses `<input type=\"text\">`\n   * instead of the native date/time pickers found on modern browsers.\n   */\n  forceLegacy: PropTypes.bool,\n  /**\n   * The initial departure/arrival time string, in a format that an HTML <input type=\"time\"> control can render.\n   */\n  time: PropTypes.string,\n  /**\n   * The time format string for legacy mode (on legacy browsers, or if `forceLegacy` is true).\n   */\n  timeFormatLegacy: PropTypes.string,\n  /**\n   * Triggered when a query parameter is changed.\n   * @param params A { param1: value1, param2, value2, ... } object that contains the new values for the parameter(s) that has (have) changed.\n   */\n  onQueryParamChange: PropTypes.func\n};\n\nDateTimeSelector.defaultProps = {\n  className: null,\n  date: null,\n  dateFormatLegacy: null,\n  departArrive: \"NOW\",\n  forceLegacy: false,\n  time: null,\n  timeFormatLegacy: null,\n  onQueryParamChange: null\n};\n\nexport default DateTimeSelector;\n"]}