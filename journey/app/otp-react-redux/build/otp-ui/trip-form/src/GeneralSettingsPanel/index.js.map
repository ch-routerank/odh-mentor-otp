{"version":3,"sources":["index.js"],"names":["GeneralSettingsPanel","Component","queryParam","onQueryParamChange","props","render","className","paramNames","query","style","supportedModes","configWrapper","modes","map","param","paramInfo","queryParams","find","qp","name","routingTypes","includes","routingType","applicable","selector","default","handleChange","label","propTypes","PropTypes","string","any","arrayOf","func","configuredModesType","isRequired","defaultProps","defaultParams"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport queryParams from \"@opentripplanner/core-utils/lib/query-params\";\nimport {\n  defaultParams,\n  getQueryParamProperty\n} from \"@opentripplanner/core-utils/lib/query\";\nimport { configuredModesType } from \"@opentripplanner/core-utils/lib/types\";\n\nimport CheckboxSelector from \"../CheckboxSelector\";\nimport DropdownSelector from \"../DropdownSelector\";\nimport * as Styled from \"../styled\";\n\n/**\n * The general settings panel for setting speed and routing optimization controls.\n */\nclass GeneralSettingsPanel extends Component {\n  handleChange = queryParam => {\n    const { onQueryParamChange } = this.props;\n\n    if (typeof onQueryParamChange === \"function\") {\n      onQueryParamChange(queryParam);\n    }\n  };\n\n  render() {\n    const { className, paramNames, query, style, supportedModes } = this.props;\n    const configWrapper = { modes: supportedModes };\n\n    return (\n      <Styled.GeneralSettingsPanel className={className} style={style}>\n        {paramNames.map(param => {\n          const paramInfo = queryParams.find(qp => qp.name === param);\n          // Check that the parameter applies to the specified routingType\n          if (!paramInfo.routingTypes.includes(query.routingType)) return null;\n\n          // Check that the applicability test (if provided) is satisfied\n          if (\n            typeof paramInfo.applicable === \"function\" &&\n            !paramInfo.applicable(query, configWrapper)\n          ) {\n            return null;\n          }\n\n          // Create the UI component based on the selector type\n          switch (paramInfo.selector) {\n            case \"DROPDOWN\":\n              return (\n                <DropdownSelector\n                  key={paramInfo.name}\n                  name={paramInfo.name}\n                  value={query[paramInfo.name] || paramInfo.default}\n                  label={getQueryParamProperty(paramInfo, \"label\", query)}\n                  options={getQueryParamProperty(paramInfo, \"options\", query)}\n                  onChange={this.handleChange}\n                />\n              );\n            case \"CHECKBOX\":\n              return (\n                <CheckboxSelector\n                  key={paramInfo.label}\n                  name={paramInfo.name}\n                  value={query[paramInfo.name]}\n                  label={getQueryParamProperty(paramInfo, \"label\", query)}\n                  onChange={this.handleChange}\n                />\n              );\n            default:\n              return null;\n          }\n        })}\n      </Styled.GeneralSettingsPanel>\n    );\n  }\n}\n\nGeneralSettingsPanel.propTypes = {\n  /**\n   * The CSS class name to apply to this element.\n   */\n  className: PropTypes.string,\n  /**\n   * An object {parameterName: value, ...} whose attributes correspond to query parameters.\n   * For query parameter names and value formats,\n   * see https://github.com/opentripplanner/otp-ui/blob/master/packages/core-utils/src/__tests__/query.js#L14\n   */\n  // Disable type check because the only use of queryParams is to be passed to\n  // method getQueryParamProperty from \"@opentripplanner/core-utils/lib/query\".\n  // eslint-disable-next-line react/forbid-prop-types\n  query: PropTypes.any,\n  /**\n   * An array of parameter names to support in the settings panel.\n   * See the `query` parameter for more on query parameter names.\n   */\n  paramNames: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * Triggered when the value of a trip setting is changed by the user.\n   * @param arg The data {name: value} of the changed trip setting.\n   */\n  onQueryParamChange: PropTypes.func,\n  /**\n   * An array of supported modes that will be displayed as options.\n   */\n  supportedModes: configuredModesType.isRequired\n};\n\nGeneralSettingsPanel.defaultProps = {\n  className: null,\n  query: null,\n  paramNames: defaultParams,\n  onQueryParamChange: null\n};\n\nexport default GeneralSettingsPanel;\n"]}