{"version":3,"sources":["index.js"],"names":["ModeSelector","props","className","modes","onChange","style","primary","secondary","tertiary","handleClick","option","selected","id","makeButton","showTitle","title","text","map","propTypes","PropTypes","string","modeSelectorOptionsType","func","defaultProps"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;AAEA;AACA;AACA;AACA;AACA,MAAMA,YAAY,GAAGC,KAAK,IAAI;AAC5B,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA,QAApB;AAA8BC,IAAAA;AAA9B,MAAwCJ,KAA9C;AACA,QAAM;AAAEK,IAAAA,OAAF;AAAWC,IAAAA,SAAX;AAAsBC,IAAAA;AAAtB,MAAmCL,KAAK,IAAI;AAChDG,IAAAA,OAAO,EAAE,IADuC;AAEhDC,IAAAA,SAAS,EAAE,IAFqC;AAGhDC,IAAAA,QAAQ,EAAE;AAHsC,GAAlD;;AAMA,QAAMC,WAAW,GAAGC,MAAM,IAAI;AAC5B,QAAI,CAACA,MAAM,CAACC,QAAR,IAAoB,OAAOP,QAAP,KAAoB,UAA5C,EAAwD;AACtDA,MAAAA,QAAQ,CAACM,MAAM,CAACE,EAAR,CAAR;AACD;AACF,GAJD;;AAMA,QAAMC,UAAU,GAAGH,MAAM,iBACvB,6BAAC,mBAAD;AACE,IAAA,GAAG,EAAEA,MAAM,CAACE,EADd;AAEE,IAAA,QAAQ,EAAEF,MAAM,CAACC,QAFnB;AAGE,IAAA,SAAS,EAAED,MAAM,CAACI,SAHpB;AAIE,IAAA,KAAK,EAAEJ,MAAM,CAACK,KAJhB;AAKE,IAAA,OAAO,EAAE,MAAMN,WAAW,CAACC,MAAD;AAL5B,KAOGA,MAAM,CAACM,IAPV,CADF;;AAYA,sBACE,6BAAC,MAAD,CAAQ,YAAR;AAAqB,IAAA,SAAS,EAAEd,SAAhC;AAA2C,IAAA,KAAK,EAAEG;AAAlD,KACGC,OAAO,iBACN,6BAAC,MAAD,CAAQ,YAAR,CAAqB,OAArB,QACGO,UAAU,CAACP,OAAD,CADb,CAFJ,EAOGC,SAAS,iBACR,6BAAC,MAAD,CAAQ,YAAR,CAAqB,YAArB,QACGA,SAAS,CAACU,GAAV,CAAcJ,UAAd,CADH,CARJ,EAYGL,QAAQ,iBACP,6BAAC,MAAD,CAAQ,YAAR,CAAqB,WAArB,QACGA,QAAQ,CAACS,GAAT,CAAaJ,UAAb,CADH,CAbJ,CADF;AAoBD,CA9CD;;AAgDAb,YAAY,CAACkB,SAAb,GAAyB;AACvB;AACF;AACA;AACEhB,EAAAA,SAAS,EAAEiB,mBAAUC,MAJE;;AAKvB;AACF;AACA;AACEjB,EAAAA,KAAK,EAAEkB,8BARgB;;AASvB;AACF;AACA;AACA;AACEjB,EAAAA,QAAQ,EAAEe,mBAAUG;AAbG,CAAzB;AAgBAtB,YAAY,CAACuB,YAAb,GAA4B;AAC1BrB,EAAAA,SAAS,EAAE,IADe;AAE1BC,EAAAA,KAAK,EAAE,IAFmB;AAG1BC,EAAAA,QAAQ,EAAE;AAHgB,CAA5B;eAMeJ,Y","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { modeSelectorOptionsType } from \"@opentripplanner/core-utils/lib/types\";\n\nimport * as Styled from \"../styled\";\nimport ModeButton from \"../ModeButton\";\n\n/**\n * ModeSelector is the control container where the OTP user selects\n * the transportation modes for a trip query, e.g. transit+bike, walk, micromobility...\n */\nconst ModeSelector = props => {\n  const { className, modes, onChange, style } = props;\n  const { primary, secondary, tertiary } = modes || {\n    primary: null,\n    secondary: null,\n    tertiary: null\n  };\n\n  const handleClick = option => {\n    if (!option.selected && typeof onChange === \"function\") {\n      onChange(option.id);\n    }\n  };\n\n  const makeButton = option => (\n    <ModeButton\n      key={option.id}\n      selected={option.selected}\n      showTitle={option.showTitle}\n      title={option.title}\n      onClick={() => handleClick(option)}\n    >\n      {option.text}\n    </ModeButton>\n  );\n\n  return (\n    <Styled.ModeSelector className={className} style={style}>\n      {primary && (\n        <Styled.ModeSelector.MainRow>\n          {makeButton(primary)}\n        </Styled.ModeSelector.MainRow>\n      )}\n\n      {secondary && (\n        <Styled.ModeSelector.SecondaryRow>\n          {secondary.map(makeButton)}\n        </Styled.ModeSelector.SecondaryRow>\n      )}\n      {tertiary && (\n        <Styled.ModeSelector.TertiaryRow>\n          {tertiary.map(makeButton)}\n        </Styled.ModeSelector.TertiaryRow>\n      )}\n    </Styled.ModeSelector>\n  );\n};\n\nModeSelector.propTypes = {\n  /**\n   * The CSS class name to apply to this element.\n   */\n  className: PropTypes.string,\n  /**\n   * An object that defines the primary mode, and secondary and tertiary modes for the trip query.\n   */\n  modes: modeSelectorOptionsType,\n  /**\n   * Triggered when the user selects a different mode.\n   * @param id The id of the new option clicked.\n   */\n  onChange: PropTypes.func\n};\n\nModeSelector.defaultProps = {\n  className: null,\n  modes: null,\n  onChange: null\n};\n\nexport default ModeSelector;\n"]}