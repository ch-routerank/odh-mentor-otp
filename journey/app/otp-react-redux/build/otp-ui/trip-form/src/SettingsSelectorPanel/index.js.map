{"version":3,"sources":["index.js"],"names":["SettingsSelectorPanel","Component","constructor","queryParam","queryParams","props","onQueryParamChange","id","supportedModes","supportedCompanies","newModes","split","selectedModes","getSelectedModes","activeTransitModes","filter","isTransit","lastTransitModes","state","length","allTransitModes","transitModes","map","modeObj","mode","concat","defaultAccessModeCompany","companies","nonTransitModes","finalModes","handleQueryParamChange","join","setState","toggleSubmode","selectedCompanies","getSelectedCompanies","undefined","raiseOnQueryParamChange","name","submodes","o","after","newSubmodes","idx","indexOf","subset","splice","push","render","className","ModeIcon","style","modeOptions","m","comp","bikeModes","bicycleModes","scooterModes","micromobilityModes","handleMainModeChange","margin","paddingBottom","some","handleTransitModeChange","isBike","isMicromobility","handleCompanyChange","propTypes","PropTypes","string","elementType","func","any","arrayOf","configuredCompanyType","configuredModesType","isRequired","defaultProps","TriMetModeIcon"],"mappings":"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","sourcesContent":["import { TriMetModeIcon } from \"@opentripplanner/icons\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  isMicromobility,\n  isTransit\n} from \"@opentripplanner/core-utils/lib/itinerary\";\nimport {\n  configuredCompanyType,\n  configuredModesType\n} from \"@opentripplanner/core-utils/lib/types\";\n\nimport ModeSelector from \"../ModeSelector\";\nimport SubmodeSelector from \"../SubmodeSelector\";\nimport GeneralSettingsPanel from \"../GeneralSettingsPanel\";\nimport * as Styled from \"../styled\";\nimport {\n  getModeOptions,\n  getTransitSubmodeOptions,\n  getCompaniesForModeId,\n  getCompaniesOptions,\n  getBicycleOrMicromobilityModeOptions,\n  isBike\n} from \"../util\";\n\n/**\n * The Settings Selector Panel allows the user to set trip search preferences,\n * such as modes, providers, and speed preferences.\n */\nexport default class SettingsSelectorPanel extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      defaultAccessModeCompany: null,\n      lastTransitModes: []\n    };\n  }\n\n  getSelectedCompanies() {\n    const { queryParams } = this.props;\n    const { companies } = queryParams;\n    return companies ? companies.split(\",\") : [];\n  }\n\n  getSelectedModes() {\n    const { queryParams } = this.props;\n    const { mode } = queryParams;\n    return mode ? mode.split(\",\") : [];\n  }\n\n  makeNewQueryParams = queryParam => {\n    const { queryParams } = this.props;\n    return { ...queryParams, ...queryParam };\n  };\n\n  raiseOnQueryParamChange = queryParam => {\n    const { onQueryParamChange } = this.props;\n    if (typeof onQueryParamChange === \"function\") {\n      onQueryParamChange(queryParam);\n    }\n  };\n\n  handleMainModeChange = id => {\n    const { supportedModes, supportedCompanies } = this.props;\n    const newModes = id.split(\"+\");\n\n    if (newModes[0] === \"TRANSIT\") {\n      const selectedModes = this.getSelectedModes();\n      const activeTransitModes = selectedModes.filter(isTransit);\n\n      let { lastTransitModes } = this.state;\n      if (lastTransitModes.length === 0) {\n        const allTransitModes = supportedModes.transitModes.map(\n          modeObj => modeObj.mode\n        );\n\n        lastTransitModes = lastTransitModes.concat(allTransitModes);\n      }\n\n      const {\n        defaultAccessModeCompany,\n        companies,\n        nonTransitModes\n      } = getCompaniesForModeId(id, supportedCompanies);\n\n      // Add previously selected transit modes only if none were active.\n      const finalModes = (activeTransitModes.length > 0\n        ? activeTransitModes\n        : lastTransitModes\n      ).concat(nonTransitModes);\n\n      this.handleQueryParamChange({\n        mode: finalModes.join(\",\"),\n        companies: companies.join(\",\")\n      });\n\n      this.setState({\n        defaultAccessModeCompany:\n          defaultAccessModeCompany && defaultAccessModeCompany[0]\n      });\n    } else {\n      this.handleQueryParamChange({\n        mode: newModes.join(\",\"),\n        companies: \"\" // New req: Don't list companies with this mode?\n      });\n    }\n  };\n\n  handleTransitModeChange = id => {\n    const selectedModes = this.getSelectedModes();\n    this.toggleSubmode(\"mode\", id, selectedModes, isTransit, newModes => {\n      this.setState({\n        lastTransitModes: newModes.filter(isTransit)\n      });\n    });\n  };\n\n  handleCompanyChange = id => {\n    const selectedCompanies = this.getSelectedCompanies();\n    this.toggleSubmode(\"companies\", id, selectedCompanies, undefined, () => {});\n  };\n\n  handleQueryParamChange = queryParam => {\n    this.raiseOnQueryParamChange(queryParam);\n  };\n\n  toggleSubmode = (name, id, submodes, filter = o => o, after) => {\n    const newSubmodes = [].concat(submodes);\n    const idx = newSubmodes.indexOf(id);\n\n    // If the clicked mode is selected, then unselect it, o/w select it.\n    // Leave at least one selected, as in newplanner.trimet.org.\n    if (idx >= 0) {\n      const subset = newSubmodes.filter(filter);\n      if (subset.length >= 2) {\n        newSubmodes.splice(idx, 1);\n      }\n    } else {\n      newSubmodes.push(id);\n    }\n\n    if (newSubmodes.length !== submodes.length) {\n      this.handleQueryParamChange({\n        [name]: newSubmodes.join(\",\")\n      });\n      if (after) after(newSubmodes);\n    }\n  };\n\n  render() {\n    const {\n      className,\n      ModeIcon,\n      queryParams,\n      supportedModes,\n      supportedCompanies,\n      style\n    } = this.props;\n    const { defaultAccessModeCompany } = this.state;\n    const selectedModes = this.getSelectedModes();\n    const selectedCompanies = this.getSelectedCompanies();\n\n    const modeOptions = getModeOptions(\n      ModeIcon,\n      supportedModes,\n      selectedModes,\n      selectedCompanies,\n      supportedCompanies\n    );\n    const transitModes = getTransitSubmodeOptions(\n      ModeIcon,\n      supportedModes,\n      selectedModes\n    );\n    const nonTransitModes = selectedModes.filter(m => !isTransit(m));\n    const companies = getCompaniesOptions(\n      supportedCompanies.filter(comp =>\n        defaultAccessModeCompany ? comp.id === defaultAccessModeCompany : true\n      ),\n      nonTransitModes,\n      selectedCompanies\n    );\n    const bikeModes = getBicycleOrMicromobilityModeOptions(\n      ModeIcon,\n      supportedModes.bicycleModes,\n      selectedModes\n    );\n    const scooterModes = getBicycleOrMicromobilityModeOptions(\n      ModeIcon,\n      supportedModes.micromobilityModes,\n      selectedModes\n    );\n\n    return (\n      <Styled.SettingsSelectorPanel className={className} style={style}>\n        <ModeSelector\n          modes={modeOptions}\n          onChange={this.handleMainModeChange}\n          style={{ margin: \"0px -5px\", paddingBottom: \"8px\" }}\n        />\n\n        <Styled.SettingsHeader>$_preferences_$</Styled.SettingsHeader>\n\n        {selectedModes.some(isTransit) && transitModes.length >= 2 && (\n          <SubmodeSelector\n            label=\"$_mode_$\"\n            modes={transitModes}\n            onChange={this.handleTransitModeChange}\n          />\n        )}\n\n        {/* The bike trip type selector */}\n        {/* TODO: Handle different bikeshare networks */}\n        {selectedModes.some(isBike) && !selectedModes.some(isTransit) && (\n          <SubmodeSelector\n            label=\"$_mode_$\"\n            inline\n            modes={bikeModes}\n            onChange={this.handleMainModeChange}\n          />\n        )}\n\n        {/* The micromobility trip type selector */}\n        {/* TODO: Handle different micromobility networks */}\n        {selectedModes.some(isMicromobility) &&\n          !selectedModes.some(isTransit) && (\n            <SubmodeSelector\n              label=\"$_mode_$\"\n              inline\n              modes={scooterModes}\n              onChange={this.handleMainModeChange}\n            />\n          )}\n\n        {/* This order is probably better. */}\n        {companies.length >= 2 && (\n          <SubmodeSelector\n            label=\"Use companies\"\n            modes={companies}\n            onChange={this.handleCompanyChange}\n          />\n        )}\n\n        <GeneralSettingsPanel\n          query={queryParams}\n          supportedModes={supportedModes}\n          onQueryParamChange={this.handleQueryParamChange}\n        />\n      </Styled.SettingsSelectorPanel>\n    );\n  }\n}\n\nSettingsSelectorPanel.propTypes = {\n  /**\n   * The CSS class name to apply to this element.\n   */\n  className: PropTypes.string,\n  /**\n   * The icon component for rendering mode icons. Defaults to the OPT-UI TriMetModeIcon component.\n   */\n  ModeIcon: PropTypes.elementType,\n  /**\n   * Triggered when a query parameter is changed.\n   * @param params An object that contains the new values for the parameter(s) that has (have) changed.\n   */\n  onQueryParamChange: PropTypes.func,\n  /**\n   * An object {parameterName: value, ...} whose attributes correspond to query parameters.\n   * For query parameter names and value formats,\n   * see https://github.com/opentripplanner/otp-ui/blob/master/packages/core-utils/src/__tests__/query.js#L14\n   */\n  // Disable type check because the only use of queryParams is to be passed to\n  // method getQueryParamProperty from \"@opentripplanner/core-utils/lib/query\".\n  // eslint-disable-next-line react/forbid-prop-types\n  queryParams: PropTypes.any,\n  /**\n   * An array of supported companies that will be displayed as options where applicable.\n   */\n  supportedCompanies: PropTypes.arrayOf(configuredCompanyType),\n  /**\n   * An array of supported modes that will be displayed as options.\n   */\n  supportedModes: configuredModesType.isRequired\n};\n\nSettingsSelectorPanel.defaultProps = {\n  className: null,\n  ModeIcon: TriMetModeIcon,\n  onQueryParamChange: null,\n  queryParams: null,\n  supportedCompanies: []\n};\n"]}