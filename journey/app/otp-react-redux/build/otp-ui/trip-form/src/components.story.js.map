{"version":3,"sources":["components.story.js"],"names":["headingStyle","fontFamily","fontSize","decorator","story","title","decorators","withInfo","withKnobs","onChange","onClick","onQueryParamChange","checkboxSelector","display","width","dateTimeSelector","dropdownSelector","text","value","generalSettingsPanel","mode","routingType","commonModes","Space","modeButtons","color","modeSelector","modeOptions","submodeSelector","submodeOptions"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { action } from \"@storybook/addon-actions\";\nimport { withInfo } from \"@storybook/addon-info\";\nimport { boolean, text, withKnobs } from \"@storybook/addon-knobs\";\nimport * as Icons from \"@opentripplanner/icons\";\n\nimport * as Core from \".\";\n\nimport commonModes from \"./__mocks__/modes\";\nimport modeOptions from \"./__mocks__/mode-options\";\nimport submodeOptions from \"./__mocks__/submode-options\";\nimport trimet from \"./__mocks__/trimet.styled\";\n\nconst headingStyle = {\n  fontFamily: \"sans-serif\",\n  fontSize: \"16px\"\n};\n\nconst decorator = story => (\n  <div>\n    <p style={headingStyle}>Plain</p>\n    <div>{story()}</div>\n\n    <p style={headingStyle}>Styled</p>\n    <div>{trimet(story())}</div>\n  </div>\n);\n\nexport default {\n  title: \"Trip Form Components\",\n  decorators: [decorator, withInfo, withKnobs]\n};\n\n// Events\nconst onChange = action(\"onChange\");\nconst onClick = action(\"onClick\");\nconst onQueryParamChange = action(\"onQueryParamChange\");\n\nexport const checkboxSelector = () => (\n  <Core.CheckboxSelector\n    name=\"MyParam\"\n    style={{ display: \"inline-block\", width: \"250px\" }}\n    label=\"Check me.\"\n    onChange={onChange}\n  />\n);\n\nexport const dateTimeSelector = () => (\n  <Core.DateTimeSelector\n    departArrive=\"NOW\"\n    date=\"2020-02-15\"\n    dateFormatLegacy={text(\"dateFormatLegacy\", \"YY-M-d\")}\n    forceLegacy={boolean(\"forceLegacy\", false)}\n    time=\"14:17\"\n    timeFormatLegacy={text(\"timeFormatLegacy\", \"HH:mm\")}\n    onQueryParamChange={onQueryParamChange}\n  />\n);\n\nexport const dropdownSelector = () => (\n  <Core.DropdownSelector\n    name=\"MyParam\"\n    style={{ display: \"inline-block\", width: \"250px\" }}\n    label=\"Pick an option:\"\n    options={[\n      {\n        text: \"Option 1\",\n        value: \"Value1\"\n      },\n      {\n        text: \"Option 2\",\n        value: \"Value2\"\n      }\n    ]}\n    onChange={onChange}\n    value=\"Value2\"\n  />\n);\n\nexport const generalSettingsPanel = () => (\n  <Core.GeneralSettingsPanel\n    query={{\n      mode: text(\"mode\", \"WALK,BUS,TRAM,SUBWAY\"),\n      routingType: \"ITINERARY\"\n    }}\n    onQueryParamChange={onQueryParamChange}\n    supportedModes={commonModes}\n  />\n);\n\nconst Space = () => (\n  <span\n    style={{\n      display: \"inline-block\",\n      width: \"1em\"\n    }}\n  />\n);\n\nexport const modeButtons = () => (\n  <div>\n    <div>\n      <Core.ModeButton onClick={onClick} title=\"Normal\">\n        <Icons.Max />\n        +\n        <Icons.Bike />\n        Go by train\n        <span style={{ fontSize: \"150%\", color: \"red\" }}> or </span> bike\n      </Core.ModeButton>\n      <Space />\n      <Core.ModeButton selected onClick={onClick} title=\"Active\">\n        <Icons.Max />\n        Train\n      </Core.ModeButton>\n      <Space />\n      <Core.ModeButton\n        enabled={false}\n        label=\"Can't Select!\"\n        onClick={onClick}\n        title=\"Disabled\"\n      >\n        <Icons.AlertSolid />\n        Can&apos;t select!\n        <Icons.Alert />\n      </Core.ModeButton>\n    </div>\n    <div>\n      <Core.ModeButton onClick={onClick} showTitle={false} title=\"Walk Only\">\n        <Icons.Max />\n        Walk Only\n      </Core.ModeButton>\n    </div>\n  </div>\n);\n\nexport const modeSelector = () => (\n  <Core.ModeSelector modes={modeOptions} onChange={onChange} />\n);\n\nexport const submodeSelector = () => (\n  <Core.SubmodeSelector\n    inline={boolean(\"inline\", false)}\n    label=\"Submodes:\"\n    modes={submodeOptions}\n    onChange={onChange}\n  />\n);\n"]}