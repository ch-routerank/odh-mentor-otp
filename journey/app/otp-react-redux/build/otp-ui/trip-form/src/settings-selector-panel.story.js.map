{"version":3,"sources":["settings-selector-panel.story.js"],"names":["headingStyle","fontFamily","fontSize","onQueryParamChange","storyQueryParams","mode","routingType","PanelWrapper","Component","constructor","queryParam","queryParams","state","newParams","setState","render","children","props","React","cloneElement","handleOnQueryParamChange","decorator","story","title","decorators","withInfo","settingsSelectorPanel","commonModes","commonCompanies","settingsSelectorPanelWithCustomIcons","ClassicModeIcon","settingsSelectorPanelUndefinedParams","commonModesEmpty","undefined"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,YADO;AAEnBC,EAAAA,QAAQ,EAAE;AAFS,CAArB;AAKA,MAAMC,kBAAkB,GAAG,0BAAO,oBAAP,CAA3B;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,IAAI,EAAE,MADiB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB;;AAKA,MAAMC,YAAN,SAA2BC,gBAA3B,CAAqC;AACnCC,EAAAA,WAAW,GAAG;AACZ;;AADY,sDAKaC,UAAU,IAAI;AACvC,YAAM;AAAEC,QAAAA;AAAF,UAAkB,KAAKC,KAA7B;AACA,YAAMC,SAAS,GAAG,EAAE,GAAGF,WAAL;AAAkB,WAAGD;AAArB,OAAlB;AAEAP,MAAAA,kBAAkB,CAACO,UAAD,CAAlB;AAEA,WAAKI,QAAL,CAAc;AACZH,QAAAA,WAAW,EAAEE;AADD,OAAd;AAGD,KAda;;AAEZ,SAAKD,KAAL,GAAa;AAAED,MAAAA,WAAW,EAAEP;AAAf,KAAb;AACD;;AAaDW,EAAAA,MAAM,GAAG;AACP;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAe,KAAKC,KAA1B;AACA,UAAM;AAAEN,MAAAA;AAAF,QAAkB,KAAKC,KAA7B;AACA,wBAAOM,eAAMC,YAAN,CAAmBH,QAAnB,EAA6B;AAClCb,MAAAA,kBAAkB,EAAE,KAAKiB,wBADS;AAElCT,MAAAA;AAFkC,KAA7B,CAAP;AAID;;AAzBkC;;AA4BrC,MAAMU,SAAS,GAAGC,KAAK,iBACrB,uDACE;AAAG,EAAA,KAAK,EAAEtB;AAAV,WADF,eAEE,0CAAMsB,KAAK,EAAX,CAFF,eAIE;AAAG,EAAA,KAAK,EAAEtB;AAAV,YAJF,eAKE,0CAAM,qBAAOsB,KAAK,EAAZ,CAAN,CALF,CADF;;eAUe;AACbC,EAAAA,KAAK,EAAE,uBADM;AAEbC,EAAAA,UAAU,EAAE,CAACH,SAAD,EAAYI,mBAAZ;AAFC,C;;;AAKR,MAAMC,qBAAqB,GAAG,mBACnC,6BAAC,YAAD,qBACE,6BAAC,8BAAD;AACE,EAAA,cAAc,EAAEC,cADlB;AAEE,EAAA,kBAAkB,EAAEC;AAFtB,EADF,CADK;;;;AASA,MAAMC,oCAAoC,GAAG,mBAClD,6BAAC,YAAD,qBACE,6BAAC,8BAAD;AACE,EAAA,QAAQ,EAAEC,sBADZ;AAEE,EAAA,cAAc,EAAEH,cAFlB;AAGE,EAAA,kBAAkB,EAAEC;AAHtB,EADF,CADK;;;;AAUA,MAAMG,oCAAoC,GAAG,mBAClD,6BAAC,YAAD,qBACE,6BAAC,8BAAD;AACE,EAAA,cAAc,EAAEC,mBADlB;AAEE,EAAA,kBAAkB,EAAEC;AAFtB,EADF,CADK","sourcesContent":["import { ClassicModeIcon } from \"@opentripplanner/icons\";\n\nimport React, { Component } from \"react\";\nimport { action } from \"@storybook/addon-actions\";\nimport { withInfo } from \"@storybook/addon-info\";\n\nimport SettingsSelectorPanel from \"./SettingsSelectorPanel\";\n\nimport commonCompanies from \"./__mocks__/companies\";\nimport commonModes from \"./__mocks__/modes\";\nimport commonModesEmpty from \"./__mocks__/modes-empty\";\nimport trimet from \"./__mocks__/trimet.styled\";\n\nconst headingStyle = {\n  fontFamily: \"sans-serif\",\n  fontSize: \"16px\"\n};\n\nconst onQueryParamChange = action(\"onQueryParamChange\");\n\nconst storyQueryParams = {\n  mode: \"WALK\",\n  routingType: \"ITINERARY\"\n};\n\nclass PanelWrapper extends Component {\n  constructor() {\n    super();\n    this.state = { queryParams: storyQueryParams };\n  }\n\n  handleOnQueryParamChange = queryParam => {\n    const { queryParams } = this.state;\n    const newParams = { ...queryParams, ...queryParam };\n\n    onQueryParamChange(queryParam);\n\n    this.setState({\n      queryParams: newParams\n    });\n  };\n\n  render() {\n    // eslint-disable-next-line react/prop-types\n    const { children } = this.props;\n    const { queryParams } = this.state;\n    return React.cloneElement(children, {\n      onQueryParamChange: this.handleOnQueryParamChange,\n      queryParams\n    });\n  }\n}\n\nconst decorator = story => (\n  <div>\n    <p style={headingStyle}>Plain</p>\n    <div>{story()}</div>\n\n    <p style={headingStyle}>Styled</p>\n    <div>{trimet(story())}</div>\n  </div>\n);\n\nexport default {\n  title: \"SettingsSelectorPanel\",\n  decorators: [decorator, withInfo]\n};\n\nexport const settingsSelectorPanel = () => (\n  <PanelWrapper>\n    <SettingsSelectorPanel\n      supportedModes={commonModes}\n      supportedCompanies={commonCompanies}\n    />\n  </PanelWrapper>\n);\n\nexport const settingsSelectorPanelWithCustomIcons = () => (\n  <PanelWrapper>\n    <SettingsSelectorPanel\n      ModeIcon={ClassicModeIcon}\n      supportedModes={commonModes}\n      supportedCompanies={commonCompanies}\n    />\n  </PanelWrapper>\n);\n\nexport const settingsSelectorPanelUndefinedParams = () => (\n  <PanelWrapper>\n    <SettingsSelectorPanel\n      supportedModes={commonModesEmpty}\n      supportedCompanies={undefined}\n    />\n  </PanelWrapper>\n);\n"]}