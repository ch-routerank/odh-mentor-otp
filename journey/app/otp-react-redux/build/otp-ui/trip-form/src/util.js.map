{"version":3,"sources":["util.js"],"names":["isBike","mode","supportedExclusiveModes","label","isActive","isWalk","isMicromobility","getModeString","modeObj","getCompanies","companies","modes","filter","comp","split","m","includes","length","getCompaniesForModeId","id","supportedCompanies","newModes","nonTransitModes","defaultAccessModeCompany","toUpperCase","map","getTransitSubmodeOptions","ModeIcon","selectedModes","transitModes","modeStr","selected","text","title","getPrimaryModeOption","some","isTransit","showTitle","getTransitCombinedModeOptions","selectedCompanies","accessModes","modesHaveTransit","modeCompany","company","modeMonopoly","CompanyIcon","FinalIcon","getExclusiveModeOptions","exclusiveModes","getModeOptions","primary","secondary","tertiary","getCompaniesOptions","getBicycleOrMicromobilityModeOptions"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  hasRental,\n  hasHail,\n  isBicycle,\n  isBicycleRent,\n  isMicromobility,\n  isTransit,\n  isWalk\n} from \"@opentripplanner/core-utils/lib/itinerary\";\nimport { getCompanyIcon } from \"@opentripplanner/icons/lib/companies\";\n\nexport function isBike(mode) {\n  return isBicycle(mode) || isBicycleRent(mode);\n}\n\nconst supportedExclusiveModes = [\n  {\n    mode: \"WALK\",\n    label: \"Walk Only\",\n    isActive: isWalk\n  },\n  {\n    mode: \"BICYCLE\",\n    label: \"Bike Only\",\n    isActive: isBike\n  },\n  {\n    mode: \"MICROMOBILITY\",\n    label: \"E-scooter Only\",\n    isActive: isMicromobility\n  }\n];\n\n/**\n * Obtains the mode-as-a-string from a mode object found in the configuration.\n * In config.yaml, you can write either:\n *   transitModes:    -or-   transitModes:\n *   - BUS                   - mode: BUS\n *   - RAIL                    label: Bus\n *                           - mode: RAIL\n *                             label: Commuter Rail\n *\n * @param modeObj The mode object per the configuration to convert.\n */\nexport function getModeString(modeObj) {\n  return modeObj.mode || modeObj;\n}\n\n/**\n * Of the specified companies, returns those that operate the specified modes.\n * @param companies The supported companies per OTP configuration.\n * @param modes The desired modes for which to get the operating companies.\n * @returns An array of companies that operate the specified modes (should not be undefined as companies is an array).\n */\nfunction getCompanies(companies, modes) {\n  return companies\n    .filter(\n      comp => comp.modes.split(\",\").filter(m => modes.includes(m)).length > 0\n    )\n    .filter(comp => hasRental(comp.modes) || hasHail(comp.modes));\n}\n\n/**\n * Returns an array containing the company ids, in upper case for MOD UI URLs, for the specified mode id.\n * The mode id scheme is set and used by function getTransitCombinedModeOptions().\n * @param id The mode id to process.\n * @param supportedCompanies The list of supported companies (see structure in __mocks__/companies.js).\n */\nexport function getCompaniesForModeId(id, supportedCompanies) {\n  const newModes = id.split(\"+\");\n  const nonTransitModes = newModes.length > 1 ? [newModes[1]] : [\"WALK\"];\n  // TODO: for non-transit modes, shoudl we also accommodate WALK+DRIVE, WALK+e-scooter??\n  // They already seem to work without WALK right now.\n\n  // Accommodate companies defined under accessModes.\n  // Convert company ID to upper case for passing to MOD UI URL.\n  const defaultAccessModeCompany =\n    newModes.length > 2 ? [newModes[2].toUpperCase()] : null;\n\n  // If there are multiple (scooter | bikeshare | etc.) companies,\n  // then if one is specified in the configured modes, then use that company.\n  // Othewise, if this is for an exclusive mode (bike, scooter), then use all companies.\n  // Convert company IDs to upper case for passing to MOD UI URL.\n  // selectedCompanies is at least an empty array.\n  const companies =\n    defaultAccessModeCompany ||\n    getCompanies(supportedCompanies, nonTransitModes).map(comp =>\n      comp.id.toUpperCase()\n    );\n\n  return { defaultAccessModeCompany, companies, nonTransitModes };\n}\n\n/**\n * Returns the available transit modes (rail, bus, etc.).\n * @param ModeIcon The icon component for rendering.\n * @param modes The available modes to choose from.\n * @param selectedModes The modes that should appear selected.\n */\nexport function getTransitSubmodeOptions(ModeIcon, modes, selectedModes) {\n  const { transitModes } = modes;\n\n  // FIXME: If only one transit mode is available, select it.\n  return transitModes.map(modeObj => {\n    const modeStr = getModeString(modeObj);\n    return {\n      id: modeStr,\n      selected: selectedModes.includes(modeStr),\n      text: (\n        <span>\n          <ModeIcon mode={modeStr} />\n          {modeObj.label}\n        </span>\n      ),\n      title: modeObj.label\n    };\n  });\n}\n\n/**\n * Returns big primary \"Take Transit\" choice.\n * @param ModeIcon The icon component for rendering.\n * @param selectedModes An array of string that lists the modes selected for a trip query.\n */\nfunction getPrimaryModeOption(ModeIcon, selectedModes) {\n  return {\n    id: \"TRANSIT\",\n    selected: selectedModes.some(isTransit) && selectedModes.includes(\"WALK\"),\n    showTitle: false,\n    text: (\n      <span>\n        <ModeIcon mode=\"TRANSIT\" />\n        Take Transit\n      </span>\n    ),\n    title: \"Take Transit\"\n  };\n}\n\n/**\n * Returns the transit + access mode combinations.\n * @param icons The icon set to use.\n * @param modes The available modes to choose from.\n * @param selectedModes An array of string that lists the modes selected for a trip query.\n * @param selectedCompanies The companies to show as selected.\n * @param supportedCompanies The supported companies for certain modes.\n */\nfunction getTransitCombinedModeOptions(\n  ModeIcon,\n  modes,\n  selectedModes,\n  selectedCompanies,\n  supportedCompanies\n) {\n  const { accessModes } = modes;\n  const modesHaveTransit = selectedModes.some(isTransit);\n\n  return (\n    accessModes &&\n    accessModes.map(modeObj => {\n      const modeStr = getModeString(modeObj);\n      const modeCompany = modeObj.company\n        ? modeObj.company.toUpperCase()\n        : null;\n\n      const company = modeObj.company ? `+${modeObj.company}` : \"\";\n      const id = `TRANSIT+${modeStr}${company}`;\n\n      const { companies } = getCompaniesForModeId(id, supportedCompanies);\n      const modeMonopoly = companies[0];\n      const CompanyIcon = getCompanyIcon(modeCompany || modeMonopoly || \"\");\n\n      /**\n       * We don't know in advance if a particular icon is supported by the ModeIcon component.\n       * Therefore, for rendering, we need to know whether one of the following\n       * did render something, so we know whether to fall back on the next icon.\n       * Hence the regular function call syntax rather than <Tags />.\n       *\n       * Access mode icons are processed in the order below, so that:\n       * - Any generic mode (e.g. BICYCLE_RENT) can be directly customized using `icons`,\n       * - Implementers can set icons for companies not in OTP-UI or override OTP-UI icons using `icons`,\n       *   using the scheme <OTP_MODE>_<COMPANY> (e.g. 'CAR_HAIL_UBER').\n       * - Icons for common companies (defined in the icons package) don't need to be specified in `icons`.\n       */\n      const FinalIcon =\n        ModeIcon({ mode: modeStr }) ||\n        ModeIcon({ mode: `${modeStr}_${modeCompany}` }) ||\n        (CompanyIcon && <CompanyIcon />);\n\n      return {\n        id,\n        selected:\n          modesHaveTransit &&\n          selectedModes.includes(modeStr) &&\n          (!selectedCompanies.length ||\n            !modeCompany ||\n            selectedCompanies.includes(modeCompany)),\n        text: (\n          <span>\n            <ModeIcon mode=\"TRANSIT\" />+{FinalIcon}\n          </span>\n        ),\n        title: modeObj.label\n      };\n    })\n  );\n}\n\n/**\n * Returns the exclusive mode options.\n * @param ModeIcon The icon component for rendering.\n * @param modes The available modes to choose from.\n * @param selectedModes An array of string that lists the modes selected for a trip query.\n */\nfunction getExclusiveModeOptions(ModeIcon, modes, selectedModes) {\n  const { exclusiveModes } = modes;\n\n  return supportedExclusiveModes\n    .filter(({ mode }) => exclusiveModes && exclusiveModes.includes(mode))\n    .map(({ isActive, label, mode }) => ({\n      id: mode,\n      selected: !selectedModes.some(isTransit) && selectedModes.some(isActive),\n      showTitle: false,\n      text: (\n        <span>\n          <ModeIcon mode={mode} /> {label}\n        </span>\n      ),\n      title: label\n    }));\n}\n\n/**\n * Generates the options (primary, secondary, tertiary) for the mode selector based on the modes read from config.yaml.\n * @param ModeIcon The icon component for rendering.\n * @param modes The available modes to choose from.\n * @param selectedModes An array of string that lists the modes selected for a trip query.\n * @param selectedCompanies The companies to show as selected (when the user selects an exclusive mode operated by multiple companies).\n * @param supportedCompanies The supported companies for certain access modes.\n */\nexport function getModeOptions(\n  ModeIcon,\n  modes,\n  selectedModes,\n  selectedCompanies,\n  supportedCompanies\n) {\n  return {\n    primary: getPrimaryModeOption(ModeIcon, selectedModes),\n    secondary: getTransitCombinedModeOptions(\n      ModeIcon,\n      modes,\n      selectedModes,\n      selectedCompanies,\n      supportedCompanies\n    ),\n    tertiary: getExclusiveModeOptions(ModeIcon, modes, selectedModes)\n  };\n}\n\n/**\n * Returns the UI options for the specified companies, modes, and selection.\n * @param companies The supported companies per OTP configuration.\n * @param modes The desired modes for which to get the operating companies.\n * @param selectedCompanies The companies to render selected from the UI.\n * @returns An array of UI options (should not be undefined as companies is an array).\n */\nexport function getCompaniesOptions(companies, modes, selectedCompanies) {\n  return getCompanies(companies, modes).map(comp => {\n    const CompanyIcon = getCompanyIcon(comp.id);\n\n    return {\n      id: comp.id,\n      selected: selectedCompanies.includes(comp.id),\n      text: (\n        <span>\n          {CompanyIcon && <CompanyIcon />} {comp.label}\n        </span>\n      ),\n      title: comp.label\n    };\n  });\n}\n\n/**\n * Returns the UI options for the specified bike/micromobility modes and selection.\n * @param ModeIcon The component for rendering icons.\n * @param modes The supported bike or micromobility modes.\n * @param selectedModes The modes to render selected from the UI.\n * @returns An array of UI options, or undefined if modes is undefined.\n */\nexport function getBicycleOrMicromobilityModeOptions(\n  ModeIcon,\n  modes,\n  selectedModes\n) {\n  return (\n    modes &&\n    modes.map(({ label, mode }) => ({\n      id: mode,\n      selected: selectedModes.includes(mode),\n      text: (\n        <span>\n          <ModeIcon mode={mode} />\n          {label}\n        </span>\n      ),\n      title: label\n    }))\n  );\n}\n"]}