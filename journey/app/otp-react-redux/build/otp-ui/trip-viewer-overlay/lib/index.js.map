{"version":3,"sources":["index.js"],"names":["Object","defineProperty","exports","value","default","_types","require","_propTypes","_interopRequireDefault","_react","_reactLeaflet","_polyline","obj","__esModule","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","TripViewerOverlay","MapLayer","componentDidMount","componentWillUnmount","componentDidUpdate","prevProps","oldGeometry","tripData","geometry","newGeometry","props","pts","decode","points","leaflet","map","fitBounds","createLeafletElement","updateLeafletElement","render","leafletPath","createElement","FeatureGroup","Polyline","positions","propTypes","leafletPathType","shape","encodedPolylineType","defaultProps","color","opacity","weight","_default","withLeaflet"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,uCAAD,CAApB;;AAEA,IAAIC,UAAU,GAAGC,sBAAsB,CAACF,OAAO,CAAC,YAAD,CAAR,CAAvC;;AAEA,IAAIG,MAAM,GAAGD,sBAAsB,CAACF,OAAO,CAAC,OAAD,CAAR,CAAnC;;AAEA,IAAII,aAAa,GAAGJ,OAAO,CAAC,eAAD,CAA3B;;AAEA,IAAIK,SAAS,GAAGH,sBAAsB,CAACF,OAAO,CAAC,kBAAD,CAAR,CAAtC;;AAEA,SAASE,sBAAT,CAAgCI,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAER,IAAAA,OAAO,EAAEQ;AAAX,GAArC;AAAwD;;AAE/F,SAASE,QAAT,GAAoB;AAAEA,EAAAA,QAAQ,GAAGd,MAAM,CAACe,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,UAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AAA2B,WAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,YAAIpB,MAAM,CAACsB,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEL,UAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,WAAOL,MAAP;AAAgB,GAA5P;;AAA8P,SAAOF,QAAQ,CAACW,KAAT,CAAe,IAAf,EAAqBP,SAArB,CAAP;AAAyC;AAE7T;AACA;AACA;;;AACA,MAAMQ,iBAAN,SAAgChB,aAAa,CAACiB,QAA9C,CAAuD;AACrDC,EAAAA,iBAAiB,GAAG,CAAE,CAD+B,CAC9B;;;AAGvBC,EAAAA,oBAAoB,GAAG,CAAE;;AAEzBC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,UAAMC,WAAW,GAAGD,SAAS,CAACE,QAAV,IAAsBF,SAAS,CAACE,QAAV,CAAmBC,QAA7D;AACA,UAAMC,WAAW,GAAG,KAAKC,KAAL,CAAWH,QAAX,IAAuB,KAAKG,KAAL,CAAWH,QAAX,CAAoBC,QAA/D;AACA,QAAIF,WAAW,KAAKG,WAAhB,IAA+B,CAACA,WAApC,EAAiD;;AAEjD,UAAME,GAAG,GAAG1B,SAAS,CAACP,OAAV,CAAkBkC,MAAlB,CAAyBH,WAAW,CAACI,MAArC,CAAZ;;AAEA,SAAKH,KAAL,CAAWI,OAAX,CAAmBC,GAAnB,CAAuBC,SAAvB,CAAiCL,GAAjC;AACD;;AAEDM,EAAAA,oBAAoB,GAAG,CAAE;;AAEzBC,EAAAA,oBAAoB,GAAG,CAAE;;AAEzBC,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,WADI;AAEJb,MAAAA;AAFI,QAGF,KAAKG,KAHT;AAIA,QAAI,CAACH,QAAD,IAAa,CAACA,QAAQ,CAACC,QAA3B,EAAqC,OAAO,aAAazB,MAAM,CAACL,OAAP,CAAe2C,aAAf,CAA6BrC,aAAa,CAACsC,YAA3C,EAAyD,IAAzD,CAApB;;AAErC,UAAMX,GAAG,GAAG1B,SAAS,CAACP,OAAV,CAAkBkC,MAAlB,CAAyBL,QAAQ,CAACC,QAAT,CAAkBK,MAA3C,CAAZ;;AAEA,WAAO,aAAa9B,MAAM,CAACL,OAAP,CAAe2C,aAAf,CAA6BrC,aAAa,CAACsC,YAA3C,EAAyD,IAAzD,EAA+D,aAAavC,MAAM,CAACL,OAAP,CAAe2C,aAAf,CAA6BrC,aAAa,CAACuC,QAA3C,EAAqDnC,QAAQ,CAAC,EAAD,EAAKgC,WAAL,EAAkB;AAC7KI,MAAAA,SAAS,EAAEb;AADkK,KAAlB,CAA7D,CAA5E,CAApB;AAGD;;AAhCoD;;AAoCvDX,iBAAiB,CAACyB,SAAlB,GAA8B;AAC5B;AACF;AACA;AACA;AACA;AACA;AACEL,EAAAA,WAAW,EAAEzC,MAAM,CAAC+C,eAPQ;;AAS5B;AACF;AACA;AACA;AACA;AACEnB,EAAAA,QAAQ,EAAE1B,UAAU,CAACH,OAAX,CAAmBiD,KAAnB,CAAyB;AACjCnB,IAAAA,QAAQ,EAAE7B,MAAM,CAACiD;AADgB,GAAzB;AAdkB,CAA9B;AAkBA5B,iBAAiB,CAAC6B,YAAlB,GAAiC;AAC/BT,EAAAA,WAAW,EAAE;AACXU,IAAAA,KAAK,EAAE,SADI;AAEXC,IAAAA,OAAO,EAAE,GAFE;AAGXC,IAAAA,MAAM,EAAE;AAHG;AADkB,CAAjC;;AAQA,IAAIC,QAAQ,GAAG,CAAC,GAAGjD,aAAa,CAACkD,WAAlB,EAA+BlC,iBAA/B,CAAf;;AAEAxB,OAAO,CAACE,OAAR,GAAkBuD,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _types = require(\"@opentripplanner/core-utils/lib/types\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactLeaflet = require(\"react-leaflet\");\n\nvar _polyline = _interopRequireDefault(require(\"@mapbox/polyline\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/**\n * An overlay that will display the geometry of a trip.\n */\nclass TripViewerOverlay extends _reactLeaflet.MapLayer {\n  componentDidMount() {} // TODO: determine why the default MapLayer componentWillUnmount() method throws an error\n\n\n  componentWillUnmount() {}\n\n  componentDidUpdate(prevProps) {\n    const oldGeometry = prevProps.tripData && prevProps.tripData.geometry;\n    const newGeometry = this.props.tripData && this.props.tripData.geometry;\n    if (oldGeometry === newGeometry || !newGeometry) return;\n\n    const pts = _polyline.default.decode(newGeometry.points);\n\n    this.props.leaflet.map.fitBounds(pts);\n  }\n\n  createLeafletElement() {}\n\n  updateLeafletElement() {}\n\n  render() {\n    const {\n      leafletPath,\n      tripData\n    } = this.props;\n    if (!tripData || !tripData.geometry) return /*#__PURE__*/_react.default.createElement(_reactLeaflet.FeatureGroup, null);\n\n    const pts = _polyline.default.decode(tripData.geometry.points);\n\n    return /*#__PURE__*/_react.default.createElement(_reactLeaflet.FeatureGroup, null, /*#__PURE__*/_react.default.createElement(_reactLeaflet.Polyline, _extends({}, leafletPath, {\n      positions: pts\n    })));\n  }\n\n}\n\nTripViewerOverlay.propTypes = {\n  /**\n   * Leaflet path properties to use to style the polyline that represents the\n   * trip.\n   *\n   * See https://leafletjs.com/reference-1.6.0.html#path\n   */\n  leafletPath: _types.leafletPathType,\n\n  /**\n   * This represents data about a trip as obtained from a transit index.\n   * Typically a trip has more data than these items, so this is only a list of\n   * the properties that this component actually uses.\n   */\n  tripData: _propTypes.default.shape({\n    geometry: _types.encodedPolylineType\n  })\n};\nTripViewerOverlay.defaultProps = {\n  leafletPath: {\n    color: \"#00bfff\",\n    opacity: 0.6,\n    weight: 8\n  }\n};\n\nvar _default = (0, _reactLeaflet.withLeaflet)(TripViewerOverlay);\n\nexports.default = _default;"]}