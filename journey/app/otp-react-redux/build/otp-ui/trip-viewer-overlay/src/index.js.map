{"version":3,"sources":["index.js"],"names":["TripViewerOverlay","MapLayer","componentDidMount","componentWillUnmount","componentDidUpdate","prevProps","oldGeometry","tripData","geometry","newGeometry","props","pts","polyline","decode","points","leaflet","map","fitBounds","createLeafletElement","updateLeafletElement","render","leafletPath","propTypes","leafletPathType","PropTypes","shape","encodedPolylineType","defaultProps","color","opacity","weight"],"mappings":";;;;;;;AAAA;;AAIA;;AACA;;AACA;;AAEA;;;;;;AAEA;AACA;AACA;AACA,MAAMA,iBAAN,SAAgCC,sBAAhC,CAAyC;AACvCC,EAAAA,iBAAiB,GAAG,CAAE,CADiB,CAGvC;;;AACAC,EAAAA,oBAAoB,GAAG,CAAE;;AAEzBC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,UAAMC,WAAW,GAAGD,SAAS,CAACE,QAAV,IAAsBF,SAAS,CAACE,QAAV,CAAmBC,QAA7D;AACA,UAAMC,WAAW,GAAG,KAAKC,KAAL,CAAWH,QAAX,IAAuB,KAAKG,KAAL,CAAWH,QAAX,CAAoBC,QAA/D;AACA,QAAIF,WAAW,KAAKG,WAAhB,IAA+B,CAACA,WAApC,EAAiD;;AACjD,UAAME,GAAG,GAAGC,kBAASC,MAAT,CAAgBJ,WAAW,CAACK,MAA5B,CAAZ;;AACA,SAAKJ,KAAL,CAAWK,OAAX,CAAmBC,GAAnB,CAAuBC,SAAvB,CAAiCN,GAAjC;AACD;;AAEDO,EAAAA,oBAAoB,GAAG,CAAE;;AAEzBC,EAAAA,oBAAoB,GAAG,CAAE;;AAEzBC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,WAAF;AAAed,MAAAA;AAAf,QAA4B,KAAKG,KAAvC;AAEA,QAAI,CAACH,QAAD,IAAa,CAACA,QAAQ,CAACC,QAA3B,EAAqC,oBAAO,6BAAC,0BAAD,OAAP;;AAErC,UAAMG,GAAG,GAAGC,kBAASC,MAAT,CAAgBN,QAAQ,CAACC,QAAT,CAAkBM,MAAlC,CAAZ;;AACA,wBACE,6BAAC,0BAAD,qBAEE,6BAAC,sBAAD,eAAcO,WAAd;AAA2B,MAAA,SAAS,EAAEV;AAAtC,OAFF,CADF;AAMD;;AA9BsC;;AAiCzCX,iBAAiB,CAACsB,SAAlB,GAA8B;AAC5B;AACF;AACA;AACA;AACA;AACA;AACED,EAAAA,WAAW,EAAEE,sBAPe;;AAQ5B;AACF;AACA;AACA;AACA;AACEhB,EAAAA,QAAQ,EAAEiB,mBAAUC,KAAV,CAAgB;AACxBjB,IAAAA,QAAQ,EAAEkB;AADc,GAAhB;AAbkB,CAA9B;AAkBA1B,iBAAiB,CAAC2B,YAAlB,GAAiC;AAC/BN,EAAAA,WAAW,EAAE;AACXO,IAAAA,KAAK,EAAE,SADI;AAEXC,IAAAA,OAAO,EAAE,GAFE;AAGXC,IAAAA,MAAM,EAAE;AAHG;AADkB,CAAjC;;eAQe,+BAAY9B,iBAAZ,C","sourcesContent":["import {\n  encodedPolylineType,\n  leafletPathType\n} from \"../../core-utils/src/types\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { FeatureGroup, MapLayer, Polyline, withLeaflet } from \"react-leaflet\";\n\nimport polyline from \"@mapbox/polyline\";\n\n/**\n * An overlay that will display the geometry of a trip.\n */\nclass TripViewerOverlay extends MapLayer {\n  componentDidMount() {}\n\n  // TODO: determine why the default MapLayer componentWillUnmount() method throws an error\n  componentWillUnmount() {}\n\n  componentDidUpdate(prevProps) {\n    const oldGeometry = prevProps.tripData && prevProps.tripData.geometry;\n    const newGeometry = this.props.tripData && this.props.tripData.geometry;\n    if (oldGeometry === newGeometry || !newGeometry) return;\n    const pts = polyline.decode(newGeometry.points);\n    this.props.leaflet.map.fitBounds(pts);\n  }\n\n  createLeafletElement() {}\n\n  updateLeafletElement() {}\n\n  render() {\n    const { leafletPath, tripData } = this.props;\n\n    if (!tripData || !tripData.geometry) return <FeatureGroup />;\n\n    const pts = polyline.decode(tripData.geometry.points);\n    return (\n      <FeatureGroup>\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <Polyline {...leafletPath} positions={pts} />\n      </FeatureGroup>\n    );\n  }\n}\n\nTripViewerOverlay.propTypes = {\n  /**\n   * Leaflet path properties to use to style the polyline that represents the\n   * trip.\n   *\n   * See https://leafletjs.com/reference-1.6.0.html#path\n   */\n  leafletPath: leafletPathType,\n  /**\n   * This represents data about a trip as obtained from a transit index.\n   * Typically a trip has more data than these items, so this is only a list of\n   * the properties that this component actually uses.\n   */\n  tripData: PropTypes.shape({\n    geometry: encodedPolylineType\n  })\n};\n\nTripViewerOverlay.defaultProps = {\n  leafletPath: {\n    color: \"#00bfff\",\n    opacity: 0.6,\n    weight: 8\n  }\n};\n\nexport default withLeaflet(TripViewerOverlay);\n"]}