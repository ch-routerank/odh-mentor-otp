{"version":3,"sources":["user-trip-settings.js"],"names":["UserTripSettings","options","coreUtils","query","getTripOptionsFromQuery","props","defaults","clearDefaultSettings","storeDefaultSettings","config","resetForm","queryIsDefault","isNotDefaultQuery","rememberIsDisabled","marginBottom","_toggleStoredSettings","Component","mapStateToProps","state","ownProps","otp","currentQuery","user","mapDispatchToProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;;;;IAMMA,gB;;;;;;;;;;;;;;;;4EACoB,YAAM;AAC5B,UAAMC,OAAO,GAAGC,mBAAUC,KAAV,CAAgBC,uBAAhB,CAAwC,MAAKC,KAAL,CAAWF,KAAnD,CAAhB,CAD4B,CAE5B;;;AACA,UAAI,MAAKE,KAAL,CAAWC,QAAf,EAAyB,MAAKD,KAAL,CAAWE,oBAAX,GAAzB,KACK,MAAKF,KAAL,CAAWG,oBAAX,CAAgCP,OAAhC;AACN,K;;;;;;;6BAES;AAAA,wBAMJ,KAAKI,KAND;AAAA,UAENI,MAFM,eAENA,MAFM;AAAA,UAGNH,QAHM,eAGNA,QAHM;AAAA,UAINH,KAJM,eAINA,KAJM;AAAA,UAKNO,SALM,eAKNA,SALM,EAQR;AACA;;AACA,UAAMC,cAAc,GAAG,CAACT,mBAAUC,KAAV,CAAgBS,iBAAhB,CAAkCT,KAAlC,EAAyCM,MAAzC,CAAxB;AACA,UAAMI,kBAAkB,GAAGF,cAAc,IAAI,CAACL,QAA9C;AAEA,0BACE;AAAK,QAAA,KAAK,EAAE;AAAEQ,UAAAA,YAAY,EAAE;AAAhB,SAAZ;AAAqC,QAAA,SAAS,EAAC;AAA/C,sBACE,6BAAC,sBAAD;AACE,QAAA,OAAO,EAAC,MADV;AAEE,QAAA,MAAM,EAAC,QAFT;AAGE,QAAA,QAAQ,EAAED,kBAHZ;AAIE,QAAA,OAAO,EAAE,KAAKE;AAJhB,SAKET,QAAQ,gBACJ,wDAAM,6BAAC,aAAD;AAAM,QAAA,IAAI,EAAC;AAAX,QAAN,uBADI,gBAEJ,wDAAM,6BAAC,aAAD;AAAM,QAAA,IAAI,EAAC;AAAX,QAAN,2BAPN,CADF,eAUE,6BAAC,sBAAD;AACE,QAAA,OAAO,EAAC,MADV;AAEE,QAAA,MAAM,EAAC,QAFT;AAGE,QAAA,QAAQ,EAAEK,cAAc,IAAI,CAACL,QAH/B;AAIE,QAAA,OAAO,EAAEI;AAJX,sBAME,6BAAC,aAAD;AAAM,QAAA,IAAI,EAAC;AAAX,QANF,EAMuB,GANvB,aAOUJ,QAAQ,GAAG,KAAH,GAAW,EAP7B,cAVF,CADF;AAsBD;;;;EA3C4BU,gB,GA8C/B;;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAAA,mBACJD,KAAK,CAACE,GADF;AAAA,MACnCX,MADmC,cACnCA,MADmC;AAAA,MAC3BY,YAD2B,cAC3BA,YAD2B;AAAA,MACbC,IADa,cACbA,IADa;AAAA,MAEnChB,QAFmC,GAEtBgB,IAFsB,CAEnChB,QAFmC;AAI3C,SAAO;AACLG,IAAAA,MAAM,EAANA,MADK;AAELH,IAAAA,QAAQ,EAARA,QAFK;AAGLH,IAAAA,KAAK,EAAEkB;AAHF,GAAP;AAKD,CATD;;AAWA,IAAME,kBAAkB,GAAG;AACzBhB,EAAAA,oBAAoB,EAApBA,0BADyB;AAEzBG,EAAAA,SAAS,EAATA,eAFyB;AAGzBF,EAAAA,oBAAoB,EAApBA;AAHyB,CAA3B;;eAMe,yBAAQS,eAAR,EAAyBM,kBAAzB,EAA6CvB,gBAA7C,C","sourcesContent":["import coreUtils from '@opentripplanner/core-utils'\nimport React, { Component } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n\nimport Icon from '../narrative/icon'\nimport {\n  clearDefaultSettings,\n  resetForm,\n  storeDefaultSettings\n} from '../../actions/form'\n\n/**\n * This component contains the `Remember/Forget my trip options` and `Restore defaults` commands\n * that let the user save the selected trip settings such as mode choices,\n * walk/bike distance and speed, and trip optimization flags.\n * (The code below was previously embedded inside the `SettingsSelectorPanel` component.)\n */\nclass UserTripSettings extends Component {\n  _toggleStoredSettings = () => {\n    const options = coreUtils.query.getTripOptionsFromQuery(this.props.query)\n    // If user defaults are set, clear them. Otherwise, store them.\n    if (this.props.defaults) this.props.clearDefaultSettings()\n    else this.props.storeDefaultSettings(options)\n  }\n\n  render () {\n    const {\n      config,\n      defaults,\n      query,\n      resetForm\n    } = this.props\n\n    // Do not permit remembering trip options if they do not differ from the\n    // defaults and nothing has been stored\n    const queryIsDefault = !coreUtils.query.isNotDefaultQuery(query, config)\n    const rememberIsDisabled = queryIsDefault && !defaults\n\n    return (\n      <div style={{ marginBottom: '5px' }} className='store-settings pull-right'>\n        <Button\n          bsStyle='link'\n          bsSize='xsmall'\n          disabled={rememberIsDisabled}\n          onClick={this._toggleStoredSettings}\n        >{defaults\n            ? <span><Icon type='times' /> Forget my Dimentica</span>\n            : <span><Icon type='lock' /> Remember trip options</span>\n          }</Button>\n        <Button\n          bsStyle='link'\n          bsSize='xsmall'\n          disabled={queryIsDefault && !defaults}\n          onClick={resetForm}\n        >\n          <Icon type='undo' />{' '}\n          Restore{defaults ? ' my' : ''} defaults\n        </Button>\n      </div>\n    )\n  }\n}\n\n// connect to redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const { config, currentQuery, user } = state.otp\n  const { defaults } = user\n\n  return {\n    config,\n    defaults,\n    query: currentQuery\n  }\n}\n\nconst mapDispatchToProps = {\n  clearDefaultSettings,\n  resetForm,\n  storeDefaultSettings\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserTripSettings)\n"]}
