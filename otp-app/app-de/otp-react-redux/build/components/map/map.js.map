{"version":3,"sources":["map.js"],"names":["Map","state","activeViewIndex","view","type","props","diagramLeg","mapConfig","showDiagram","views","map","i","visibility","getComponentForView","length","position","bottom","left","zIndex","padding","setState","text","Component","mapStateToProps","ownProps","otp","ui","config"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,G;;;;;AACJ,iBAAe;AAAA;;AAAA;;AACb;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,eAAe,EAAE;AADN,KAAb;AAFa;AAKd;;;;wCAEoBC,I,EAAM;AACzB;AACA,cAAQA,IAAI,CAACC,IAAb;AACE,aAAK,SAAL;AAAgB,8BAAO,6BAAC,mBAAD,OAAP;;AAChB,aAAK,UAAL;AAAiB,8BAAO,6BAAC,oBAAD,OAAP;AAFnB;AAID;;;6BAES;AAAA;;AAAA,wBAC0B,KAAKC,KAD/B;AAAA,UACAC,UADA,eACAA,UADA;AAAA,UACYC,SADZ,eACYA,SADZ;AAGR,UAAMC,WAAW,GAAGF,UAApB,CAHQ,CAKR;;AACA,UAAMG,KAAK,GAAGF,SAAS,CAACE,KAAV,IAAmB,CAAC;AAAEL,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAjC;AAEA,0BACE;AAAK,QAAA,SAAS,EAAC;AAAf,SAEGK,KAAK,CAACC,GAAN,CAAU,UAACP,IAAD,EAAOQ,CAAP,EAAa;AACtB,4BACE;AAAK,UAAA,GAAG,EAAEA,CAAV;AACE,UAAA,SAAS,EAAC,eADZ;AAEE,UAAA,KAAK,EAAE;AAAEC,YAAAA,UAAU,EAAED,CAAC,KAAK,MAAI,CAACV,KAAL,CAAWC,eAAjB,GAAmC,SAAnC,GAA+C;AAA7D;AAFT,WAIG,MAAI,CAACW,mBAAL,CAAyBV,IAAzB,CAJH,CADF;AAQD,OATA,CAFH,EAcGM,KAAK,CAACK,MAAN,GAAe,CAAf,iBACC;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,QAAQ,EAAE,UAAZ;AAAwBC,UAAAA,MAAM,EAAE,MAAMR,WAAW,GAAG,GAAH,GAAS,CAA1B,CAAhC;AAA8DS,UAAAA,IAAI,EAAE,EAApE;AAAwEC,UAAAA,MAAM,EAAE;AAAhF;AAAZ,sBACE,6BAAC,2BAAD,QACGT,KAAK,CAACC,GAAN,CAAU,UAACP,IAAD,EAAOQ,CAAP,EAAa;AACtB,4BACE,6BAAC,sBAAD;AACE,UAAA,GAAG,EAAEA,CADP;AAEE,UAAA,MAAM,EAAC,QAFT;AAGE,UAAA,OAAO,EAAEA,CAAC,KAAK,MAAI,CAACV,KAAL,CAAWC,eAAjB,GAAmC,SAAnC,GAA+C,SAH1D;AAIE,UAAA,KAAK,EAAE;AAAEiB,YAAAA,OAAO,EAAE;AAAX,WAJT;AAKE,UAAA,OAAO,EAAE,mBAAM;AAAE,YAAA,MAAI,CAACC,QAAL,CAAc;AAAElB,cAAAA,eAAe,EAAES;AAAnB,aAAd;AAAuC;AAL1D,WAOGR,IAAI,CAACkB,IAAL,IAAalB,IAAI,CAACC,IAPrB,CADF;AAWD,OAZA,CADH,CADF,CAfJ,EAmCGI,WAAW,iBAAI,6BAAC,mBAAD;AAAY,QAAA,GAAG,EAAEF;AAAjB,QAnClB,CADF;AAuCD;;;;EA/DegB,gB,GAkElB;;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACtB,KAAD,EAAQuB,QAAR,EAAqB;AAC3C,SAAO;AACLlB,IAAAA,UAAU,EAAEL,KAAK,CAACwB,GAAN,CAAUC,EAAV,CAAapB,UADpB;AAELC,IAAAA,SAAS,EAAEN,KAAK,CAACwB,GAAN,CAAUE,MAAV,CAAiBjB;AAFvB,GAAP;AAID,CALD;;eAOe,yBAAQa,eAAR,EAAyBvB,GAAzB,C","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { ButtonGroup, Button } from 'react-bootstrap'\n\nimport DefaultMap from './default-map'\nimport LegDiagram from './leg-diagram'\nimport StylizedMap from './stylized-map'\n\nclass Map extends Component {\n  constructor () {\n    super()\n    this.state = {\n      activeViewIndex: 0\n    }\n  }\n\n  getComponentForView (view) {\n    // TODO: allow a 'CUSTOM' type\n    switch (view.type) {\n      case 'DEFAULT': return <DefaultMap />\n      case 'STYLIZED': return <StylizedMap />\n    }\n  }\n\n  render () {\n    const { diagramLeg, mapConfig } = this.props\n\n    const showDiagram = diagramLeg\n\n    // Use the views defined in the config; if none defined, just show the default map\n    const views = mapConfig.views || [{ type: 'DEFAULT' }]\n\n    return (\n      <div className='map-container'>\n        {/* The map views -- only one is visible at a time */}\n        {views.map((view, i) => {\n          return (\n            <div key={i}\n              className='map-container'\n              style={{ visibility: i === this.state.activeViewIndex ? 'visible' : 'hidden' }}\n            >\n              {this.getComponentForView(view)}\n            </div>\n          )\n        })}\n\n        {/* The toggle buttons -- only show if multiple views */}\n        {views.length > 1 && (\n          <div style={{ position: 'absolute', bottom: 12 + (showDiagram ? 192 : 0), left: 12, zIndex: 100000 }}>\n            <ButtonGroup>\n              {views.map((view, i) => {\n                return (\n                  <Button\n                    key={i}\n                    bsSize='xsmall'\n                    bsStyle={i === this.state.activeViewIndex ? 'success' : 'default'}\n                    style={{ padding: '3px 6px' }}\n                    onClick={() => { this.setState({ activeViewIndex: i }) }}\n                  >\n                    {view.text || view.type}\n                  </Button>\n                )\n              })}\n            </ButtonGroup>\n          </div>\n        )}\n\n        {/* The leg diagram overlay, if active */}\n        {showDiagram && <LegDiagram leg={diagramLeg} />}\n      </div>\n    )\n  }\n}\n\n// Connect to Redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    diagramLeg: state.otp.ui.diagramLeg,\n    mapConfig: state.otp.config.map\n  }\n}\n\nexport default connect(mapStateToProps)(Map)\n"]}