{"version":3,"sources":["tnc-leg.js"],"names":["toSentenceCase","coreUtils","itinerary","formatDuration","time","isMobile","ui","TransportationNetworkCompanyLeg","props","leg","legMode","LYFT_CLIENT_ID","UBER_CLIENT_ID","universalLinks","from","lat","lon","encodeURI","name","to","defaultTncRideTypes","tncData","label","toUpperCase","marginBottom","estimatedArrival","minCost","currencyFormatter","format","code","currency","maxCost","Component","PropTypes","object","mapStateToProps","state","ownProps","otp","config","companies","currentQuery","tnc","mapDispatchToProps","getTransportationNetworkCompanyEtaEstimate","getTransportationNetworkCompanyRideEstimate"],"mappings":"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","sourcesContent":["import currencyFormatter from 'currency-formatter'\nimport coreUtils from '@opentripplanner/core-utils'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport {\n  getTransportationNetworkCompanyEtaEstimate,\n  getTransportationNetworkCompanyRideEstimate\n} from '../../../actions/api'\n\nconst { toSentenceCase } = coreUtils.itinerary\nconst { formatDuration } = coreUtils.time\nconst { isMobile } = coreUtils.ui\n\nclass TransportationNetworkCompanyLeg extends Component {\n  static propTypes = {\n    leg: PropTypes.object,\n    legMode: PropTypes.object\n  }\n\n  state = {}\n\n  render () {\n    const { leg, legMode, LYFT_CLIENT_ID, UBER_CLIENT_ID } = this.props\n    const universalLinks = {\n      'UBER': `https://m.uber.com/${isMobile() ? 'ul/' : ''}?client_id=${UBER_CLIENT_ID}&action=setPickup&pickup[latitude]=${leg.from.lat}&pickup[longitude]=${leg.from.lon}&pickup[nickname]=${encodeURI(leg.from.name)}&dropoff[latitude]=${leg.to.lat}&dropoff[longitude]=${leg.to.lon}&dropoff[nickname]=${encodeURI(leg.to.name)}`,\n      'LYFT': `https://lyft.com/ride?id=${defaultTncRideTypes['LYFT']}&partner=${LYFT_CLIENT_ID}&pickup[latitude]=${leg.from.lat}&pickup[longitude]=${leg.from.lon}&destination[latitude]=${leg.to.lat}&destination[longitude]=${leg.to.lon}`\n    }\n    const { tncData } = leg\n    return (\n      <div>\n        <p>* estimated travel time does not account for traffic.</p>\n        <a\n          className='btn btn-default'\n          href={universalLinks[legMode.label.toUpperCase()]}\n          style={{ marginBottom: 15 }}\n          target={isMobile() ? '_self' : '_blank'}>\n          Book Ride\n        </a>\n        {tncData && tncData.estimatedArrival\n          ? <p>ETA for a driver: {formatDuration(tncData.estimatedArrival)}</p>\n          : <p>Could not obtain eta estimate from {toSentenceCase(legMode.label)}!</p>\n        }\n        {/* tncData && tncData.travelDuration &&\n          <p>Estimated drive time: {formatDuration(tncData.travelDuration)}</p> */}\n        {tncData && tncData.minCost\n          ? <p>Estimated cost: {\n            `${currencyFormatter.format(tncData.minCost, { code: tncData.currency })} - ${currencyFormatter.format(tncData.maxCost, { code: tncData.currency })}`\n          }</p>\n          : <p>Could not obtain ride estimate from {toSentenceCase(legMode.label)}!</p>}\n        }\n      </div>\n    )\n  }\n}\n\nconst defaultTncRideTypes = {\n  'LYFT': 'lyft',\n  'UBER': 'a6eef2e1-c99a-436f-bde9-fefb9181c0b0'\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const { LYFT_CLIENT_ID, UBER_CLIENT_ID } = state.otp.config\n  return {\n    companies: state.otp.currentQuery.companies,\n    tncData: state.otp.tnc,\n    LYFT_CLIENT_ID,\n    UBER_CLIENT_ID\n  }\n}\n\nconst mapDispatchToProps = {\n  getTransportationNetworkCompanyEtaEstimate,\n  getTransportationNetworkCompanyRideEstimate\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransportationNetworkCompanyLeg)\n"]}