{"version":3,"sources":["middleware.js"],"names":["fetch","require","API_USER_PATH","API_MONITORTRIP_PATH","getSecureFetchOptions","accessToken","apiKey","method","options","headers","Authorization","mode","secureFetch","url","res","status","code","json","result","message","detail","data","fetchUser","middlewareConfig","token","apiBaseUrl","requestUrl","addUser","body","JSON","stringify","updateUser","id","getTrips","addTrip","updateTrip","deleteTrip"],"mappings":"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","sourcesContent":["if (typeof (fetch) === 'undefined') require('isomorphic-fetch')\n\nconst API_USER_PATH = '/api/secure/user'\nconst API_MONITORTRIP_PATH = '/api/secure/monitoredtrip'\n\n/**\n * This method builds the options object for call to the fetch method.\n * @param {string} accessToken If non-null, a bearer Authorization header will be added with the specified token.\n * @param {string} apiKey If non-null, an x-api-key header will be added with the specified key.\n * @param {string} method The HTTP method to execute.\n * @param {*} options Extra options to pass to fetch.\n */\nexport function getSecureFetchOptions (accessToken, apiKey, method = 'get', options = {}) {\n  const headers = {\n    // JSON request bodies only.\n    'Content-Type': 'application/json'\n  }\n  if (apiKey) {\n    headers['x-api-key'] = apiKey\n  }\n  if (accessToken) {\n    headers.Authorization = `Bearer ${accessToken}`\n  }\n\n  return {\n    method,\n    mode: 'cors', // Middleware is at a different URL.\n    headers,\n    ...options\n  }\n}\n\n/**\n * This convenience method wraps a fetch call to the specified URL\n * with the token and api key added (if provided) to the HTTP request header,\n * and wraps the response by adding the success/error status of the call.\n * @param {string} url The URL to call.\n * @param {string} accessToken If non-null, the Authorization token to add to request header.\n * @param {string} apiKey If non-null, the API key to add to the Authorization header.\n * @param {string} method The HTTP method to execute.\n * @param {*} options Extra options to pass to fetch.\n */\nexport async function secureFetch (url, accessToken, apiKey, method = 'get', options = {}) {\n  const res = await fetch(url, getSecureFetchOptions(accessToken, apiKey, method, options))\n\n  if ((res.status && res.status >= 400) || (res.code && res.code >= 400)) {\n    const result = await res.json()\n    let message = `Error ${method}-ing user: ${result.message}`\n    if (result.detail) message += `  (${result.detail})`\n\n    return {\n      status: 'error',\n      message\n    }\n  }\n  return {\n    status: 'success',\n    data: await res.json()\n  }\n}\n\n// TODO: Move methods below to user/entity-specific files?\nexport async function fetchUser (middlewareConfig, token) {\n  const { apiBaseUrl, apiKey } = middlewareConfig\n  const requestUrl = `${apiBaseUrl}${API_USER_PATH}/fromtoken`\n\n  return secureFetch(requestUrl, token, apiKey)\n}\n\nexport async function addUser (middlewareConfig, token, data) {\n  const { apiBaseUrl, apiKey } = middlewareConfig\n  const requestUrl = `${apiBaseUrl}${API_USER_PATH}`\n\n  return secureFetch(requestUrl, token, apiKey, 'POST', {\n    body: JSON.stringify(data)\n  })\n}\n\nexport async function updateUser (middlewareConfig, token, data) {\n  const { apiBaseUrl, apiKey } = middlewareConfig\n  const { id } = data // Middleware ID, NOT auth0 (or similar) id.\n  const requestUrl = `${apiBaseUrl}${API_USER_PATH}/${id}`\n\n  if (id) {\n    return secureFetch(requestUrl, token, apiKey, 'PUT', {\n      body: JSON.stringify(data)\n    })\n  } else {\n    return {\n      status: 'error',\n      message: 'Corrupted state: User ID not available for exiting user.'\n    }\n  }\n}\n\nexport async function getTrips (middlewareConfig, token) {\n  const { apiBaseUrl, apiKey } = middlewareConfig\n  const requestUrl = `${apiBaseUrl}${API_MONITORTRIP_PATH}`\n\n  return secureFetch(requestUrl, token, apiKey, 'GET')\n}\n\nexport async function addTrip (middlewareConfig, token, data) {\n  const { apiBaseUrl, apiKey } = middlewareConfig\n  const requestUrl = `${apiBaseUrl}${API_MONITORTRIP_PATH}`\n\n  return secureFetch(requestUrl, token, apiKey, 'POST', {\n    body: JSON.stringify(data)\n  })\n}\n\nexport async function updateTrip (middlewareConfig, token, data) {\n  const { apiBaseUrl, apiKey } = middlewareConfig\n  const { id } = data\n  const requestUrl = `${apiBaseUrl}${API_MONITORTRIP_PATH}/${id}`\n\n  if (id) {\n    return secureFetch(requestUrl, token, apiKey, 'PUT', {\n      body: JSON.stringify(data)\n    })\n  } else {\n    return {\n      status: 'error',\n      message: 'Corrupted state: Monitored Trip ID not available for exiting user.'\n    }\n  }\n}\n\nexport async function deleteTrip (middlewareConfig, token, id) {\n  const { apiBaseUrl, apiKey } = middlewareConfig\n  const requestUrl = `${apiBaseUrl}${API_MONITORTRIP_PATH}/${id}`\n\n  if (id) {\n    return secureFetch(requestUrl, token, apiKey, 'DELETE')\n  } else {\n    return {\n      status: 'error',\n      message: 'Corrupted state: Monitored Trip ID not available for exiting user.'\n    }\n  }\n}\n"]}