{"version":3,"sources":["form.js"],"names":["coreUtils","query","getDefaultQuery","getTripOptionsFromQuery","getUrlParams","planParamsToQueryAsync","settingQueryParam","clearActiveSearch","setActiveSearch","clearDefaultSettings","storeDefaultSettings","resetForm","dispatch","getState","otpState","otp","transitModes","config","modes","user","defaults","userOverrides","storage","getItem","defaultQuery","Object","assign","options","mode","map","m","join","setQueryParam","payload","searchId","parseUrlQueryString","params","planParams","keys","forEach","key","startsWith","ui_activeSearch","randId","then","debouncedPlanTrip","lastDebouncePlanTimeMs","formChanged","oldQuery","newQuery","isMobile","ui","currentQuery","departArrive","time","format","OTP_API_TIME_FORMAT","fromChanged","from","toChanged","to","oneLocationChanged","mobileScreen","MobileScreens","WELCOME_SCREEN","SEARCH_FORM","autoPlan","debouncePlanTimeMs","updatePlan"],"mappings":"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","sourcesContent":["import debounce from 'lodash.debounce'\nimport isEqual from 'lodash.isequal'\nimport moment from 'moment'\nimport coreUtils from '@opentripplanner/core-utils'\nimport { createAction } from 'redux-actions'\n\nimport { queryIsValid } from '../util/state'\nimport {\n  MobileScreens,\n  setMainPanelContent,\n  setMobileScreen\n} from '../actions/ui'\n\nimport { routingQuery } from './api'\n\nconst {\n  getDefaultQuery,\n  getTripOptionsFromQuery,\n  getUrlParams,\n  planParamsToQueryAsync\n} = coreUtils.query\n\nexport const settingQueryParam = createAction('SET_QUERY_PARAM')\nexport const clearActiveSearch = createAction('CLEAR_ACTIVE_SEARCH')\nexport const setActiveSearch = createAction('SET_ACTIVE_SEARCH')\nexport const clearDefaultSettings = createAction('CLEAR_DEFAULT_SETTINGS')\nexport const storeDefaultSettings = createAction('STORE_DEFAULT_SETTINGS')\n\nexport function resetForm () {\n  return function (dispatch, getState) {\n    const otpState = getState().otp\n    const { transitModes } = otpState.config.modes\n    if (otpState.user.defaults) {\n      dispatch(settingQueryParam(otpState.user.defaults))\n    } else {\n      // Get user overrides and apply to default query\n      const userOverrides = coreUtils.storage.getItem('defaultQuery', {})\n      const defaultQuery = Object.assign(\n        getDefaultQuery(otpState.config),\n        userOverrides\n      )\n      // Filter out non-options (i.e., date, places).\n      const options = getTripOptionsFromQuery(defaultQuery)\n      // Default mode is currently WALK,TRANSIT. We need to update this value\n      // here to match the list of modes, otherwise the form will break.\n      options.mode = ['WALK', ...transitModes.map(m => m.mode)].join(',')\n      dispatch(settingQueryParam(options))\n    }\n  }\n}\n\n/**\n * Action to update any specified query parameter. Replaces previous series of\n * parameter-specific actions. If a search ID is provided, a routing query (OTP\n * search) will be kicked off immediately.\n */\nexport function setQueryParam (payload, searchId) {\n  return function (dispatch, getState) {\n    dispatch(settingQueryParam(payload))\n    if (searchId) dispatch(routingQuery(searchId))\n  }\n}\n\nexport function parseUrlQueryString (params = getUrlParams()) {\n  return function (dispatch, getState) {\n    // Filter out the OTP (i.e. non-UI) params and set the initial query\n    const planParams = {}\n    Object.keys(params).forEach(key => {\n      if (!key.startsWith('ui_')) planParams[key] = params[key]\n    })\n    const searchId = params.ui_activeSearch || coreUtils.storage.randId()\n    // Convert strings to numbers/objects and dispatch\n    planParamsToQueryAsync(planParams, getState().otp.config)\n      .then(query => dispatch(setQueryParam(query, searchId)))\n  }\n}\n\nlet debouncedPlanTrip // store as variable here, so it can be reused.\nlet lastDebouncePlanTimeMs\n\nexport function formChanged (oldQuery, newQuery) {\n  return function (dispatch, getState) {\n    const otpState = getState().otp\n    const isMobile = coreUtils.ui.isMobile()\n\n    // If departArrive is set to 'NOW', update the query time to current\n    if (otpState.currentQuery && otpState.currentQuery.departArrive === 'NOW') {\n      dispatch(settingQueryParam({ time: moment().format(coreUtils.time.OTP_API_TIME_FORMAT) }))\n    }\n\n    // Determine if either from/to location has changed\n    const fromChanged = !isEqual(oldQuery.from, newQuery.from)\n    const toChanged = !isEqual(oldQuery.to, newQuery.to)\n\n    // Only clear the main panel if a single location changed. This prevents\n    // clearing the panel on load if the app is focused on a stop viewer but a\n    // search query should also be visible.\n    const oneLocationChanged = (fromChanged && !toChanged) || (!fromChanged && toChanged)\n    if (oneLocationChanged) {\n      dispatch(setMainPanelContent(null))\n    }\n\n    // Clear the current search and return to search screen on mobile when\n    // either location changes only if not currently on welcome screen (otherwise\n    // when the current position is auto-set the screen will change unexpectedly).\n    if (\n      isMobile &&\n      (fromChanged || toChanged) &&\n      otpState.ui.mobileScreen !== MobileScreens.WELCOME_SCREEN\n    ) {\n      dispatch(clearActiveSearch())\n      dispatch(setMobileScreen(MobileScreens.SEARCH_FORM))\n    }\n\n    // Check whether a trip should be auto-replanned\n    const { autoPlan, debouncePlanTimeMs } = otpState.config\n    const updatePlan =\n      autoPlan ||\n      (!isMobile && oneLocationChanged) || // TODO: make autoplan configurable at the parameter level?\n      (isMobile && fromChanged && toChanged)\n    if (updatePlan && queryIsValid(otpState)) { // trip plan should be made\n      // check if debouncing function needs to be (re)created\n      if (!debouncedPlanTrip || lastDebouncePlanTimeMs !== debouncePlanTimeMs) {\n        debouncedPlanTrip = debounce(() => dispatch(routingQuery()), debouncePlanTimeMs)\n        lastDebouncePlanTimeMs = debouncePlanTimeMs\n      }\n      debouncedPlanTrip()\n    }\n  }\n}\n"]}