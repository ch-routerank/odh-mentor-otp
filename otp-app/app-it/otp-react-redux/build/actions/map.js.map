{"version":3,"sources":["map.js"],"names":["clearingLocation","settingLocation","forgetPlace","rememberPlace","forgetStop","rememberStop","clearLocation","payload","dispatch","getState","onLocationSelected","locationType","location","resultType","setLocationToCurrent","setLocation","otpState","otp","reverseGeocode","config","geocoder","reverse","point","then","catch","err","console","warn","currentPosition","error","coords","lat","latitude","lon","longitude","name","category","switchLocations","currentQuery","from","to","setLegDiagram","setElevationPoint","setMapPopupLocation","setMapPopupLocationAndGeocode","mapEvent","coreUtils","map","constructLocation","latlng"],"mappings":"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","sourcesContent":["import coreUtils from '@opentripplanner/core-utils'\nimport getGeocoder from '@opentripplanner/geocoder'\nimport { createAction } from 'redux-actions'\n\nimport { routingQuery } from './api'\nimport { clearActiveSearch } from './form'\n\n/* SET_LOCATION action creator. Updates a from or to location in the store\n *\n * payload format: {\n *   type: 'from' or 'to'\n *   location: {\n *     name: (string),\n *     lat: (number)\n *     lat: (number)\n *   }\n */\n\n// Private actions\nconst clearingLocation = createAction('CLEAR_LOCATION')\nconst settingLocation = createAction('SET_LOCATION')\n\n// Public actions\nexport const forgetPlace = createAction('FORGET_PLACE')\nexport const rememberPlace = createAction('REMEMBER_PLACE')\nexport const forgetStop = createAction('FORGET_STOP')\nexport const rememberStop = createAction('REMEMBER_STOP')\n\nexport function clearLocation (payload) {\n  return function (dispatch, getState) {\n    // Dispatch the clear location action and then clear the active search (so\n    // that the map and narrative are not showing a search when one or both\n    // locations are not defined).\n    dispatch(clearingLocation(payload))\n    dispatch(clearActiveSearch())\n  }\n}\n\n/**\n * Handler for @opentripplanner/location-field onLocationSelected\n */\nexport function onLocationSelected ({ locationType, location, resultType }) {\n  return function (dispatch, getState) {\n    if (resultType === 'CURRENT_LOCATION') {\n      dispatch(setLocationToCurrent({ locationType }))\n    } else {\n      dispatch(setLocation({ location, locationType }))\n    }\n  }\n}\n\nexport function setLocation (payload) {\n  return function (dispatch, getState) {\n    const otpState = getState().otp\n\n    // reverse geocode point location if requested\n    if (payload.reverseGeocode) {\n      getGeocoder(otpState.config.geocoder)\n        .reverse({ point: payload.location })\n        .then((location) => {\n          dispatch(settingLocation({\n            locationType: payload.locationType,\n            location\n          }))\n        }).catch(err => {\n          dispatch(settingLocation({\n            locationType: payload.locationType,\n            location: payload.location\n          }))\n          console.warn(err)\n        })\n    } else {\n      // update the location in the store\n      dispatch(settingLocation(payload))\n    }\n  }\n}\n\n/* payload is simply { type: 'from'|'to' }; location filled in automatically */\n\nexport function setLocationToCurrent (payload) {\n  return function (dispatch, getState) {\n    const currentPosition = getState().otp.location.currentPosition\n    if (currentPosition.error || !currentPosition.coords) return\n    payload.location = {\n      lat: currentPosition.coords.latitude,\n      lon: currentPosition.coords.longitude,\n      name: '(Current Location)',\n      category: 'CURRENT_LOCATION'\n    }\n    dispatch(settingLocation(payload))\n  }\n}\n\nexport function switchLocations () {\n  return function (dispatch, getState) {\n    const { from, to } = getState().otp.currentQuery\n    // First, reverse the locations.\n    dispatch(settingLocation({\n      locationType: 'from',\n      location: to\n    }))\n    dispatch(settingLocation({\n      locationType: 'to',\n      location: from\n    }))\n    // Then kick off a routing query (if the query is invalid, search will abort).\n    dispatch(routingQuery())\n  }\n}\n\nexport const setLegDiagram = createAction('SET_LEG_DIAGRAM')\n\nexport const setElevationPoint = createAction('SET_ELEVATION_POINT')\n\nexport const setMapPopupLocation = createAction('SET_MAP_POPUP_LOCATION')\n\nexport function setMapPopupLocationAndGeocode (mapEvent) {\n  const location = coreUtils.map.constructLocation(mapEvent.latlng)\n  return function (dispatch, getState) {\n    dispatch(setMapPopupLocation({ location }))\n    getGeocoder(getState().otp.config.geocoder)\n      .reverse({ point: location })\n      .then((location) => {\n        dispatch(setMapPopupLocation({ location }))\n      }).catch(err => {\n        console.warn(err)\n      })\n  }\n}\n"]}