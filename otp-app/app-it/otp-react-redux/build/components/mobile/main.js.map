{"version":3,"sources":["main.js"],"names":["MobileMain","prevProps","uiState","mobileScreen","MobileScreens","WELCOME_SCREEN","props","currentQuery","from","to","currentPosition","coords","setMobileScreen","SEARCH_FORM","activeItinerary","RESULTS_SUMMARY","itineraryClass","itineraryFooter","LegIcon","map","ModeIcon","title","mainPanelContent","MainPanelContent","ROUTE_VIEWER","viewedStop","viewedTrip","SET_INITIAL_LOCATION","newScreen","SET_FROM_LOCATION","SET_TO_LOCATION","SET_DATETIME","SET_OPTIONS","Component","PropTypes","object","func","elementType","isRequired","element","mapStateToProps","state","ownProps","otp","ui","location","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport MobileDateTimeScreen from './date-time-screen'\nimport MobileOptionsScreen from './options-screen'\nimport MobileLocationSearch from './location-search'\nimport MobileWelcomeScreen from './welcome-screen'\nimport MobileResultsScreen from './results-screen'\nimport MobileSearchScreen from './search-screen'\nimport MobileStopViewer from './stop-viewer'\nimport MobileTripViewer from './trip-viewer'\nimport MobileRouteViewer from './route-viewer'\n\nimport { MobileScreens, MainPanelContent, setMobileScreen } from '../../actions/ui'\nimport { getActiveItinerary } from '../../util/state'\n\nclass MobileMain extends Component {\n  static propTypes = {\n    currentQuery: PropTypes.object,\n    itineraryClass: PropTypes.func,\n    LegIcon: PropTypes.elementType.isRequired,\n    ModeIcon: PropTypes.elementType.isRequired,\n    map: PropTypes.element,\n    setMobileScreen: PropTypes.func,\n    title: PropTypes.element,\n    uiState: PropTypes.object\n  }\n\n  componentDidUpdate (prevProps) {\n    // Check if we are in the welcome screen and both locations have been set OR\n    // auto-detect is denied and one location is set\n    if (\n      prevProps.uiState.mobileScreen === MobileScreens.WELCOME_SCREEN && (\n        (this.props.currentQuery.from && this.props.currentQuery.to) ||\n        (!this.props.currentPosition.coords && (this.props.currentQuery.from || this.props.currentQuery.to))\n      )\n    ) {\n      // If so, advance to main search screen\n      this.props.setMobileScreen(MobileScreens.SEARCH_FORM)\n    }\n\n    if (!prevProps.activeItinerary && this.props.activeItinerary) {\n      this.props.setMobileScreen(MobileScreens.RESULTS_SUMMARY)\n    }\n  }\n\n  render () {\n    const { itineraryClass, itineraryFooter, LegIcon, map, ModeIcon, title, uiState } = this.props\n\n    // check for route viewer\n    if (uiState.mainPanelContent === MainPanelContent.ROUTE_VIEWER) {\n      return <MobileRouteViewer />\n    }\n\n    // check for viewed stop\n    if (uiState.viewedStop) return <MobileStopViewer />\n\n    // check for viewed trip\n    if (uiState.viewedTrip) return <MobileTripViewer />\n\n    switch (uiState.mobileScreen) {\n      case MobileScreens.WELCOME_SCREEN:\n        return <MobileWelcomeScreen map={map} title={title} />\n\n      case MobileScreens.SET_INITIAL_LOCATION:\n        return (\n          <MobileLocationSearch\n            locationType='to'\n            backScreen={MobileScreens.WELCOME_SCREEN}\n          />\n        )\n\n      case MobileScreens.SEARCH_FORM:\n        return (\n          <MobileSearchScreen\n            map={map}\n            newScreen={this.newScreen}\n          />\n        )\n\n      case MobileScreens.SET_FROM_LOCATION:\n        return (\n          <MobileLocationSearch\n            locationType='from'\n            backScreen={MobileScreens.SEARCH_FORM}\n          />\n        )\n\n      case MobileScreens.SET_TO_LOCATION:\n        return (\n          <MobileLocationSearch\n            locationType='to'\n            backScreen={MobileScreens.SEARCH_FORM}\n          />\n        )\n\n      case MobileScreens.SET_DATETIME:\n        return <MobileDateTimeScreen />\n\n      case MobileScreens.SET_OPTIONS:\n        return <MobileOptionsScreen ModeIcon={ModeIcon} />\n\n      case MobileScreens.RESULTS_SUMMARY:\n        return (\n          <MobileResultsScreen\n            itineraryClass={itineraryClass}\n            itineraryFooter={itineraryFooter}\n            LegIcon={LegIcon}\n            map={map}\n          />\n        )\n      default:\n        return <p>Invalid mobile screen</p>\n    }\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    uiState: state.otp.ui,\n    currentQuery: state.otp.currentQuery,\n    currentPosition: state.otp.location.currentPosition,\n    activeItinerary: getActiveItinerary(state.otp)\n  }\n}\n\nconst mapDispatchToProps = {\n  setMobileScreen\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MobileMain)\n"]}