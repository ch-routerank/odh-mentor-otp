{"version":3,"sources":["welcome-screen.js"],"names":["MobileWelcomeScreen","props","setMobileScreen","MobileScreens","SET_INITIAL_LOCATION","selection","type","setLocationToCurrent","locationType","title","_toFieldClicked","_locationSetFromPopup","Component","map","PropTypes","element","func","mapStateToProps","state","ownProps","mapDispatchToProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,mB;;;;;;;;;;;;;;;;sEAQc,YAAM;AACtB,YAAKC,KAAL,CAAWC,eAAX,CAA2BC,kBAAcC,oBAAzC;AACD,K;;4EAMuB,UAACC,SAAD,EAAe;AACrC;AACA;AACA;AACA,UAAIA,SAAS,CAACC,IAAV,KAAmB,MAAvB,EAA+B;AAC7B,cAAKL,KAAL,CAAWM,oBAAX,CAAgC;AAAEC,UAAAA,YAAY,EAAE;AAAhB,SAAhC;AACD;AACF,K;;;;;;;6BAES;AAAA,UACAC,KADA,GACU,KAAKR,KADf,CACAQ,KADA;AAER,0BACE,6BAAC,kBAAD,qBACE,6BAAC,sBAAD;AAAqB,QAAA,KAAK,EAAEA;AAA5B,QADF,eAEE;AAAK,QAAA,SAAS,EAAC;AAAf,sBACE,6BAAC,+BAAD;AACE,QAAA,gBAAgB,EAAC,0BADnB;AAEE,QAAA,YAAY,EAAC,IAFf;AAGE,QAAA,gBAAgB,EAAE,KAAKC,eAHzB;AAIE,QAAA,eAAe,EAAE;AAJnB,QADF,CAFF,eAUE;AAAK,QAAA,SAAS,EAAC;AAAf,sBACE,6BAAC,mBAAD;AAAY,QAAA,aAAa,EAAE,KAAKC;AAAhC,QADF,CAVF,CADF;AAgBD;;;;EA3C+BC,gB,GA8ClC;;;gBA9CMZ,mB,eACe;AACjBa,EAAAA,GAAG,EAAEC,mBAAUC,OADE;AAGjBR,EAAAA,oBAAoB,EAAEO,mBAAUE,IAHf;AAIjBd,EAAAA,eAAe,EAAEY,mBAAUE;AAJV,C;;AA+CrB,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,SAAO,EAAP;AACD,CAFD;;AAIA,IAAMC,kBAAkB,GAAG;AACzBb,EAAAA,oBAAoB,EAApBA,yBADyB;AAEzBL,EAAAA,eAAe,EAAfA;AAFyB,CAA3B;;eAKe,yBAAQe,eAAR,EAAyBG,kBAAzB,EAA6CpB,mBAA7C,C","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport MobileContainer from './container'\nimport LocationField from '../form/connected-location-field'\nimport DefaultMap from '../map/default-map'\nimport MobileNavigationBar from './navigation-bar'\n\nimport { MobileScreens, setMobileScreen } from '../../actions/ui'\nimport { setLocationToCurrent } from '../../actions/map'\n\nclass MobileWelcomeScreen extends Component {\n  static propTypes = {\n    map: PropTypes.element,\n\n    setLocationToCurrent: PropTypes.func,\n    setMobileScreen: PropTypes.func\n  }\n\n  _toFieldClicked = () => {\n    this.props.setMobileScreen(MobileScreens.SET_INITIAL_LOCATION)\n  }\n\n  /* Called when the user selects a from/to location using the selection\n   * popup (invoked in mobile mode via a long tap). Note that BaseMap already\n   * takes care of updating the query in the store w/ the selected location */\n\n  _locationSetFromPopup = (selection) => {\n    // If the tapped location was selected as the 'from' endpoint, set the 'to'\n    // endpoint to be the current user location. (If selected as the 'to' point,\n    // no action is needed since 'from' is the current location by default.)\n    if (selection.type === 'from') {\n      this.props.setLocationToCurrent({ locationType: 'to' })\n    }\n  }\n\n  render () {\n    const { title } = this.props\n    return (\n      <MobileContainer>\n        <MobileNavigationBar title={title} />\n        <div className='welcome-location mobile-padding'>\n          <LocationField\n            inputPlaceholder='Dove vuoi andare?'\n            locationType='to'\n            onTextInputClick={this._toFieldClicked}\n            showClearButton={false}\n          />\n        </div>\n        <div className='welcome-map'>\n          <DefaultMap onSetLocation={this._locationSetFromPopup} />\n        </div>\n      </MobileContainer>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {}\n}\n\nconst mapDispatchToProps = {\n  setLocationToCurrent,\n  setMobileScreen\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MobileWelcomeScreen)\n"]}