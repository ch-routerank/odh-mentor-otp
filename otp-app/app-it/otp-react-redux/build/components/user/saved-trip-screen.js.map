{"version":3,"sources":["saved-trip-screen.js"],"names":["createMonitoredTrip","loggedInUser","queryParams","itinerary","WEEKDAYS","excludeFederalHolidays","isActive","leadTimeInMinutes","tripName","userId","id","hasMaxTripCount","trips","length","SavedTripScreen","props","newMonitoredTrip","monitoredTrip","state","setState","isCreating","createOrUpdateUserMonitoredTrip","routeTo","_updateMonitoredTrip","_goToTripPlanner","_goToSavedTrips","Pane","_updateMonitoredTripState","basics","_hookMonitoredTrip","TripBasicsPane","notifications","TripNotificationsPane","summary","TripSummaryPane","saveState","match","monitoredTrips","path","url","tripId","split","find","trip","_getTripToEdit","alert","prevProps","_handleSaveNewTrip","_handleSaveTripEdits","_panes","Component","mapStateToProps","ownProps","activeSearch","otp","activeItinerary","itineraries","user","loggedInUserMonitoredTrips","router","location","search","mapDispatchToProps","userActions","uiActions"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { withLoginRequired } from 'use-auth0-hooks'\n\nimport * as uiActions from '../../actions/ui'\nimport * as userActions from '../../actions/user'\nimport DesktopNav from '../app/desktop-nav'\nimport SavedTripEditor from './saved-trip-editor'\nimport TripBasicsPane from './trip-basics-pane'\nimport TripNotificationsPane from './trip-notifications-pane'\nimport TripSummaryPane from './trip-summary-pane'\nimport { arrayToDayFields, WEEKDAYS } from '../../util/monitored-trip'\nimport { getActiveItineraries, getActiveSearch } from '../../util/state'\nimport withLoggedInUserSupport from './with-logged-in-user-support'\n\n/**\n * Initializes a monitored trip object from the given query.\n */\nfunction createMonitoredTrip (loggedInUser, queryParams, itinerary) {\n  return {\n    ...arrayToDayFields(WEEKDAYS),\n    excludeFederalHolidays: true,\n    isActive: true,\n    itinerary,\n    leadTimeInMinutes: 30,\n    queryParams,\n    tripName: '',\n    // FIXME: Handle populating/checking userID from middleware too,\n    // so that providing this field is no longer needed.\n    userId: loggedInUser.id\n  }\n}\n\n/**\n * Checks that the maximum allowed number of saved trips has not been reached.\n */\nfunction hasMaxTripCount (trips) {\n  // TODO: Obtain the maximum number from a query to middleware (it is currently hard coded there too).\n  return trips && trips.length >= 5\n}\n\n/**\n * This screen handles saving a trip from an OTP query, or editing an existing saved trip\n * for the currently logged-in user.\n */\nclass SavedTripScreen extends Component {\n  constructor (props) {\n    super(props)\n\n    const monitoredTrip = this._getTripToEdit(props)\n    this.state = { monitoredTrip }\n  }\n\n  /**\n   * Handles editing events on from all panes.\n   */\n  _updateMonitoredTripState = newMonitoredTrip => {\n    const { monitoredTrip } = this.state\n    this.setState({\n      monitoredTrip: {\n        ...monitoredTrip,\n        ...newMonitoredTrip\n      }\n    })\n  }\n\n  /**\n   * Persists changes to edited trip.\n   */\n  _updateMonitoredTrip = async () => {\n    const { isCreating, createOrUpdateUserMonitoredTrip } = this.props\n    const { monitoredTrip } = this.state\n    await createOrUpdateUserMonitoredTrip(monitoredTrip, isCreating)\n  }\n\n  /**\n   * Navigates to the trip planner (for new trips).\n   */\n  _goToTripPlanner = () => {\n    this.props.routeTo('/')\n  }\n\n  /**\n   * Navigates to saved trips screen.\n   */\n  _goToSavedTrips = () => {\n    this.props.routeTo('/savedtrips')\n  }\n\n  _handleSaveNewTrip = async () => {\n    await this._updateMonitoredTrip()\n    this._goToTripPlanner()\n  }\n\n  _handleSaveTripEdits = async () => {\n    await this._updateMonitoredTrip()\n    this._goToSavedTrips()\n  }\n\n  /**\n   * Hook monitoredTrip, onMonitoredTripChange on some panes upon rendering.\n   * This returns a new render function for the passed component\n   * that allows passing other props to it later if needed.\n   */\n  _hookMonitoredTrip = Pane => props => {\n    const { monitoredTrip } = this.state\n    return (\n      <Pane\n        onMonitoredTripChange={this._updateMonitoredTripState}\n        monitoredTrip={monitoredTrip}\n        {...props}\n      />\n    )\n  }\n\n  // Make an index of pane components, so we don't render all panes at once on every render.\n  // Hook some panes to the monitoredTrip and onMonitoredTripChange props.\n  _panes = {\n    basics: this._hookMonitoredTrip(TripBasicsPane),\n    notifications: this._hookMonitoredTrip(TripNotificationsPane),\n    summary: this._hookMonitoredTrip(TripSummaryPane)\n  }\n\n  componentDidMount () {\n    const { isCreating, monitoredTrips } = this.props\n\n    // There is a middleware limit of 5 saved trips,\n    // so if that limit is already reached, alert, then show editing mode.\n    if (isCreating && hasMaxTripCount(monitoredTrips)) {\n      alert('You already have reached the maximum of five saved trips.\\n' +\n          'Please remove unused trips from your saved trips, and try again.')\n\n      this._goToSavedTrips()\n    }\n\n    // TODO: Update title bar during componentDidMount.\n  }\n\n  /**\n   * Gets the trip to edit from the props.\n   * Optionally saves the state.\n   */\n  _getTripToEdit = (props, saveState) => {\n    let monitoredTrip\n\n    if (props.isCreating) {\n      const { itinerary, loggedInUser, queryParams } = props\n      monitoredTrip = createMonitoredTrip(loggedInUser, queryParams, itinerary)\n    } else {\n      const { match, monitoredTrips } = props\n      const { path, url } = match\n      if (monitoredTrips && path === '/savedtrips/:id') {\n        // Trip id is the portion of url after the second (the last) slash.\n        const tripId = url.split('/')[2]\n        monitoredTrip = monitoredTrips.find(trip => trip.id === tripId)\n      } else {\n        monitoredTrip = null\n      }\n    }\n\n    if (saveState) {\n      this.setState({ monitoredTrip })\n    }\n\n    return monitoredTrip\n  }\n\n  componentDidUpdate (prevProps) {\n    // Update the monitored trip from the new props if the url has changed.\n    if (prevProps.match.url !== this.props.match.url) {\n      this._getTripToEdit(this.props, true)\n    }\n  }\n\n  render () {\n    const { isCreating } = this.props\n    const { monitoredTrip } = this.state\n\n    return (\n      <div className='otp'>\n        {/* TODO: Do mobile view. */}\n        <DesktopNav />\n        <form className='container'>\n          <SavedTripEditor\n            isCreating={isCreating}\n            monitoredTrip={monitoredTrip}\n            onCancel={isCreating ? this._goToTripPlanner : this._goToSavedTrips}\n            onComplete={isCreating ? this._handleSaveNewTrip : this._handleSaveTripEdits}\n            panes={this._panes}\n          />\n        </form>\n      </div>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const activeSearch = getActiveSearch(state.otp)\n  const activeItinerary = activeSearch && activeSearch.activeItinerary\n  const itineraries = getActiveItineraries(state.otp) || []\n  return {\n    itinerary: itineraries[activeItinerary],\n    loggedInUser: state.user.loggedInUser,\n    monitoredTrips: state.user.loggedInUserMonitoredTrips,\n    queryParams: state.router.location.search\n  }\n}\n\nconst mapDispatchToProps = {\n  createOrUpdateUserMonitoredTrip: userActions.createOrUpdateUserMonitoredTrip,\n  routeTo: uiActions.routeTo\n}\n\nexport default withLoggedInUserSupport(\n  withLoginRequired(connect(mapStateToProps, mapDispatchToProps)(SavedTripScreen)),\n  true\n)\n"]}