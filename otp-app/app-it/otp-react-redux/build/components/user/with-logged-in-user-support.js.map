{"version":3,"sources":["with-logged-in-user-support.js"],"names":["withLoggedInUserSupport","WrappedComponent","requireLoggedInUser","props","UserLoaderScreen","auth","fetchOrInitializeUser","loggedInUser","accessToken","children","isAuthenticated","Component","mapStateToProps","state","ownProps","user","mapDispatchToProps","userActions","UserLoaderScreenWithAuth","audience","AUTH0_AUDIENCE","scope","AUTH0_SCOPE"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;AAgBe,SAASA,uBAAT,CAAkCC,gBAAlC,EAAoDC,mBAApD,EAAyE;AACtF,SAAO,UAAAC,KAAK;AAAA,wBACV,6BAAC,wBAAD;AAA0B,MAAA,mBAAmB,EAAED;AAA/C,oBACE,6BAAC,gBAAD,EAAsBC,KAAtB,CADF,CADU;AAAA,GAAZ;AAKD;AAED;;;;;;;IAKMC,gB;;;;;;;;;;;;;yCACkB;AAAA,wBACkC,KAAKD,KADvC;AAAA,UACZE,IADY,eACZA,IADY;AAAA,UACNC,qBADM,eACNA,qBADM;AAAA,UACiBC,YADjB,eACiBA,YADjB,EAGpB;;AACA,UAAIF,IAAI,IAAIA,IAAI,CAACG,WAAb,IAA4B,CAACD,YAAjC,EAA+C;AAC7CD,QAAAA,qBAAqB,CAACD,IAAD,CAArB;AACD;AACF;;;6BAES;AAAA,yBACsD,KAAKF,KAD3D;AAAA,UACAE,IADA,gBACAA,IADA;AAAA,UACMI,QADN,gBACMA,QADN;AAAA,UACgBF,YADhB,gBACgBA,YADhB;AAAA,UAC8BL,mBAD9B,gBAC8BA,mBAD9B;;AAGR,UAAIG,IAAJ,EAAU;AACR,YAAIH,mBAAmB,IAAIG,IAAI,CAACK,eAA5B,IAA+C,CAACH,YAApD,EAAkE;AAChE;AACA;AACA;AACA,8BAAO,6BAAC,uBAAD,OAAP;AACD,SALD,MAKO;AACL,iBAAO,iCAAwBE,QAAxB,EAAkC;AAAEJ,YAAAA,IAAI,EAAJA;AAAF,WAAlC,CAAP;AACD;AACF;;AAED,aAAOI,QAAP;AACD;;;;EAzB4BE,gB,GA4B/B;;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,SAAO;AACLP,IAAAA,YAAY,EAAEM,KAAK,CAACE,IAAN,CAAWR;AADpB,GAAP;AAGD,CAJD;;AAMA,IAAMS,kBAAkB,GAAG;AACzBV,EAAAA,qBAAqB,EAAEW,WAAW,CAACX;AADV,CAA3B;AAIA,IAAMY,wBAAwB,GAAG,6BAC/B,yBAAQN,eAAR,EAAyBI,kBAAzB,EAA6CZ,gBAA7C,CAD+B,EAE/B;AACEe,EAAAA,QAAQ,EAAEC,yBADZ;AAEEC,EAAAA,KAAK,EAAEC;AAFT,CAF+B,CAAjC","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { withAuth } from 'use-auth0-hooks'\n\nimport * as userActions from '../../actions/user'\nimport { AUTH0_AUDIENCE, AUTH0_SCOPE } from '../../util/constants'\nimport { renderChildrenWithProps } from '../../util/ui'\nimport AwaitingScreen from './awaiting-screen'\n\n/**\n * This higher-order component ensures that state.user is loaded\n * in the redux store for any wrapped component that may need it.\n * The requireLoggedInUser argument handles the two use cases for this component:\n * - Some components (e.g. those processing a user account) require a logged in user to be available,\n *   and without it they cannot function.\n     For such components, set requireLoggedInUser to true.\n *   An awaiting screen will be displayed while state.user data are being fetched,\n *   and the wrapped component will be shown upon availability of state.user.\n * - Other components (e.g. landing pages) don't require a logged in user to be available to function\n *   but will display extra functionality if so.\n *   For such components, omit requireLoggedInUser parameter (or set to false).\n *   The wrapped component is shown immediately, and no awaiting screen is displayed while state.user is being retrieved.\n * @param {React.Component} WrappedComponent The component to be wrapped to that uses state.user from the redux store.\n * @param {boolean} requireLoggedInUser Whether the wrapped component requires state.user to properly function.\n */\nexport default function withLoggedInUserSupport (WrappedComponent, requireLoggedInUser) {\n  return props => (\n    <UserLoaderScreenWithAuth requireLoggedInUser={requireLoggedInUser}>\n      <WrappedComponent {...props} />\n    </UserLoaderScreenWithAuth>\n  )\n}\n\n/**\n * This component ensures that values under state.user are set when a user is logged in.\n * If needed by the children, this component displays a wait screen while state.user values are being fetched.\n * Upon completion (or if no user is logged in or if auth is disabled), it renders children.\n */\nclass UserLoaderScreen extends Component {\n  componentDidUpdate () {\n    const { auth, fetchOrInitializeUser, loggedInUser } = this.props\n\n    // Once accessToken is available, proceed to fetch or initialize loggedInUser.\n    if (auth && auth.accessToken && !loggedInUser) {\n      fetchOrInitializeUser(auth)\n    }\n  }\n\n  render () {\n    const { auth, children, loggedInUser, requireLoggedInUser } = this.props\n\n    if (auth) {\n      if (requireLoggedInUser && auth.isAuthenticated && !loggedInUser) {\n        // Display a hint while fetching user data for logged in user (from componentDidMount).\n        // Don't display this if loggedInUser is already available.\n        // TODO: Improve this screen.\n        return <AwaitingScreen />\n      } else {\n        return renderChildrenWithProps(children, { auth })\n      }\n    }\n\n    return children\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    loggedInUser: state.user.loggedInUser\n  }\n}\n\nconst mapDispatchToProps = {\n  fetchOrInitializeUser: userActions.fetchOrInitializeUser\n}\n\nconst UserLoaderScreenWithAuth = withAuth(\n  connect(mapStateToProps, mapDispatchToProps)(UserLoaderScreen),\n  {\n    audience: AUTH0_AUDIENCE,\n    scope: AUTH0_SCOPE\n  }\n)\n"]}