{"version":3,"sources":["stop-viewer.js"],"names":["coreUtils","time","getTimeFormat","getUserTimezone","OTP_API_DATE_FORMAT","defaultState","date","format","scheduleView","StopViewer","props","setMainPanelContent","locationType","setLocation","stopData","location","name","lat","lon","reverseGeocode","setState","popupPosition","_setLocationFromStop","findStopTimesForStop","viewedStop","stopId","spin","window","setTimeout","_stopSpin","autoRefreshStopTimes","toggleAutoRefresh","_refreshStopTimes","timer","setInterval","clearInterval","state","forgetStop","rememberStop","_isFavorite","id","isShowingScheduleView","_stopAutoRefresh","startTime","_getStartTimeForDate","timeRange","_startAutoRefresh","favoriteStops","findIndex","s","startOf","unix","evt","target","value","hideBackButton","showUserSettings","_backClicked","_toggleFavorite","color","padding","marginLeft","clear","includes","split","fontSize","_toggleScheduleView","_onClickPlanFrom","_onClickPlanTo","onKeyDown","width","border","outline","handleDateChange","findStop","prevProps","homeTimezone","stopViewerArriving","stopViewerConfig","timeFormat","hasStopTimesAndRoutes","stopTimes","length","routes","stopTimesByPattern","_renderHeader","_renderControls","marginTop","Object","values","sort","a","b","route","routeComparator","map","patternTimes","console","warn","pattern","times","fontWeight","_onToggleAutoRefresh","stopTimesLastUpdated","tz","Component","PropTypes","bool","object","mapStateToProps","ownProps","otp","user","config","ui","transitIndex","stops","language","mapDispatchToProps"],"mappings":"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","sourcesContent":["import moment from 'moment'\nimport 'moment-timezone'\nimport coreUtils from '@opentripplanner/core-utils'\nimport FromToLocationPicker from '@opentripplanner/from-to-location-picker'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n\nimport Icon from '../narrative/icon'\nimport { setMainPanelContent, toggleAutoRefresh } from '../../actions/ui'\nimport { findStop, findStopTimesForStop } from '../../actions/api'\nimport { forgetStop, rememberStop, setLocation } from '../../actions/map'\nimport PatternRow from './pattern-row'\nimport { getShowUserSettings, getStopViewerConfig } from '../../util/state'\nimport { getRouteIdForPattern, getStopTimesByPattern } from '../../util/viewer'\n\nconst {\n  getTimeFormat,\n  getUserTimezone,\n  OTP_API_DATE_FORMAT\n} = coreUtils.time\n\nconst defaultState = {\n  date: moment().format(OTP_API_DATE_FORMAT),\n  scheduleView: false\n}\n\nclass StopViewer extends Component {\n  state = defaultState\n\n  static propTypes = {\n    hideBackButton: PropTypes.bool,\n    stopData: PropTypes.object,\n    viewedStop: PropTypes.object\n  }\n\n  _backClicked = () => this.props.setMainPanelContent(null)\n\n  _setLocationFromStop = (locationType) => {\n    const { setLocation, stopData } = this.props\n    const location = {\n      name: stopData.name,\n      lat: stopData.lat,\n      lon: stopData.lon\n    }\n    setLocation({ locationType, location, reverseGeocode: true })\n    this.setState({ popupPosition: null })\n  }\n\n  _onClickPlanTo = () => this._setLocationFromStop('to')\n\n  _onClickPlanFrom = () => this._setLocationFromStop('from')\n\n  _refreshStopTimes = () => {\n    const { findStopTimesForStop, viewedStop } = this.props\n    findStopTimesForStop({ stopId: viewedStop.stopId })\n    // TODO: GraphQL approach would just call findStop again.\n    // findStop({ stopId: viewedStop.stopId })\n    this.setState({ spin: true })\n    window.setTimeout(this._stopSpin, 1000)\n  }\n\n  _onToggleAutoRefresh = () => {\n    const { autoRefreshStopTimes, toggleAutoRefresh } = this.props\n    if (autoRefreshStopTimes) {\n      toggleAutoRefresh(false)\n    } else {\n      // Turn on auto-refresh and refresh immediately to give user feedback.\n      this._refreshStopTimes()\n      toggleAutoRefresh(true)\n    }\n  }\n\n  _stopSpin = () => this.setState({ spin: false })\n\n  componentDidMount () {\n    // Load the viewed stop in the store when the Fermata first mounts\n    this.props.findStop({ stopId: this.props.viewedStop.stopId })\n    // Turn on stop times refresh if enabled.\n    if (this.props.autoRefreshStopTimes) this._startAutoRefresh()\n  }\n\n  componentWillUnmount () {\n    // Turn off auto refresh unconditionally (just in case).\n    this._stopAutoRefresh()\n  }\n\n  _startAutoRefresh = () => {\n    const timer = window.setInterval(this._refreshStopTimes, 10000)\n    this.setState({ timer })\n  }\n\n  _stopAutoRefresh = () => {\n    window.clearInterval(this.state.timer)\n  }\n\n  _toggleFavorite = () => {\n    const { forgetStop, rememberStop, stopData } = this.props\n    if (this._isFavorite()) forgetStop(stopData.id)\n    else rememberStop(stopData)\n  }\n\n  _toggleScheduleView = () => {\n    const { findStopTimesForStop, viewedStop } = this.props\n    const {date, scheduleView: isShowingScheduleView} = this.state\n    if (!isShowingScheduleView) {\n      // If not currently showing schedule view, fetch schedules for current\n      // date and turn off auto refresh.\n      this._stopAutoRefresh()\n      findStopTimesForStop({\n        stopId: viewedStop.stopId,\n        startTime: this._getStartTimeForDate(date),\n        timeRange: 86400\n      })\n    } else {\n      // Otherwise, turn on auto refresh.\n      this._startAutoRefresh()\n      this._refreshStopTimes()\n    }\n    this.setState({scheduleView: !isShowingScheduleView})\n  }\n\n  _isFavorite = () => this.props.stopData &&\n    this.props.favoriteStops.findIndex(s => s.id === this.props.stopData.id) !== -1\n\n  // refresh the stop in the store if the viewed stop changes w/ the\n  // Fermata already mounted\n  componentDidUpdate (prevProps) {\n    if (\n      prevProps.viewedStop &&\n      this.props.viewedStop &&\n      prevProps.viewedStop.stopId !== this.props.viewedStop.stopId\n    ) {\n      // Reset state to default if stop changes (i.e., show next arrivals).\n      this.setState(defaultState)\n      this.props.findStop({ stopId: this.props.viewedStop.stopId })\n    }\n    // Handle stopping or starting the auto refresh timer.\n    if (prevProps.autoRefreshStopTimes && !this.props.autoRefreshStopTimes) this._stopAutoRefresh()\n    else if (!prevProps.autoRefreshStopTimes && this.props.autoRefreshStopTimes) this._startAutoRefresh()\n  }\n\n  /**\n   * Get today at midnight (morning) in seconds since epoch.\n   * FIXME: handle timezone diffs?\n   */\n  _getStartTimeForDate = date => moment(date).startOf('day').unix()\n\n  handleDateChange = evt => {\n    const { findStopTimesForStop, viewedStop } = this.props\n    const date = evt.target.value\n    findStopTimesForStop({\n      stopId: viewedStop.stopId,\n      startTime: this._getStartTimeForDate(date),\n      timeRange: 86400\n    })\n    this.setState({ date })\n  }\n\n  _renderHeader = () => {\n    const {hideBackButton, showUserSettings, stopData} = this.props\n    return (\n      <div className='stop-viewer-header'>\n        {/* Back button */}\n        {!hideBackButton && (\n          <div className='back-button-container'>\n            <Button\n              bsSize='small'\n              onClick={this._backClicked}\n            ><Icon type='arrow-left' />Back</Button>\n          </div>\n        )}\n\n        {/* Header Text */}\n        <div className='header-text'>\n          {stopData\n            ? <span>{stopData.name}</span>\n            : <span>Loading Stop...</span>\n          }\n          {showUserSettings\n            ? <Button\n              onClick={this._toggleFavorite}\n              bsSize='large'\n              style={{\n                color: this._isFavorite() ? 'yellow' : 'black',\n                padding: 0,\n                marginLeft: '5px'\n              }}\n              bsStyle='link'>\n              <Icon type={this._isFavorite() ? 'star' : 'star-o'} />\n            </Button>\n            : null\n          }\n        </div>\n        <div style={{ clear: 'both' }} />\n      </div>\n    )\n  }\n\n  /**\n   * Pianifica Viaggio from/to here buttons, plus the schedule/next arrivals toggle.\n   * TODO: Can this use SetFromToButtons?\n   */\n  _renderControls = () => {\n    const {stopData} = this.props\n    const {scheduleView} = this.state\n    // Rewrite stop ID to not include Agency prefix, if present\n    // TODO: make this functionality configurable?\n    let stopId\n    if (stopData && stopData.id) {\n      stopId = stopData.id.includes(':') ? stopData.id.split(':')[1] : stopData.id\n    }\n    return (\n      <div>\n        <div>\n          <b>Stop ID</b>: {stopId}\n          <button\n            className='link-button pull-right'\n            style={{ fontSize: 'small' }}\n            onClick={this._toggleScheduleView}>\n            <Icon type={scheduleView ? 'clock-o' : 'calendar'} />{' '}\n            View {scheduleView ? 'prossimi arrivi' : 'pianificazione'}\n          </button>\n        </div>\n        <b>Viaggia:</b>\n        <FromToLocationPicker\n          onFromClick={this._onClickPlanFrom}\n          onToClick={this._onClickPlanTo} />\n        {scheduleView && <input\n          className='pull-right'\n          onKeyDown={this.props.onKeyDown}\n          type='date'\n          value={this.state.date}\n          style={{\n            width: '115px',\n            border: 'none',\n            outline: 'none'\n          }}\n          required\n          onChange={this.handleDateChange}\n        />}\n      </div>\n    )\n  }\n\n  render () {\n    const {\n      homeTimezone,\n      stopData,\n      stopViewerArriving,\n      stopViewerConfig,\n      timeFormat\n    } = this.props\n    const { scheduleView, spin } = this.state\n    const hasStopTimesAndRoutes = !!(stopData && stopData.stopTimes && stopData.stopTimes.length > 0 && stopData.routes)\n    // construct a lookup table mapping pattern (e.g. 'ROUTE_ID-HEADSIGN') to an array of stoptimes\n    const stopTimesByPattern = getStopTimesByPattern(stopData)\n    return (\n      <div className='stop-viewer'>\n        {/* Header Block */}\n        {this._renderHeader()}\n\n        {stopData && (\n          <div className='stop-viewer-body'>\n            {this._renderControls()}\n            {hasStopTimesAndRoutes\n              ? <>\n                <div style={{ marginTop: 20 }}>\n                  {Object.values(stopTimesByPattern)\n                    .sort((a, b) => coreUtils.route.routeComparator(a.route, b.route))\n                    .map(patternTimes => {\n                      // Only add pattern row if route is found.\n                      // FIXME: there is currently a bug with the alernative transit index\n                      // where routes are not associated with the stop if the only stoptimes\n                      // for the stop are drop off only. See https://github.com/ibi-group/trimet-mod-otp/issues/217\n                      if (!patternTimes.route) {\n                        console.warn(`Cannot render stop times for missing route ID: ${getRouteIdForPattern(patternTimes.pattern)}`)\n                        return null\n                      }\n                      return (\n                        <PatternRow\n                          pattern={patternTimes.pattern}\n                          route={patternTimes.route}\n                          stopTimes={patternTimes.times}\n                          stopViewerConfig={stopViewerConfig}\n                          showScheduleView={scheduleView}\n                          key={patternTimes.id}\n                          stopViewerArriving={stopViewerArriving}\n                          homeTimezone={homeTimezone}\n                          timeFormat={timeFormat}\n                        />\n                      )\n                    })\n                  }\n                </div>\n                {!scheduleView\n                  // If showing next arrivals, include auto update controls.\n                  ? <div style={{ marginTop: '20px' }}>\n                    <label style={{ fontWeight: 300, fontSize: 'small' }}>\n                      <input\n                        name='autoUpdate'\n                        type='checkbox'\n                        checked={this.props.autoRefreshStopTimes}\n                        onChange={this._onToggleAutoRefresh} />{' '}\n                      Auto-aggiorna arrivi?\n                    </label>\n                    <button\n                      className='link-button pull-right'\n                      style={{ fontSize: 'small' }}\n                      onClick={this._refreshStopTimes}>\n                      <Icon\n                        className={spin ? 'fa-spin' : ''}\n                        type='refresh' />{' '}\n                      {moment(stopData.stopTimesLastUpdated)\n                        .tz(getUserTimezone())\n                        .format(timeFormat)}\n                    </button>\n                  </div>\n                  : null\n                }\n              </>\n              : <div>No stop times found for date.</div>\n            }\n            {/* Future: add stop details */}\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\n// connect to redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const showUserSettings = getShowUserSettings(state.otp)\n  const stopViewerConfig = getStopViewerConfig(state.otp)\n  return {\n    autoRefreshStopTimes: state.otp.user.autoRefreshStopTimes,\n    favoriteStops: state.otp.user.favoriteStops,\n    homeTimezone: state.otp.config.homeTimezone,\n    viewedStop: state.otp.ui.viewedStop,\n    showUserSettings,\n    stopData: state.otp.transitIndex.stops[state.otp.ui.viewedStop.stopId],\n    stopViewerArriving: state.otp.config.language.stopViewerArriving,\n    stopViewerConfig,\n    timeFormat: getTimeFormat(state.otp.config)\n  }\n}\n\nconst mapDispatchToProps = {\n  findStop,\n  findStopTimesForStop,\n  forgetStop,\n  rememberStop,\n  setLocation,\n  setMainPanelContent,\n  toggleAutoRefresh\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StopViewer)\n"]}