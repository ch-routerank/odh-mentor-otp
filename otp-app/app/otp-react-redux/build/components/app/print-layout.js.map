{"version":3,"sources":["print-layout.js"],"names":["PrintLayout","props","setState","mapVisible","state","window","print","location","parseUrlQueryString","root","document","getElementsByTagName","setAttribute","search","removeAttribute","config","itinerary","LegIcon","float","_toggleMap","_print","Component","PropTypes","object","elementType","isRequired","func","mapStateToProps","ownProps","otp","mapDispatchToProps","routingQuery"],"mappings":"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","sourcesContent":["import PrintableItinerary from '@opentripplanner/printable-itinerary'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n\nimport { parseUrlQueryString } from '../../actions/form'\nimport { routingQuery } from '../../actions/api'\nimport DefaultMap from '../map/default-map'\nimport TripDetails from '../narrative/connected-trip-details'\nimport { getActiveItinerary } from '../../util/state'\n\nclass PrintLayout extends Component {\n  static propTypes = {\n    itinerary: PropTypes.object,\n    LegIcon: PropTypes.elementType.isRequired,\n    parseUrlQueryString: PropTypes.func\n  }\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      mapVisible: true\n    }\n  }\n\n  _toggleMap = () => {\n    this.setState({ mapVisible: !this.state.mapVisible })\n  }\n\n  _print = () => {\n    window.print()\n  }\n\n  componentDidMount () {\n    const { location, parseUrlQueryString } = this.props\n    // Add print-view class to html tag to ensure that iOS scroll fix only applies\n    // to non-print views.\n    const root = document.getElementsByTagName('html')[0]\n    root.setAttribute('class', 'print-view')\n    // Parse the URL query parameters, if present\n    if (location && location.search) {\n      parseUrlQueryString()\n    }\n  }\n\n  /**\n   * Remove class attribute from html tag on clean up.\n   */\n  componentWillUnmount () {\n    const root = document.getElementsByTagName('html')[0]\n    root.removeAttribute('class')\n  }\n\n  render () {\n    const { config, itinerary, LegIcon } = this.props\n    return (\n      <div className='otp print-layout'>\n        {/* The header bar, including the Toggle Map and Print buttons */}\n        <div className='header'>\n          <div style={{ float: 'right' }}>\n            <Button bsSize='small' onClick={this._toggleMap}>\n              <i className='fa fa-map' /> Toggle Map\n            </Button>\n            {' '}\n            <Button bsSize='small' onClick={this._print}>\n              <i className='fa fa-print' /> Print\n            </Button>\n          </div>\n          Itinerary\n        </div>\n\n        {/* The map, if visible */}\n        {this.state.mapVisible &&\n          <div className='map-container'>\n            <DefaultMap />\n          </div>\n        }\n\n        {/* The main itinerary body */}\n        {itinerary &&\n          <>\n            <PrintableItinerary\n              config={config}\n              itinerary={itinerary}\n              LegIcon={LegIcon}\n            />\n            <TripDetails itinerary={itinerary} />\n          </>\n        }\n      </div>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    config: state.otp.config,\n    itinerary: getActiveItinerary(state.otp)\n  }\n}\n\nconst mapDispatchToProps = {\n  parseUrlQueryString,\n  routingQuery\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PrintLayout)\n"]}