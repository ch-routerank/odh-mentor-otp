{"version":3,"sources":["intermediate-place-field.js"],"names":["StyledIntermediatePlace","LocationField","DropdownContainer","FormGroup","Input","InputGroup","InputGroupAddon","MenuItemA","IntermediatePlaceField","props","index","location","onLocationCleared","_removeIntermediatePlace","Component","mapStateToProps","state","ownProps","otp","config","transitIndex","user","currentPosition","nearbyStops","sessionSearches","geocoderConfig","geocoder","showUserSettings","stopsIndex","stops","userLocationsAndRecentPlaces","locations","recentPlaces","mapDispatchToProps","addLocationSearch","findNearbyStops","getCurrentPosition","clearLocation"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAQA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,uBAAuB,GAAG,+BAAOC,sBAAP,CAAH,oBAGzBC,yBAHyB,EASzBC,iBATyB,EAezBC,aAfyB,EAqBzBC,kBArByB,EAyBzBC,uBAzByB,EA+BzBC,iBA/ByB,EAmCzBA,iBAnCyB,CAA7B;AAwCA;;;;;;IAKMC,sB;;;;;;;;;;;;;;;;+EACuB,YAAM;AAAA,wBACc,MAAKC,KADnB;AAAA,UACxBC,KADwB,eACxBA,KADwB;AAAA,UACjBC,QADiB,eACjBA,QADiB;AAAA,UACPC,iBADO,eACPA,iBADO;AAE/BA,MAAAA,iBAAiB,IAAIA,iBAAiB,CAAC;AAACD,QAAAA,QAAQ,EAARA,QAAD;AAAWD,QAAAA,KAAK,EAALA;AAAX,OAAD,CAAtC;AACD,K;;;;;;;6BAES;AAAA,UACDA,KADC,GACQ,KAAKD,KADb,CACDC,KADC;AAER,0BACE,6BAAC,uBAAD,eACM,KAAKD,KADX;AAEE,QAAA,YAAY,+BAAwBC,KAAxB,CAFd;AAGE,QAAA,aAAa,EAAE,KAAKG;AAHtB,SADF;AAMD;;;;EAdkCC,gB,GAiBrC;;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAAA,mBACMD,KAAK,CAACE,GADZ;AAAA,MACnCC,MADmC,cACnCA,MADmC;AAAA,MAC3BR,QAD2B,cAC3BA,QAD2B;AAAA,MACjBS,YADiB,cACjBA,YADiB;AAAA,MACHC,IADG,cACHA,IADG;AAAA,MAEnCC,eAFmC,GAEeX,QAFf,CAEnCW,eAFmC;AAAA,MAElBC,WAFkB,GAEeZ,QAFf,CAElBY,WAFkB;AAAA,MAELC,eAFK,GAEeb,QAFf,CAELa,eAFK;AAG3C,SAAO;AACLF,IAAAA,eAAe,EAAfA,eADK;AAELG,IAAAA,cAAc,EAAEN,MAAM,CAACO,QAFlB;AAGLH,IAAAA,WAAW,EAAXA,WAHK;AAILC,IAAAA,eAAe,EAAfA,eAJK;AAKLG,IAAAA,gBAAgB,EAAE,gCAAoBX,KAAK,CAACE,GAA1B,CALb;AAMLU,IAAAA,UAAU,EAAER,YAAY,CAACS,KANpB;AAOLC,IAAAA,4BAA4B,+BAAMT,IAAI,CAACU,SAAX,sBAAyBV,IAAI,CAACW,YAA9B;AAPvB,GAAP;AASD,CAZD;;AAcA,IAAMC,kBAAkB,GAAG;AACzBC,EAAAA,iBAAiB,EAAjBA,2BADyB;AAEzBC,EAAAA,eAAe,EAAfA,oBAFyB;AAGzBC,EAAAA,kBAAkB,EAAlBA,4BAHyB;AAIzBC,EAAAA,aAAa,EAAbA;AAJyB,CAA3B;;eAOe,yBAAQtB,eAAR,EAAyBkB,kBAAzB,EAA6CzB,sBAA7C,C","sourcesContent":["import LocationField from '@opentripplanner/location-field'\nimport {\n  DropdownContainer,\n  FormGroup,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  MenuItemA\n} from '@opentripplanner/location-field/lib/styled'\nimport React, {Component} from 'react'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\n\nimport { clearLocation } from '../../actions/map'\nimport { addLocationSearch, getCurrentPosition } from '../../actions/location'\nimport { findNearbyStops } from '../../actions/api'\nimport { getShowUserSettings } from '../../util/state'\n\nconst StyledIntermediatePlace = styled(LocationField)`\n  width: 100%;\n\n  ${DropdownContainer} {\n    display: table-cell;\n    vertical-align: middle;\n    width: 1%;\n  }\n\n  ${FormGroup} {\n    display: table;\n    padding: 6px 12px;\n    width: 100%;\n  }\n\n  ${Input} {\n    display: table-cell;\n    padding: 6px 12px;\n    width: 100%;\n  }\n\n  ${InputGroup} {\n    width: 100%;\n  }\n\n  ${InputGroupAddon} {\n    display: table-cell;\n    vertical-align: middle;\n    width: 1%;\n  }\n\n  ${MenuItemA} {\n    text-decoration: none;\n  }\n\n  ${MenuItemA}:hover {\n    color: #333;\n  }\n`\n\n/**\n * Component that leverages LocationField to allow selecting an intermediate\n * place (e.g., stopover on the way from origin to the destination).\n * TODO: move this to otp-ui?\n */\nclass IntermediatePlaceField extends Component {\n  _removeIntermediatePlace = () => {\n    const {index, location, onLocationCleared} = this.props\n    onLocationCleared && onLocationCleared({location, index})\n  }\n\n  render () {\n    const {index} = this.props\n    return (\n      <StyledIntermediatePlace\n        {...this.props}\n        locationType={`intermediate-place-${index}`}\n        clearLocation={this._removeIntermediatePlace} />\n    )\n  }\n}\n\n// connect to redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const { config, location, transitIndex, user } = state.otp\n  const { currentPosition, nearbyStops, sessionSearches } = location\n  return {\n    currentPosition,\n    geocoderConfig: config.geocoder,\n    nearbyStops,\n    sessionSearches,\n    showUserSettings: getShowUserSettings(state.otp),\n    stopsIndex: transitIndex.stops,\n    userLocationsAndRecentPlaces: [...user.locations, ...user.recentPlaces]\n  }\n}\n\nconst mapDispatchToProps = {\n  addLocationSearch,\n  findNearbyStops,\n  getCurrentPosition,\n  clearLocation\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IntermediatePlaceField)\n"]}