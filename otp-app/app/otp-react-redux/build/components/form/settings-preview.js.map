{"version":3,"sources":["settings-preview.js"],"names":["SettingsPreview","props","caret","config","query","editButtonText","messages","defaultProps","showDot","coreUtils","isNotDefaultQuery","button","label","replace","onClick","addClass","match","clear","Component","PropTypes","string","compressed","bool","element","showCaret","func","companies","modeGroups","array","queryModes","mapStateToProps","state","ownProps","otp","language","settingsPreview","currentQuery","mapDispatchToProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,e;;;;;;;;;;;;;6BAsBM;AAAA,wBACyC,KAAKC,KAD9C;AAAA,UACAC,KADA,eACAA,KADA;AAAA,UACOC,MADP,eACOA,MADP;AAAA,UACeC,KADf,eACeA,KADf;AAAA,UACsBC,cADtB,eACsBA,cADtB;AAER,UAAMC,QAAQ,GAAG,6BAAcN,eAAe,CAACO,YAA9B,EAA4C,KAAKN,KAAjD,CAAjB,CAFQ,CAGR;;AACA,UAAIO,OAAO,GAAGC,mBAAUL,KAAV,CAAgBM,iBAAhB,CAAkCN,KAAlC,EAAyCD,MAAzC,CAAd;;AACA,UAAMQ,MAAM,gBACV;AAAK,QAAA,SAAS,EAAC;AAAf,sBACE,6BAAC,sBAAD;AACE,sBAAYL,QAAQ,CAACM,KAAT,CAAeC,OAAf,CAAuB,IAAvB,EAA6B,GAA7B,CADd;AAEE,QAAA,OAAO,EAAE,KAAKZ,KAAL,CAAWa;AAFtB,SAIGT,cAJH,EAImBH,KAAK,iBAAI,6DAAO;AAAG,QAAA,SAAS,wBAAiBA,KAAjB;AAAZ,QAAP,CAJ5B,CADF,EAOGM,OAAO,iBAAI;AAAK,QAAA,SAAS,EAAC;AAAf,QAPd,CADF,CALQ,CAgBR;AACA;;;AACA,UAAMO,QAAQ,GAAGT,QAAQ,CAACM,KAAT,CAAeI,KAAf,CAAqB,IAArB,IAA6B,EAA7B,GAAkC,OAAnD;AACA,0BACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAkC,QAAA,OAAO,EAAE,KAAKf,KAAL,CAAWa;AAAtD,sBACE;AAAK,QAAA,SAAS,mBAAYC,QAAZ;AAAd,SACGT,QAAQ,CAACM,KADZ,CADF,EAIGD,MAJH,eAKE;AAAK,QAAA,KAAK,EAAE;AAAEM,UAAAA,KAAK,EAAE;AAAT;AAAZ,QALF,CADF;AASD;;;;EAlD2BC,gB;;gBAAxBlB,e,eACe;AACjB;AACAE,EAAAA,KAAK,EAAEiB,mBAAUC,MAFA;AAGjBC,EAAAA,UAAU,EAAEF,mBAAUG,IAHL;AAIjBjB,EAAAA,cAAc,EAAEc,mBAAUI,OAJT;AAKjBC,EAAAA,SAAS,EAAEL,mBAAUG,IALJ;AAMjBR,EAAAA,OAAO,EAAEK,mBAAUM,IANF;AAQjB;AACAC,EAAAA,SAAS,EAAEP,mBAAUC,MATJ;AAUjBO,EAAAA,UAAU,EAAER,mBAAUS,KAVL;AAWjBC,EAAAA,UAAU,EAAEV,mBAAUS;AAXL,C;;gBADf5B,e,kBAekB;AACpBK,EAAAA,cAAc,eAAE;AAAG,IAAA,SAAS,EAAC;AAAb,IADI;AAEpBC,EAAAA,QAAQ,EAAE;AACRM,IAAAA,KAAK,EAAE;AADC;AAFU,C;;AAsCxB,IAAMkB,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,SAAO;AACL7B,IAAAA,MAAM,EAAE4B,KAAK,CAACE,GAAN,CAAU9B,MADb;AAELG,IAAAA,QAAQ,EAAEyB,KAAK,CAACE,GAAN,CAAU9B,MAAV,CAAiB+B,QAAjB,CAA0BC,eAF/B;AAGL/B,IAAAA,KAAK,EAAE2B,KAAK,CAACE,GAAN,CAAUG;AAHZ,GAAP;AAKD,CAND;;AAQA,IAAMC,kBAAkB,GAAG,EAA3B;;eAEe,yBAAQP,eAAR,EAAyBO,kBAAzB,EAA6CrC,eAA7C,C","sourcesContent":["import coreUtils from '@opentripplanner/core-utils'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n\nimport { mergeMessages } from '../../util/messages'\n\nclass SettingsPreview extends Component {\n  static propTypes = {\n    // component props\n    caret: PropTypes.string,\n    compressed: PropTypes.bool,\n    editButtonText: PropTypes.element,\n    showCaret: PropTypes.bool,\n    onClick: PropTypes.func,\n\n    // application state\n    companies: PropTypes.string,\n    modeGroups: PropTypes.array,\n    queryModes: PropTypes.array\n  }\n\n  static defaultProps = {\n    editButtonText: <i className='fa fa-pencil' />,\n    messages: {\n      label: 'Transit Options\\n& Preferences'\n    }\n  }\n\n  render () {\n    const { caret, config, query, editButtonText } = this.props\n    const messages = mergeMessages(SettingsPreview.defaultProps, this.props)\n    // Show dot indicator if the current query differs from the default query.\n    let showDot = coreUtils.query.isNotDefaultQuery(query, config)\n    const button = (\n      <div className='button-container'>\n        <Button\n          aria-label={messages.label.replace('\\n', ' ')}\n          onClick={this.props.onClick}\n        >\n          {editButtonText}{caret && <span> <i className={`fa fa-caret-${caret}`} /></span>}\n        </Button>\n        {showDot && <div className='dot' />}\n      </div>\n    )\n    // Add tall class to account for vertical centering if there is only\n    // one line in the label (default is 2).\n    const addClass = messages.label.match(/\\n/) ? '' : ' tall'\n    return (\n      <div className='settings-preview' onClick={this.props.onClick}>\n        <div className={`summary${addClass}`}>\n          {messages.label}\n        </div>\n        {button}\n        <div style={{ clear: 'both' }} />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    config: state.otp.config,\n    messages: state.otp.config.language.settingsPreview,\n    query: state.otp.currentQuery\n  }\n}\n\nconst mapDispatchToProps = { }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsPreview)\n"]}