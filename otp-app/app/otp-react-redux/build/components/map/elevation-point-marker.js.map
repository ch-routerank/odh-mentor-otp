{"version":3,"sources":["elevation-point-marker.js"],"names":["ElevationPointMarker","props","diagramLeg","elevationPoint","showElevationProfile","elevationPointMarker","pos","coreUtils","itinerary","legLocationAtDistance","Component","mapStateToProps","state","ownProps","otp","ui","config","elevationProfile","mapDispatchToProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;IAOMA,oB;;;;;;;;;;;;;6BACM;AAAA,wBACqD,KAAKC,KAD1D;AAAA,UACAC,UADA,eACAA,UADA;AAAA,UACYC,cADZ,eACYA,cADZ;AAAA,UAC4BC,oBAD5B,eAC4BA,oBAD5B,EAER;;AACA,UAAIC,oBAAoB,GAAG,IAA3B;;AACA,UAAID,oBAAoB,IAAIF,UAAxB,IAAsCC,cAA1C,EAA0D;AACxD,YAAMG,GAAG,GAAGC,mBAAUC,SAAV,CAAoBC,qBAApB,CACVP,UADU,EAEVC,cAFU,CAAZ;;AAIA,YAAIG,GAAJ,EAAS;AACPD,UAAAA,oBAAoB,gBAClB,6BAAC,0BAAD;AACE,YAAA,MAAM,EAAEC,GADV;AAEE,YAAA,SAAS,EAAC,SAFZ;AAGE,YAAA,MAAM,EAAE,CAHV;AAIE,YAAA,KAAK,EAAC,MAJR;AAKE,YAAA,OAAO,EAAE,GALX;AAME,YAAA,MAAM,EAAE,CANV;AAOE,YAAA,IAAI,MAPN;AAQE,YAAA,WAAW,EAAE;AARf,YADF;AAYD;AACF;;AACD,aAAOD,oBAAP;AACD;;;;EA1BgCK,gB;;AA6BnC,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,SAAO;AACLX,IAAAA,UAAU,EAAEU,KAAK,CAACE,GAAN,CAAUC,EAAV,CAAab,UADpB;AAELC,IAAAA,cAAc,EAAES,KAAK,CAACE,GAAN,CAAUC,EAAV,CAAaZ,cAFxB;AAGLC,IAAAA,oBAAoB,EAAE,CAAC,CAACQ,KAAK,CAACE,GAAN,CAAUE,MAAV,CAAiBC;AAHpC,GAAP;AAKD,CAND;;AAQA,IAAMC,kBAAkB,GAAG,EAA3B;;eAEe,yBAAQP,eAAR,EAAyBO,kBAAzB,EAA6ClB,oBAA7C,C","sourcesContent":["import coreUtils from '@opentripplanner/core-utils'\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { CircleMarker } from 'react-leaflet'\n\n/**\n * As the OTP user moves the cursor over the elevation tracking chart\n * of a walking or biking leg (to see which point of their itinerary is at which elevation),\n * ElevationPointMarker displays and moves a marker on the map to highlight\n * the location that corresponds to the cursor position on the elevation chart,\n * so the user can see the streets and paths that correspond to a portion of an elevation profile.\n */\nclass ElevationPointMarker extends Component {\n  render () {\n    const { diagramLeg, elevationPoint, showElevationProfile } = this.props\n    // Compute the elevation point marker, if activeLeg and elevation profile is enabled.\n    let elevationPointMarker = null\n    if (showElevationProfile && diagramLeg && elevationPoint) {\n      const pos = coreUtils.itinerary.legLocationAtDistance(\n        diagramLeg,\n        elevationPoint\n      )\n      if (pos) {\n        elevationPointMarker = (\n          <CircleMarker\n            center={pos}\n            fillColor='#084c8d'\n            weight={6}\n            color='#555'\n            opacity={0.4}\n            radius={5}\n            fill\n            fillOpacity={1}\n          />\n        )\n      }\n    }\n    return elevationPointMarker\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    diagramLeg: state.otp.ui.diagramLeg,\n    elevationPoint: state.otp.ui.elevationPoint,\n    showElevationProfile: !!state.otp.config.elevationProfile\n  }\n}\n\nconst mapDispatchToProps = {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ElevationPointMarker)\n"]}