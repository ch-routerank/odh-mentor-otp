{"version":3,"sources":["itinerary-details.js"],"names":["ItineraryDetails","props","itinerary","activeLeg","activeStep","LegIcon","setActiveLeg","setActiveStep","legs","map","leg","index","legIsActive","coreUtils","isTransit","mode","Component","PropTypes","object","elementType","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEqBA,gB;;;;;;;;;;;;;6BAMT;AAAA,wBAC2E,KAAKC,KADhF;AAAA,UACAC,SADA,eACAA,SADA;AAAA,UACWC,SADX,eACWA,SADX;AAAA,UACsBC,UADtB,eACsBA,UADtB;AAAA,UACkCC,OADlC,eACkCA,OADlC;AAAA,UAC2CC,YAD3C,eAC2CA,YAD3C;AAAA,UACyDC,aADzD,eACyDA,aADzD;AAER,0BACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACGL,SAAS,CAACM,IAAV,CAAeC,GAAf,CAAmB,UAACC,GAAD,EAAMC,KAAN,EAAgB;AAClC,YAAMC,WAAW,GAAGT,SAAS,KAAKQ,KAAlC;AACA,eAAOE,mBAAUX,SAAV,CAAoBY,SAApB,CAA8BJ,GAAG,CAACK,IAAlC,iBACH,6BAAC,mBAAD;AACA,UAAA,MAAM,EAAEH,WADR;AAEA,UAAA,KAAK,EAAED,KAFP;AAGA,UAAA,GAAG,EAAEA,KAHL;AAIA,UAAA,GAAG,EAAED,GAJL;AAKA,UAAA,OAAO,EAAEL,OALT;AAMA,UAAA,YAAY,EAAEC;AANd,UADG,gBAQH,6BAAC,kBAAD;AACA,UAAA,MAAM,EAAEM,WADR;AAEA,UAAA,UAAU,EAAER,UAFZ;AAGA,UAAA,KAAK,EAAEO,KAHP;AAIA,UAAA,GAAG,EAAEA,KAJL;AAKA,UAAA,GAAG,EAAED,GALL;AAMA,UAAA,YAAY,EAAEJ,YANd;AAOA,UAAA,aAAa,EAAEC;AAPf,UARJ;AAgBD,OAlBA,CADH,CADF;AAuBD;;;;EA/B2CS,gB;;;;gBAAzBhB,gB,eACA;AACjBE,EAAAA,SAAS,EAAEe,mBAAUC,MADJ;AAEjBb,EAAAA,OAAO,EAAEY,mBAAUE,WAAV,CAAsBC;AAFd,C","sourcesContent":["import coreUtils from '@opentripplanner/core-utils'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\n\nimport AccessLeg from './access-leg'\nimport TransitLeg from './transit-leg'\n\nexport default class ItineraryDetails extends Component {\n  static propTypes = {\n    itinerary: PropTypes.object,\n    LegIcon: PropTypes.elementType.isRequired\n  }\n\n  render () {\n    const { itinerary, activeLeg, activeStep, LegIcon, setActiveLeg, setActiveStep } = this.props\n    return (\n      <div className='detail'>\n        {itinerary.legs.map((leg, index) => {\n          const legIsActive = activeLeg === index\n          return coreUtils.itinerary.isTransit(leg.mode)\n            ? <TransitLeg\n              active={legIsActive}\n              index={index}\n              key={index}\n              leg={leg}\n              LegIcon={LegIcon}\n              setActiveLeg={setActiveLeg} />\n            : <AccessLeg\n              active={legIsActive}\n              activeStep={activeStep}\n              index={index}\n              key={index}\n              leg={leg}\n              setActiveLeg={setActiveLeg}\n              setActiveStep={setActiveStep} />\n        })}\n      </div>\n    )\n  }\n}\n"]}