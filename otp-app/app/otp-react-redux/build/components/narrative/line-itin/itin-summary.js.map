{"version":3,"sources":["itin-summary.js"],"names":["defaultRouteColor","Container","styled","div","coreUtils","ui","isMobile","Detail","Details","Header","LegIconContainer","NonTransitSpacer","RoutePreview","Routes","ShortName","props","getRouteColorForBadge","leg","ItinerarySummary","onClick","itinerary","LegIcon","timeOptions","calculateFares","centsToString","maxTNCFare","minTNCFare","transitFare","minTotalFare","maxTotalFare","calculatePhysicalActivity","caloriesBurned","_onSummaryClicked","time","formatDuration","duration","formatTime","startTime","endTime","Math","round","transfers","legs","filter","mode","transitTime","map","k","isTransit","getRouteNameForBadge","Component","PropTypes","object","elementType","isRequired","getRouteLongName","routes","length","longName","routeLongName","shortName","routeShortName","toLowerCase","startsWith","split","trim","routeColor"],"mappings":"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","sourcesContent":["import coreUtils from '@opentripplanner/core-utils'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport styled from 'styled-components'\n\n// TODO: make this a prop\nconst defaultRouteColor = '#008'\n\nconst Container = styled.div`\n  display: ${() => coreUtils.ui.isMobile() ? 'table' : 'none'};\n  height: 60px;\n  margin-bottom: 15px;\n  padding-right: 5px;\n  width: 100%;\n`\n\nconst Detail = styled.div`\n  color: #999999;\n  font-size: 13px;\n`\n\nconst Details = styled.div`\n  display: table-cell;\n  vertical-align: top;\n`\n\nconst Header = styled.div`\n  font-size: 18px;\n  font-weight: bold;\n  margin-top: -3px;\n`\n\nconst LegIconContainer = styled.div`\n  height: 30px;\n  width: 30px;\n`\n\nconst NonTransitSpacer = styled.div`\n  height: 30px;\n  overflow: hidden\n`\n\nconst RoutePreview = styled.div`\n  display: inline-block;\n  margin-left: 8px;\n  vertical-align: top;\n`\n\nconst Routes = styled.div`\n  display: table-cell;\n  text-align: right;\n`\n\nconst ShortName = styled.div`\n  background-color: ${props => getRouteColorForBadge(props.leg)};\n  border-radius: 15px;\n  border: 2px solid white;\n  box-shadow: 0 0 0.5em #000;\n  color: white;\n  font-size: 15px;\n  font-weight: 500;\n  height: 30px;\n  margin-top: 6px;\n  overflow: hidden;\n  padding-top: 4px;\n  text-align: center;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 30px;\n`\n\nexport default class ItinerarySummary extends Component {\n  static propTypes = {\n    itinerary: PropTypes.object,\n    LegIcon: PropTypes.elementType.isRequired\n  }\n\n  _onSummaryClicked = () => {\n    if (typeof this.props.onClick === 'function') this.props.onClick()\n  }\n\n  render () {\n    const { itinerary, LegIcon, timeOptions } = this.props\n    const {\n      centsToString,\n      maxTNCFare,\n      minTNCFare,\n      transitFare\n    } = coreUtils.itinerary.calculateFares(itinerary)\n    // TODO: support non-USD\n    const minTotalFare = minTNCFare * 100 + transitFare\n    const maxTotalFare = maxTNCFare * 100 + transitFare\n\n    const { caloriesBurned } = coreUtils.itinerary.calculatePhysicalActivity(itinerary)\n\n    return (\n      <Container onClick={this._onSummaryClicked}>\n        <Details>\n          {/* Travel time in hrs/mins */}\n          <Header>{coreUtils.time.formatDuration(itinerary.duration)}</Header>\n\n          {/* Duration as time range */}\n          <Detail>\n            {coreUtils.time.formatTime(itinerary.startTime, timeOptions)} - {coreUtils.time.formatTime(itinerary.endTime, timeOptions)}\n          </Detail>\n\n          {/* Fare / Calories */}\n          <Detail>\n            {minTotalFare > 0 && <span>\n              {centsToString(minTotalFare)}\n              {minTotalFare !== maxTotalFare && <span> - {centsToString(maxTotalFare)}</span>}\n              <span> &bull; </span>\n            </span>}\n            {Math.round(caloriesBurned)} Cals\n          </Detail>\n\n          {/* Number of transfers, if applicable */}\n          {itinerary.transfers > 0 && (\n            <Detail>\n              {itinerary.transfers} cambi{itinerary.transfers > 1 ? '' : 'o'}\n            </Detail>\n          )}\n\n        </Details>\n        <Routes>\n          {itinerary.legs.filter(leg => {\n            return !(leg.mode === 'WALK' && itinerary.transitTime > 0)\n          }).map((leg, k) => {\n            return (\n              <RoutePreview key={k}>\n                <LegIconContainer><LegIcon leg={leg} /></LegIconContainer>\n                {coreUtils.itinerary.isTransit(leg.mode)\n                  ? (\n                    <ShortName leg={leg} >\n                      {getRouteNameForBadge(leg)}\n                    </ShortName>\n                  )\n                  : (<NonTransitSpacer />)\n                }\n              </RoutePreview>\n            )\n          })}\n        </Routes>\n      </Container>\n    )\n  }\n}\n\n// Helper functions\n\nfunction getRouteLongName (leg) {\n  return leg.routes && leg.routes.length > 0\n    ? leg.routes[0].longName\n    : leg.routeLongName\n}\n\nfunction getRouteNameForBadge (leg) {\n  const shortName = leg.routes && leg.routes.length > 0\n    ? leg.routes[0].shortName : leg.routeShortName\n\n  const longName = getRouteLongName(leg)\n\n  // check for max\n  if (longName && longName.toLowerCase().startsWith('max')) return null\n\n  // check for streetcar\n  if (longName && longName.startsWith('Portland Streetcar')) return longName.split('-')[1].trim().split(' ')[0]\n\n  return shortName || longName\n}\n\nfunction getRouteColorForBadge (leg) {\n  return leg.routeColor ? '#' + leg.routeColor : defaultRouteColor\n}\n"]}