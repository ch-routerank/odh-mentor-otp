{"version":3,"sources":["tabbed-itineraries.js"],"names":["coreUtils","itinerary","calculateFares","calculatePhysicalActivity","getTimeZoneOffset","time","formatDuration","formatTime","getTimeFormat","TabbedItineraries","e","props","setUseRealtimeResponse","useRealtime","activeItinerary","itineraries","itineraryClass","realtimeEffects","setActiveItinerary","timeFormat","itineraryClassProps","showRealtimeAnnotation","isAffectedByRealtimeData","exceedsThreshold","routesDiffer","map","index","length","React","createElement","key","active","expanded","routingType","Component","PropTypes","array","func","pending","number","setActiveLeg","setActiveStep","bool","DefaultItinerary","mapStateToProps","state","ownProps","activeSearch","otp","activeLeg","activeStep","companies","currentQuery","tnc","config","user","loggedInUser","TabButton","onClick","isActive","timeOptions","format","offset","classNames","caloriesBurned","centsToString","maxTNCFare","minTNCFare","transitFare","minTotalFare","plus","push","join","_onClick","duration","startTime","endTime","Math","round","transfers","mapDispatchToProps","dispatch","narrativeActions","leg","step"],"mappings":"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","sourcesContent":["import coreUtils from '@opentripplanner/core-utils'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n\nimport * as narrativeActions from '../../actions/narrative'\nimport DefaultItinerary from './default/default-itinerary'\nimport { getActiveSearch, getRealtimeEffects } from '../../util/state'\n\nconst { calculateFares, calculatePhysicalActivity, getTimeZoneOffset } = coreUtils.itinerary\nconst { formatDuration, formatTime, getTimeFormat } = coreUtils.time\n\nclass TabbedItineraries extends Component {\n  static propTypes = {\n    itineraries: PropTypes.array,\n    itineraryClass: PropTypes.func,\n    pending: PropTypes.number,\n    activeItinerary: PropTypes.number,\n    setActiveItinerary: PropTypes.func,\n    setActiveLeg: PropTypes.func,\n    setActiveStep: PropTypes.func,\n    setUseRealtimeResponse: PropTypes.func,\n    useRealtime: PropTypes.bool\n  }\n\n  static defaultProps = {\n    itineraryClass: DefaultItinerary\n  }\n\n  _toggleRealtimeItineraryClick = (e) => {\n    const { setUseRealtimeResponse, useRealtime } = this.props\n    setUseRealtimeResponse({ useRealtime: !useRealtime })\n  }\n\n  render () {\n    const {\n      activeItinerary,\n      itineraries,\n      itineraryClass,\n      realtimeEffects,\n      setActiveItinerary,\n      timeFormat,\n      useRealtime,\n      ...itineraryClassProps\n    } = this.props\n    if (!itineraries) return null\n\n    /* TODO: should this be moved? */\n    const showRealtimeAnnotation =\n      realtimeEffects.isAffectedByRealtimeData && (\n        realtimeEffects.exceedsThreshold ||\n        realtimeEffects.routesDiffer ||\n        !useRealtime\n      )\n    return (\n      <div className='options itinerary tabbed-itineraries'>\n        <div className='tab-row'>\n          {itineraries.map((itinerary, index) => {\n            return (\n              <TabButton\n                index={index}\n                isActive={index === activeItinerary}\n                itinerary={itinerary}\n                onClick={setActiveItinerary}\n                timeFormat={timeFormat}\n              />\n            )\n          })}\n        </div>\n\n        {/* <RealtimeAnnotation\n          realtimeEffects={realtimeEffects}\n          toggleRealtime={this._toggleRealtimeItineraryClick}\n          useRealtime={useRealtime} />\n        */}\n\n        {/* Show active itin if itineraries exist and active itin is defined. */}\n        {(itineraries.length > 0 && activeItinerary >= 0)\n          ? React.createElement(itineraryClass, {\n            itinerary: itineraries[activeItinerary],\n            index: activeItinerary,\n            key: activeItinerary,\n            active: true,\n            expanded: true,\n            routingType: 'ITINERARY',\n            showRealtimeAnnotation,\n            ...itineraryClassProps\n          })\n          : null\n        }\n\n      </div>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const activeSearch = getActiveSearch(state.otp)\n  // const { activeItinerary, activeLeg, activeStep } = activeSearch ? activeSearch.activeItinerary : {}\n  const pending = activeSearch ? activeSearch.pending : false\n  const realtimeEffects = getRealtimeEffects(state.otp)\n  const useRealtime = state.otp.useRealtime\n  return {\n    // swap out realtime itineraries with non-realtime depending on boolean\n    pending,\n    realtimeEffects,\n    activeItinerary: activeSearch && activeSearch.activeItinerary,\n    activeLeg: activeSearch && activeSearch.activeLeg,\n    activeStep: activeSearch && activeSearch.activeStep,\n    useRealtime,\n    companies: state.otp.currentQuery.companies,\n    tnc: state.otp.tnc,\n    timeFormat: getTimeFormat(state.otp.config),\n    user: state.user.loggedInUser\n  }\n}\n\nclass TabButton extends Component {\n  _onClick = () => {\n    const {index, onClick} = this.props\n    // FIXME: change signature once actions resolved with otp-ui\n    onClick(index)\n  }\n\n  render () {\n    const {index, isActive, itinerary, timeFormat} = this.props\n    const timeOptions = {\n      format: timeFormat,\n      offset: getTimeZoneOffset(itinerary)\n    }\n    const classNames = ['tab-button', 'clear-button-formatting']\n    const { caloriesBurned } = calculatePhysicalActivity(itinerary)\n    const {\n      centsToString,\n      maxTNCFare,\n      minTNCFare,\n      transitFare\n    } = calculateFares(itinerary)\n    // TODO: support non-USD\n    const minTotalFare = minTNCFare * 100 + transitFare\n    const plus = maxTNCFare && maxTNCFare > minTNCFare ? '+' : ''\n    if (isActive) classNames.push('selected')\n    return (\n      <Button\n        key={`tab-button-${index}`}\n        className={classNames.join(' ')}\n        onClick={this._onClick}\n      >\n        <div className='title'><span>Option {index + 1}</span></div>\n        <div className='details'>\n          {/* The itinerary duration in hrs/mins */}\n          {formatDuration(itinerary.duration)}\n\n          {/* The duration as a time range */}\n          <span>\n            <br />\n            {formatTime(itinerary.startTime, timeOptions)} - {formatTime(itinerary.endTime, timeOptions)}\n          </span>\n\n          {/* the fare / calories summary line */}\n          <span>\n            <br />\n            {minTotalFare ? <span>{`${centsToString(minTotalFare)}${plus}`} &bull; </span> : ''}\n            {Math.round(caloriesBurned)} Cal\n          </span>\n\n          {/* The 'X tranfers' line, if applicable */}\n          {itinerary.transfers > 0 && (\n            <span>\n              <br />\n              {itinerary.transfers} cambi{itinerary.transfers > 1 ? '' : 'o'}\n            </span>\n          )}\n        </div>\n      </Button>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const {setActiveItinerary, setActiveLeg, setActiveStep, setUseRealtimeResponse} = narrativeActions\n  return {\n    // FIXME\n    setActiveItinerary: (index) => {\n      dispatch(setActiveItinerary({index}))\n    },\n    // FIXME\n    setActiveLeg: (index, leg) => {\n      dispatch(setActiveLeg({index, leg}))\n    },\n    // FIXME\n    setActiveStep: (index, step) => {\n      dispatch(setActiveStep({index, step}))\n    },\n    // FIXME\n    setUseRealtimeResponse: ({useRealtime}) => {\n      dispatch(setUseRealtimeResponse({useRealtime}))\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n  TabbedItineraries\n)\n"]}