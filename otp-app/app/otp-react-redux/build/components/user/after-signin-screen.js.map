{"version":3,"sources":["after-signin-screen.js"],"names":["AfterSignInScreen","props","loggedInUser","replace","routeTo","pathBeforeSignIn","previousSearch","split","newSearch","routerActions","Component","mapStateToProps","state","ownProps","user","mapDispatchToProps","uiActions"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;IASMA,iB;;;;;;;;;;;;;yCACkB;AAAA,wBACyC,KAAKC,KAD9C;AAAA,UACZC,YADY,eACZA,YADY;AAAA,UACEC,OADF,eACEA,OADF;AAAA,UACWC,OADX,eACWA,OADX;AAAA,UACoBC,gBADpB,eACoBA,gBADpB,EAGpB;;AACA,UAAIH,YAAJ,EAAkB;AAChB,YAAI,qBAAUA,YAAV,CAAJ,EAA6B;AAC3B,cAAMI,cAAc,GAAGD,gBAAgB,CAACE,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,CAAvB;AACA,cAAMC,SAAS,GAAGF,cAAc,cAAOA,cAAP,IAA0B,IAA1D,CAF2B,CAEoC;;AAC/DF,UAAAA,OAAO,CAAC,UAAD,EAAaI,SAAb,EAAwBC,aAAa,CAACN,OAAtC,CAAP;AACD,SAJD,MAIO;AACLA,UAAAA,OAAO,CAACE,gBAAD,CAAP;AACD;AACF;AACF;;;6BAES;AACR;AACA,0BACE,uDACE,sEACE,wCADF,eAEE,6BAAC,yBAAD;AACE,QAAA,IAAI,EAAC,gBADP;AAEE,QAAA,IAAI,EAAC;AAFP,QAFF,CADF,CADF;AAWD;;;;EA7B6BK,gB,GAgChC;;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAAA,oBACAD,KAAK,CAACE,IADN;AAAA,MACnCZ,YADmC,eACnCA,YADmC;AAAA,MACrBG,gBADqB,eACrBA,gBADqB;AAE3C,SAAO;AACLH,IAAAA,YAAY,EAAZA,YADK;AAELG,IAAAA,gBAAgB,EAAhBA;AAFK,GAAP;AAID,CAND;;AAQA,IAAMU,kBAAkB,GAAG;AACzBZ,EAAAA,OAAO,EAAEM,aAAa,CAACN,OADE;AAEzBC,EAAAA,OAAO,EAAEY,SAAS,CAACZ;AAFM,CAA3B;;eAKe,sCACb,yBAAQO,eAAR,EAAyBI,kBAAzB,EAA6Cf,iBAA7C,CADa,C","sourcesContent":["import * as routerActions from 'connected-react-router'\nimport React, { Component } from 'react'\nimport FontAwesome from 'react-fontawesome'\nimport { connect } from 'react-redux'\n\nimport * as uiActions from '../../actions/ui'\nimport { isNewUser } from '../../util/user'\nimport withLoggedInUserSupport from './with-logged-in-user-support'\n\n/**\n * This screen is flashed just after user sign in while state.user.loggedInUser is being fetched.\n * Once state.user.loggedInUser is available:\n * - For new users, route them to the account page (it will show account setup).\n *   while trying to preserve the search portion of the URL before login.\n * - For existing users, simply take them to the route (itinerary search, stop/trip viewer) that was in place before login.\n *\n * Rerouting is performed so that the current URL does not appear in the browser history.\n */\nclass AfterSignInScreen extends Component {\n  componentDidUpdate () {\n    const { loggedInUser, replace, routeTo, pathBeforeSignIn } = this.props\n\n    // Redirect when loggedInUser is populated (i.e. after several calls to componentDidUpdate())\n    if (loggedInUser) {\n      if (isNewUser(loggedInUser)) {\n        const previousSearch = pathBeforeSignIn.split('?')[1]\n        const newSearch = previousSearch ? `?${previousSearch}` : null // if not null, must include '?'.\n        routeTo('/account', newSearch, routerActions.replace)\n      } else {\n        replace(pathBeforeSignIn)\n      }\n    }\n  }\n\n  render () {\n    // TODO: Improve the visuals.\n    return (\n      <div>\n        <h1>Signed In...\n          <br />\n          <FontAwesome\n            name='hourglass-half'\n            size='4x'\n          />\n        </h1>\n      </div>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const { loggedInUser, pathBeforeSignIn } = state.user\n  return {\n    loggedInUser,\n    pathBeforeSignIn\n  }\n}\n\nconst mapDispatchToProps = {\n  replace: routerActions.replace,\n  routeTo: uiActions.routeTo\n}\n\nexport default withLoggedInUserSupport(\n  connect(mapStateToProps, mapDispatchToProps)(AfterSignInScreen)\n)\n"]}