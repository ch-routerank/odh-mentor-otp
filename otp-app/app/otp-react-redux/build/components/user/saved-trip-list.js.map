{"version":3,"sources":["saved-trip-list.js"],"names":["SavedTripList","trips","accountLink","content","length","map","trip","index","mapStateToProps","state","ownProps","user","loggedInUserMonitoredTrips","mapDispatchToProps","TripListItem","props","routeTo","id","createOrUpdateUserMonitoredTrip","newTrip","isActive","confirm","deleteUserMonitoredTrip","tripName","_handlePauseOrResumeMonitoring","_handleEditTrip","_handleDeleteTrip","Component","itemMapStateToProps","itemMapDispatchToProps","userActions","uiActions","ConnectedTripListItem"],"mappings":"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","sourcesContent":["import clone from 'clone'\nimport React, { Component } from 'react'\nimport { Button, ButtonGroup, Glyphicon, Panel } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport { withLoginRequired } from 'use-auth0-hooks'\n\nimport * as uiActions from '../../actions/ui'\nimport * as userActions from '../../actions/user'\nimport DesktopNav from '../app/desktop-nav'\nimport LinkButton from './link-button'\nimport TripSummaryPane from './trip-summary-pane'\nimport withLoggedInUserSupport from './with-logged-in-user-support'\n\n/**\n * This component displays the list of saved trips for the logged-in user.\n */\nconst SavedTripList = ({ trips }) => {\n  // TODO: Improve navigation.\n  const accountLink = <p><LinkButton to='/account'>Back to My Account</LinkButton></p>\n  let content\n\n  if (!trips || trips.length === 0) {\n    content = (\n      <>\n        {accountLink}\n        <h1>You have no saved trips</h1>\n        <p>Perform a trip search from the map first.</p>\n      </>\n    )\n  } else {\n    // Stack the saved trip summaries. When the user clicks on one, they can edit that trip.\n    content = (\n      <>\n        {accountLink}\n        <h1>My saved trips</h1>\n        {trips.map((trip, index) => <ConnectedTripListItem key={index} trip={trip} />)}\n      </>\n    )\n  }\n\n  return (\n    <div className='otp'>\n      {/* TODO: Do mobile view. */}\n      <DesktopNav />\n      <div className='container'>\n        {content}\n      </div>\n    </div>\n  )\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    trips: state.user.loggedInUserMonitoredTrips\n  }\n}\n\nconst mapDispatchToProps = {}\n\nexport default withLoggedInUserSupport(\n  withLoginRequired(connect(mapStateToProps, mapDispatchToProps)(SavedTripList)),\n  true\n)\n\n/**\n * This class manages events and rendering for one item in the saved trip list.\n */\nclass TripListItem extends Component {\n  /**\n   * Navigate to the saved trip's URL #/savedtrips/trip-id-123.\n   * (There shouldn't be a need to encode the ids from Mongo.)\n   */\n  _handleEditTrip = () => {\n    const { routeTo, trip } = this.props\n    routeTo(`/savedtrips/${trip.id}`)\n  }\n\n  /**\n   * Pauses or resumes the specified trip.\n   */\n  _handlePauseOrResumeMonitoring = () => {\n    const { createOrUpdateUserMonitoredTrip, trip } = this.props\n    const newTrip = clone(trip)\n    newTrip.isActive = !newTrip.isActive\n\n    // Silent update of existing trip.\n    createOrUpdateUserMonitoredTrip(newTrip, false, true)\n  }\n\n  /**\n   * Deletes a trip from persistence.\n   * (The operation also refetches the redux monitoredTrips for the logged-in user.)\n   */\n  _handleDeleteTrip = async () => {\n    if (confirm('Would you like to remove this trip?')) {\n      const { deleteUserMonitoredTrip, trip } = this.props\n      await deleteUserMonitoredTrip(trip.id)\n    }\n  }\n\n  render () {\n    const { trip } = this.props\n    return (\n      <Panel>\n        <Panel.Heading>\n          <Panel.Title componentClass='h3'>{trip.tripName}</Panel.Title>\n        </Panel.Heading>\n        <Panel.Body>\n          <TripSummaryPane monitoredTrip={trip} />\n          <ButtonGroup>\n            <Button bsSize='small' onClick={this._handlePauseOrResumeMonitoring}>\n              {trip.isActive\n                ? <><Glyphicon glyph='pause' /> Pause</>\n                : <><Glyphicon glyph='play' /> Resume</>\n              }\n            </Button>\n            <Button bsSize='small' onClick={this._handleEditTrip}>\n              <Glyphicon glyph='pencil' /> Edit\n            </Button>\n            <Button bsSize='small' onClick={this._handleDeleteTrip}>\n              <Glyphicon glyph='trash' /> Delete\n            </Button>\n          </ButtonGroup>\n        </Panel.Body>\n      </Panel>\n    )\n  }\n}\n\n// connect to the redux store\nconst itemMapStateToProps = () => {}\n\nconst itemMapDispatchToProps = {\n  createOrUpdateUserMonitoredTrip: userActions.createOrUpdateUserMonitoredTrip,\n  deleteUserMonitoredTrip: userActions.deleteUserMonitoredTrip,\n  routeTo: uiActions.routeTo\n}\n\nconst ConnectedTripListItem = connect(itemMapStateToProps, itemMapDispatchToProps)(TripListItem)\n"]}