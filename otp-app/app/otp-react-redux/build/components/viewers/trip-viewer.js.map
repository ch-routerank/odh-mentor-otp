{"version":3,"sources":["trip-viewer.js"],"names":["TripViewer","props","setViewedTrip","findTrip","viewedTrip","tripId","hideBackButton","languageConfig","timeFormat","tripData","_backClicked","tripViewer","clear","route","shortName","longName","wheelchairAccessible","bikesAllowed","stops","stopTimes","map","stop","i","stripMapLineClass","length","highlightClass","fromIndex","toIndex","coreUtils","time","formatSecondsAfterMidnight","scheduledDeparture","id","name","Component","PropTypes","bool","object","mapStateToProps","state","ownProps","otp","ui","config","language","getTimeFormat","transitIndex","trips","mapDispatchToProps","setLocation"],"mappings":"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","sourcesContent":["import coreUtils from '@opentripplanner/core-utils'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport { Button, Label } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n\nimport Icon from '../narrative/icon'\nimport ViewStopButton from './view-stop-button'\n\nimport { setViewedTrip } from '../../actions/ui'\nimport { findTrip } from '../../actions/api'\nimport { setLocation } from '../../actions/map'\n\nclass TripViewer extends Component {\n  static propTypes = {\n    hideBackButton: PropTypes.bool,\n    tripData: PropTypes.object,\n    viewedTrip: PropTypes.object\n  }\n\n  _backClicked = () => {\n    this.props.setViewedTrip(null)\n  }\n\n  componentDidMount () {\n    const { findTrip, viewedTrip } = this.props\n    const { tripId } = viewedTrip\n    findTrip({ tripId })\n  }\n\n  render () {\n    const {\n      hideBackButton,\n      languageConfig,\n      timeFormat,\n      tripData,\n      viewedTrip\n    } = this.props\n\n    return (\n      <div className='trip-viewer'>\n        {/* Header Block */}\n        <div className='trip-viewer-header'>\n          {/* Back button */}\n          {!hideBackButton && (\n            <div className='back-button-container'>\n              <Button\n                bsSize='small'\n                onClick={this._backClicked}\n              ><Icon type='arrow-left' />Back</Button>\n            </div>\n          )}\n\n          {/* Header Text */}\n          <div className='header-text'>\n            {languageConfig.tripViewer || 'Trip Viewer'}\n          </div>\n          <div style={{ clear: 'both' }} />\n        </div>\n\n        <div className='trip-viewer-body'>\n          {/* Basic Trip Info */}\n          {tripData && (\n            <div>\n              {/* Route name */}\n              <div>Route: <b>{tripData.route.shortName}</b> {tripData.route.longName}</div>\n\n              {/* Wheelchair/bike accessibility badges, if applicable */}\n              <h4>\n                {tripData.wheelchairAccessible === 1 &&\n                  <Label bsStyle='primary'>\n                    <Icon type='wheelchair-alt' /> Accessible\n                  </Label>\n                }\n                {' '}\n                {tripData.bikesAllowed === 1 &&\n                  <Label bsStyle='success'>\n                    <Icon type='bicycle' /> Allowed\n                  </Label>\n                }\n              </h4>\n            </div>\n          )}\n\n          {/* Stop Listing */}\n          {tripData && tripData.stops && tripData.stopTimes && (\n            tripData.stops.map((stop, i) => {\n              // determine whether to use special styling for first/last stop\n              let stripMapLineClass = 'strip-map-line'\n              if (i === 0) stripMapLineClass = 'strip-map-line-first'\n              else if (i === tripData.stops.length - 1) stripMapLineClass = 'strip-map-line-last'\n\n              // determine whether to show highlight in strip map\n              let highlightClass\n              if (i === viewedTrip.fromIndex) highlightClass = 'strip-map-highlight-first'\n              else if (i > viewedTrip.fromIndex && i < viewedTrip.toIndex) highlightClass = 'strip-map-highlight'\n              else if (i === viewedTrip.toIndex) highlightClass = 'strip-map-highlight-last'\n\n              return (\n                <div key={i}>\n                  {/* the departure time */}\n                  <div className='stop-time'>\n                    {coreUtils.time.formatSecondsAfterMidnight(tripData.stopTimes[i].scheduledDeparture, timeFormat)}\n                  </div>\n\n                  {/* the vertical strip map */}\n                  <div className='strip-map-container'>\n                    { highlightClass && <div className={highlightClass} /> }\n                    <div className={stripMapLineClass} />\n                    <div className='strip-map-icon'><Icon type='circle' /></div>\n                  </div>\n\n                  {/* the stop-viewer button */}\n                  <div className='stop-button-container'>\n                    <ViewStopButton stopId={stop.id} text='View' />\n                  </div>\n\n                  {/* the main stop label */}\n                  <div className='stop-name'>\n                    {stop.name}\n                  </div>\n\n                  <div style={{ clear: 'both' }} />\n\n                </div>\n              )\n            })\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const viewedTrip = state.otp.ui.viewedTrip\n  return {\n    languageConfig: state.otp.config.language,\n    timeFormat: coreUtils.time.getTimeFormat(state.otp.config),\n    tripData: state.otp.transitIndex.trips[viewedTrip.tripId],\n    viewedTrip\n  }\n}\n\nconst mapDispatchToProps = {\n  setViewedTrip,\n  findTrip,\n  setLocation\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TripViewer)\n"]}