{"version":3,"sources":["state.js"],"names":["coreUtils","itinerary","calculateFares","hasBike","isCar","isTransit","isWalk","getActiveSearch","otpState","searches","activeSearchId","getTimestamp","time","format","getActiveErrors","search","errors","response","forEach","res","error","push","getActiveItineraries","config","useRealtime","nonRealtimeResponse","itineraries","plan","filter","sort","direction","type","allActiveModes","legs","leg","mode","itineraryHasTransit","hasCar","console","warn","a","b","walkTime","endTime","startTime","duration","aTotal","getTotalFare","bTotal","aCost","calculateItineraryCost","bCost","DEFAULT_WEIGHTS","walkReluctance","driveReluctance","durationFactor","fareFactor","waitReluctance","transferReluctance","weights","configWeights","Object","assign","walkDistance","getDriveTime","waitingTime","transfers","driveTime","DEFAULT_COSTS","bikeshareTripCostCents","carParkingCostCents","drivingCentsPerMile","maxTNCFare","transitFare","costs","configCosts","drivingCost","hasBikeshare","distance","rentedBike","bikeshareCost","getTotalFareAsString","centsToString","itinHasTransit","getActiveItinerary","length","activeItinerary","hasValidLocation","query","locationKey","lat","lon","queryIsValid","currentQuery","getRealtimeEffects","realtimeItineraries","hasNonRealtimeItineraries","nonRealtimeItineraries","isAffectedByRealtimeData","normalRoutes","route","map","realtimeRoutes","normalDuration","realtimeDuration","routesDiffer","exceedsThreshold","Math","abs","realtimeEffectsDisplayThreshold","getShowUserSettings","persistence","enabled","getStopViewerConfig","stopViewer","getUiUrlParams","activeSearch","uiParams","ui_activeItinerary","ui_activeSearch","DEFAULT_TITLE","document","title","getTitle","state","otp","ui","user","mainPanelContent","viewedRoute","viewedStop","MainPanelContent","ROUTE_VIEWER","routeId","STOP_VIEWER","stopId","summarizeQuery","locations"],"mappings":"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","sourcesContent":["import coreUtils from '@opentripplanner/core-utils'\nimport isEqual from 'lodash.isequal'\nimport moment from 'moment'\n\nimport { MainPanelContent } from '../actions/ui'\n\nconst { calculateFares, hasBike, isCar, isTransit, isWalk } = coreUtils.itinerary\n\n/**\n * Get the active search object\n * @param {Object} otpState the OTP state object\n * @returns {Object} an search object, or null if there is no active search\n */\nexport function getActiveSearch (otpState) {\n  return otpState.searches[otpState.activeSearchId]\n}\n\n/**\n * Get timestamp in the expected format used by otp-datastore (call taker\n * back end). Defaults to now.\n * TODO: move to OTP-UI?\n */\nexport function getTimestamp (time = moment()) {\n  return time.format('YYYY-MM-DDTHH:mm:ss')\n}\n\n/**\n * Gets the active errors returned for the OTP responses.\n * @param {Object} otpState the OTP state object\n * @return {Array}      array of OTP plan responses with errors\n */\nexport function getActiveErrors (otpState) {\n  const search = getActiveSearch(otpState)\n  const errors = []\n  const response = !search ? null : search.response\n  if (response) {\n    response.forEach(res => {\n      if (res && res.error) errors.push(res)\n    })\n  }\n  return errors\n}\n\n/**\n * Get the active itineraries for the active search, which is dependent on\n * whether realtime or non-realtime results should be displayed\n * @param {Object} otpState the OTP state object\n * @return {Array}      array of itinerary objects from the OTP plan response,\n *                      or null if there is no active search\n */\nexport function getActiveItineraries (otpState) {\n  const search = getActiveSearch(otpState)\n  const { config, useRealtime } = otpState\n  // set response to use depending on useRealtime\n  const response = !search\n    ? null\n    : useRealtime\n      ? search.response\n      : search.nonRealtimeResponse\n  const itineraries = []\n  if (response) {\n    response.forEach(res => {\n      if (res && res.plan) itineraries.push(...res.plan.itineraries)\n    })\n  }\n  const {filter, sort} = otpState.filter\n  const {direction, type} = sort\n  return itineraries\n    .filter(itinerary => {\n      switch (filter) {\n        case 'ALL':\n          return true\n        case 'ACTIVE':\n          // ACTIVE filter checks that the only modes contained in the itinerary\n          // are 'active' (i.e., walk or bike). FIXME: add micromobility?\n          let allActiveModes = true\n          itinerary.legs.forEach(leg => {\n            if (!isWalk(leg.mode) && !hasBike(leg.mode)) allActiveModes = false\n          })\n          return allActiveModes\n        case 'TRANSIT':\n          return itineraryHasTransit(itinerary)\n        case 'CAR':\n          let hasCar = false\n          itinerary.legs.forEach(leg => {\n            if (isCar(leg.mode)) hasCar = true\n          })\n          return hasCar\n        default:\n          console.warn(`Filter (${filter}) not supported`)\n          return true\n      }\n    })\n    .sort((a, b) => {\n      switch (type) {\n        case 'WALKTIME':\n          if (direction === 'ASC') return a.walkTime - b.walkTime\n          else return b.walkTime - a.walkTime\n        case 'ARRIVALTIME':\n          if (direction === 'ASC') return a.endTime - b.endTime\n          else return b.endTime - a.endTime\n        case 'DEPARTURETIME':\n          if (direction === 'ASC') return a.startTime - b.startTime\n          else return b.startTime - a.startTime\n        case 'DURATION':\n          if (direction === 'ASC') return a.duration - b.duration\n          else return b.duration - a.duration\n        case 'COST':\n          const aTotal = getTotalFare(a, config)\n          const bTotal = getTotalFare(b, config)\n          if (direction === 'ASC') return aTotal - bTotal\n          else return bTotal - aTotal\n        default:\n          if (type !== 'BEST') console.warn(`Sort (${type}) not supported. Defaulting to BEST.`)\n          // FIXME: Fully implement default sort algorithm.\n          const aCost = calculateItineraryCost(a, config)\n          const bCost = calculateItineraryCost(b, config)\n          if (direction === 'ASC') return aCost - bCost\n          else return bCost - aCost\n      }\n    })\n}\n\n/**\n * Default constants for calculating itinerary \"cost\", i.e., how preferential a\n * particular itinerary is based on factors like wait time, total fare, drive\n * time, etc.\n */\nconst DEFAULT_WEIGHTS = {\n  walkReluctance: 0.1,\n  driveReluctance: 2,\n  durationFactor: 0.25,\n  fareFactor: 0.5,\n  waitReluctance: 0.1,\n  transferReluctance: 0.9\n}\n\n/**\n * This calculates the \"cost\" (not the monetary cost, but the cost according to\n * multiple factors like duration, total fare, and walking distance) for a\n * particular itinerary, for use in sorting itineraries.\n * FIXME: Do major testing to get this right.\n */\nfunction calculateItineraryCost (itinerary, config = {}) {\n  // Initialize weights to default values.\n  const weights = DEFAULT_WEIGHTS\n  // If config contains values to override defaults, apply those.\n  const configWeights = config.itinerary && config.itinerary.weights\n  if (configWeights) Object.assign(weights, configWeights)\n  return getTotalFare(itinerary, config) * weights.fareFactor +\n    itinerary.duration * weights.durationFactor +\n    itinerary.walkDistance * weights.walkReluctance +\n    getDriveTime(itinerary) * weights.driveReluctance +\n    itinerary.waitingTime * weights.waitReluctance +\n    itinerary.transfers * weights.transferReluctance\n}\n\n/**\n * Get total drive time (i.e., total duration for legs with mode=CAR) for an\n * itinerary.\n */\nfunction getDriveTime (itinerary) {\n  if (!itinerary) return 0\n  let driveTime = 0\n  itinerary.legs.forEach(leg => {\n    if (leg.mode === 'CAR') driveTime += leg.duration\n  })\n  return driveTime\n}\n\n/**\n * Default costs for modes that currently have no costs evaluated in\n * OpenTripPlanner.\n */\nconst DEFAULT_COSTS = {\n  // $2 per trip? This is a made up number.\n  bikeshareTripCostCents: 2 * 100,\n  // $2 for 3 hours of parking?\n  carParkingCostCents: 3 * 2.00 * 100,\n  // FL per diem rate: https://www.flcourts.org/content/download/219314/1981830/TravelInformation.pdf\n  drivingCentsPerMile: 0.445 * 100\n}\n\n/**\n * Returns total fare for itinerary (in cents)\n * FIXME: Move to otp-ui?\n * TODO: Add GBFS fares\n */\nfunction getTotalFare (itinerary, config = {}) {\n  // Get transit/TNC fares.\n  const {maxTNCFare, transitFare} = calculateFares(itinerary)\n  // Start with default cost values.\n  const costs = DEFAULT_COSTS\n  // If config contains values to override defaults, apply those.\n  const configCosts = config.itinerary && config.itinerary.costs\n  if (configCosts) Object.assign(costs, configCosts)\n  // Calculate total cost from itinerary legs.\n  let drivingCost = 0\n  let hasBikeshare = false\n  itinerary.legs.forEach(leg => {\n    if (leg.mode === 'CAR') {\n      // Convert meters to miles and multiple by cost per mile.\n      drivingCost += leg.distance * 0.000621371 * costs.drivingCentsPerMile\n    }\n    if (leg.mode === 'BICYCLE_RENT' || leg.mode === 'MICROMOBILITY' || leg.rentedBike) {\n      hasBikeshare = true\n    }\n  })\n  const bikeshareCost = hasBikeshare ? costs.bikeshareTripCostCents : 0\n  // If some leg uses driving, add parking cost to the total.\n  if (drivingCost > 0) drivingCost += costs.carParkingCostCents\n  return bikeshareCost + drivingCost + transitFare + maxTNCFare * 100\n}\n\nexport function getTotalFareAsString (itinerary) {\n  // Get centsToString formatter.\n  const {centsToString} = calculateFares(itinerary)\n  // Return total fare as formatted string.\n  return centsToString(getTotalFare(itinerary))\n}\n\nfunction itineraryHasTransit (itinerary) {\n  let itinHasTransit = false\n  itinerary.legs.forEach(leg => {\n    if (isTransit(leg.mode)) itinHasTransit = true\n  })\n  return itinHasTransit\n}\n\n/**\n * Get the active itinerary/profile for the active search object\n * @param {Object} otpState the OTP state object\n * @returns {Object} an itinerary object from the OTP plan response, or null if\n *   there is no active search or itinerary\n */\nexport function getActiveItinerary (otpState) {\n  const search = getActiveSearch(otpState)\n  const itineraries = getActiveItineraries(otpState)\n  if (!itineraries || !search) return null\n  return itineraries.length > search.activeItinerary && search.activeItinerary >= 0\n    ? itineraries[search.activeItinerary]\n    : null\n}\n\n/**\n * Determine if the current query has a valid location, including lat/lon\n * @param {Object} query an OTP query object\n * @param {string} locationKey the location key ('from' or 'to')\n * @returns {boolean}\n */\nexport function hasValidLocation (query, locationKey) {\n  return query[locationKey] &&\n    query[locationKey].lat &&\n    query[locationKey].lon\n}\n\n/**\n * Determine if the current query is valid\n * @param {Object} otpState the OTP state object\n * @returns {boolean}\n */\nexport function queryIsValid (otpState) {\n  const {currentQuery} = otpState\n  return hasValidLocation(currentQuery, 'from') &&\n    hasValidLocation(currentQuery, 'to')\n    // TODO: add mode validation\n    // TODO: add date/time validation\n}\n\nexport function getRealtimeEffects (otpState) {\n  const search = getActiveSearch(otpState)\n\n  const realtimeItineraries = search &&\n    search.response &&\n    search.response.plan\n    ? search.response.plan.itineraries\n    : null\n\n  const hasNonRealtimeItineraries = search &&\n    search.nonRealtimeResponse &&\n    search.nonRealtimeResponse.plan\n\n  const nonRealtimeItineraries = hasNonRealtimeItineraries\n    ? search.nonRealtimeResponse.plan.itineraries\n    : null\n\n  const isAffectedByRealtimeData = !!(\n    realtimeItineraries &&\n    hasNonRealtimeItineraries &&\n    // FIXME: Are realtime impacts only indicated by a change in the duration\n    // of the first itinerary\n    realtimeItineraries[0].duration !== nonRealtimeItineraries[0].duration\n  )\n\n  const normalRoutes = isAffectedByRealtimeData && nonRealtimeItineraries\n    ? nonRealtimeItineraries[0].legs.filter(leg => !!leg.route).map(leg => leg.route)\n    : []\n\n  const realtimeRoutes = isAffectedByRealtimeData && realtimeItineraries\n    ? realtimeItineraries[0].legs.filter(leg => !!leg.route).map(leg => leg.route)\n    : []\n\n  const normalDuration = isAffectedByRealtimeData && nonRealtimeItineraries\n    ? nonRealtimeItineraries[0].duration : 0\n\n  const realtimeDuration = isAffectedByRealtimeData && realtimeItineraries\n    ? realtimeItineraries[0].duration : 0\n  return {\n    isAffectedByRealtimeData,\n    normalRoutes,\n    realtimeRoutes,\n    routesDiffer: !isEqual(normalRoutes, realtimeRoutes),\n    normalDuration,\n    realtimeDuration,\n    exceedsThreshold: Math.abs(normalDuration - realtimeDuration) >= otpState.config.realtimeEffectsDisplayThreshold\n  }\n  // // TESTING: Return this instead to simulate a realtime-affected itinerary.\n  // return {\n  //   isAffectedByRealtimeData: true,\n  //   normalRoutes: ['10', '2', '10'],\n  //   realtimeRoutes: ['1', '2'],\n  //   routesDiffer: true,\n  //   normalDuration: 1000,\n  //   realtimeDuration: 800,\n  //   exceedsThreshold: true\n  // }\n}\n\n/**\n * Determine whether user settings panel is enabled.\n */\nexport function getShowUserSettings (otpState) {\n  return otpState.config.persistence && otpState.config.persistence.enabled\n}\n\nexport function getStopViewerConfig (otpState) {\n  return otpState.config.stopViewer\n}\n\n/**\n * Assemble any UI-state properties to be tracked via URL into a single object\n * TODO: Expand to include additional UI properties\n */\nexport function getUiUrlParams (otpState) {\n  const activeSearch = getActiveSearch(otpState)\n  const uiParams = {\n    ui_activeItinerary: activeSearch ? activeSearch.activeItinerary : 0,\n    ui_activeSearch: otpState.activeSearchId\n  }\n  return uiParams\n}\n\n// Set default title to the original document title (on load) set in index.html\nconst DEFAULT_TITLE = document.title\n\nexport function getTitle (state) {\n  // Override title can optionally be provided in config.yml\n  const { config, ui, user } = state.otp\n  let title = config.title || DEFAULT_TITLE\n  const { mainPanelContent, viewedRoute, viewedStop } = ui\n  switch (mainPanelContent) {\n    case MainPanelContent.ROUTE_VIEWER:\n      title += ' | Route'\n      if (viewedRoute && viewedRoute.routeId) title += ` ${viewedRoute.routeId}`\n      break\n    case MainPanelContent.STOP_VIEWER:\n      title += ' | Stop'\n      if (viewedStop && viewedStop.stopId) title += ` ${viewedStop.stopId}`\n      break\n    default:\n      const activeSearch = getActiveSearch(state.otp)\n      if (activeSearch) {\n        title += ` | ${coreUtils.query.summarizeQuery(activeSearch.query, user.locations)}`\n      }\n      break\n  }\n  // if (printView) title += ' | Print'\n  return title\n}\n"]}